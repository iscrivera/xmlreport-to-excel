<?xml version="1.0" encoding="ISO-8859-1"?>

<detailedreport xmlns:xsi="http&#x3a;&#x2f;&#x2f;www.w3.org&#x2f;2001&#x2f;XMLSchema-instance" xmlns="https&#x3a;&#x2f;&#x2f;www.veracode.com&#x2f;schema&#x2f;reports&#x2f;export&#x2f;1.0" xsi:schemaLocation="https&#x3a;&#x2f;&#x2f;www.veracode.com&#x2f;schema&#x2f;reports&#x2f;export&#x2f;1.0 https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;resource&#x2f;detailedreport.xsd" report_format_version="1.5" account_id="64547" app_name="BET - Micrositio" app_id="727349" analysis_id="8138604" static_analysis_unit_id="8153667" sandbox_id="1853168" first_build_submitted_date="2020-05-07 22&#x3a;00&#x3a;29 UTC" version="MicrositioArv" build_id="8161057" submitter="Laura Berenice Mendoza Guti&#xe9;rrez" platform="Not Specified" assurance_level="5" business_criticality="5" generation_date="2020-08-18 01&#x3a;38&#x3a;04 UTC" veracode_level="VL3" total_flaws="126" flaws_not_mitigated="126" teams="BET" life_cycle_stage="Not Specified" planned_deployment_date="2020-05-07 21&#x3a;42&#x3a;41 UTC" last_update_time="2020-08-12 19&#x3a;15&#x3a;54 UTC" is_latest_build="true" policy_name="Santander Mexico Very High" policy_version="8" policy_compliance_status="Did Not Pass" policy_rules_status="Did Not Pass" grace_period_expired="true" scan_overdue="false" business_owner="" business_unit="Santec" tags="bet" legacy_scan_engine="false"><static-analysis rating="D" score="72" submitted_date="2020-08-12 19&#x3a;05&#x3a;20 UTC" published_date="2020-08-12 19&#x3a;15&#x3a;52 UTC" version="MicrositioArv" analysis_size_bytes="2986511" engine_version="20200702140713">
      <modules>
         <module name="MicroSitioBETEARWeb.ear" compiler="JAVAC_7" os="Java J2SE 7" architecture="JVM" loc="114258" score="78" numflawssev0="0" numflawssev1="0" numflawssev2="1" numflawssev3="79" numflawssev4="0" numflawssev5="0"/>
         <module name="MicroSitioBETEAREJB.ear" compiler="JAVAC_7" os="Java J2SE 7" architecture="JVM" loc="208740" score="88" numflawssev0="1" numflawssev1="0" numflawssev2="13" numflawssev3="32" numflawssev4="0" numflawssev5="0"/>
      </modules>
   </static-analysis>
   <severity level="5"/>
   <severity level="4">
      <category categoryid="19" categoryname="SQL Injection" pcirelated="false">
         <desc>
            <para text="SQL injection vulnerabilities occur when data enters an application from an untrusted source and is used to dynamically construct a SQL query.  This allows an attacker to manipulate database queries in order to access, modify, or delete arbitrary data.  Depending on the platform, database type, and configuration, it may also be possible to execute administrative operations on the database, access the filesystem, or execute arbitrary system commands.  SQL injection attacks can also be used to subvert authentication and authorization schemes, which would enable an attacker to gain privileged access to restricted portions of the application."/>
         </desc>
         <recommendations>
            <para text="Several techniques can be used to prevent SQL injection attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a SQL injection vulnerability.">
               <bulletitem text="Use parameterized prepared statements rather than dynamically constructing SQL queries.  This will prevent the database from interpreting the contents of bind variables as part of the query and is the most effective defense against SQL injection."/>
               <bulletitem text="Validate user-supplied input using positive filters &#x28;white lists&#x29; to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
               <bulletitem text="Normalize all user-supplied data before applying filters or regular expressions, or submitting the data to a database. This means that all URL-encoded &#x28;&#x25;xx&#x29;, HTML-encoded &#x28;&#x26;&#x23;xx&#x3b;&#x29;, or other encoding schemes should be reduced to the internal character representation expected by the application. This prevents attackers from using alternate encoding schemes to bypass filters."/>
               <bulletitem text="When using database abstraction libraries such as Hibernate, do not assume that all methods exposed by the API will automatically prevent SQL injection attacks.  Most libraries contain methods that pass arbitrary queries to the database in an unsafe manner."/>
            </para>
         </recommendations>
         <cwe cweid="89" cwename="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" pcirelated="true" owasp="1027" sans="864">
            <description>
               <text text="This database query contains a SQL injection flaw.  The function call constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database."/>
            </description>
            <staticflaws>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="4" issueid="91" module="cmpEjecutoresMensajeria-1.1.1.jar&#x2f;cmpChannelDatabase-1.11.0.jar" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable pstrQuery. The tainted data originated from earlier calls to mx.isban.agave.cmpSMSEmail.cliente.SMSEmail.obtenMensajesDeBD, mx.isban.agave.cmpSMSEmail.cliente.SMSEmail.obtenMensajesDistribuido, java.sql.PreparedStatement.executeQuery, and java.sql.Statement.executeQuery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DataAccessDataBaseDAO.java" line="170" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;channels&#x2f;database&#x2f;dao&#x2f;" scope="mx.isban.agave.dataaccess.channels.database.dao.DataAccessDataBaseDAO" functionprototype="boolean executeQuery&#x28;java.lang.String&#x29;" functionrelativelocation="30"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="4" issueid="85" module="cmpEjecutoresMensajeria-1.1.1.jar&#x2f;cmpChannelDatabase-1.11.0.jar" type="java.sql.PreparedStatement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.PreparedStatement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. executeQuery&#x28;&#x29; was called on the pstm object, which contains tainted data. The tainted data originated from earlier calls to mx.isban.agave.cmpSMSEmail.cliente.SMSEmail.obtenMensajesDeBD, mx.isban.agave.cmpSMSEmail.cliente.SMSEmail.obtenMensajesDistribuido, java.sql.PreparedStatement.executeQuery, and java.sql.Statement.executeQuery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DataAccessDataBaseDAO.java" line="225" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;channels&#x2f;database&#x2f;dao&#x2f;" scope="mx.isban.agave.dataaccess.channels.database.dao.DataAccessDataBaseDAO" functionprototype="boolean executeQuery&#x28;java.lang.String, java.util.List&#x29;" functionrelativelocation="33"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="4" issueid="90" module="cmpEjecutoresMensajeria-1.1.1.jar&#x2f;cmpChannelDatabase-1.11.0.jar" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeUpdate&#x28;&#x29; contains tainted data from the variable pstrInsert. The tainted data originated from earlier calls to mx.isban.agave.cmpSMSEmail.cliente.SMSEmail.obtenMensajesDeBD, mx.isban.agave.cmpSMSEmail.cliente.SMSEmail.obtenMensajesDistribuido, java.sql.PreparedStatement.executeQuery, and java.sql.Statement.executeQuery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DataAccessDataBaseDAO.java" line="363" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;channels&#x2f;database&#x2f;dao&#x2f;" scope="mx.isban.agave.dataaccess.channels.database.dao.DataAccessDataBaseDAO" functionprototype="boolean executeInsert&#x28;java.lang.String&#x29;" functionrelativelocation="41"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="4" issueid="92" module="cmpEjecutoresMensajeria-1.1.1.jar&#x2f;cmpChannelDatabase-1.11.0.jar" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeUpdate&#x28;&#x29; contains tainted data from the variable pstrUpdate. The tainted data originated from earlier calls to mx.isban.agave.cmpSMSEmail.cliente.SMSEmail.obtenMensajesDeBD, mx.isban.agave.cmpSMSEmail.cliente.SMSEmail.obtenMensajesDistribuido, java.sql.PreparedStatement.executeQuery, and java.sql.Statement.executeQuery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DataAccessDataBaseDAO.java" line="413" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;channels&#x2f;database&#x2f;dao&#x2f;" scope="mx.isban.agave.dataaccess.channels.database.dao.DataAccessDataBaseDAO" functionprototype="boolean executeUpdate&#x28;java.lang.String&#x29;" functionrelativelocation="44"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="4" issueid="84" module="cmpEjecutoresMensajeria-1.1.1.jar&#x2f;cmpChannelDatabase-1.11.0.jar" type="java.sql.Statement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeUpdate&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeUpdate&#x28;&#x29; contains tainted data from the variable pstrDelete. The tainted data originated from earlier calls to mx.isban.agave.cmpSMSEmail.cliente.SMSEmail.obtenMensajesDeBD, mx.isban.agave.cmpSMSEmail.cliente.SMSEmail.obtenMensajesDistribuido, java.sql.PreparedStatement.executeQuery, and java.sql.Statement.executeQuery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DataAccessDataBaseDAO.java" line="467" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;channels&#x2f;database&#x2f;dao&#x2f;" scope="mx.isban.agave.dataaccess.channels.database.dao.DataAccessDataBaseDAO" functionprototype="boolean executeDelete&#x28;java.lang.String&#x29;" functionrelativelocation="41"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="4" issueid="87" module="cmpEjecutoresMensajeria-1.1.1.jar&#x2f;cmpChannelDatabase-1.11.0.jar" type="java.sql.PreparedStatement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.PreparedStatement.executeUpdate&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. executeUpdate&#x28;&#x29; was called on the pstm object, which contains tainted data. The tainted data originated from earlier calls to mx.isban.agave.cmpSMSEmail.cliente.SMSEmail.obtenMensajesDeBD, mx.isban.agave.cmpSMSEmail.cliente.SMSEmail.obtenMensajesDistribuido, java.sql.PreparedStatement.executeQuery, and java.sql.Statement.executeQuery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DataAccessDataBaseDAO.java" line="527" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;channels&#x2f;database&#x2f;dao&#x2f;" scope="mx.isban.agave.dataaccess.channels.database.dao.DataAccessDataBaseDAO" functionprototype="boolean executeDB&#x28;java.lang.String, java.util.List, java.lang.String, int&#x29;" functionrelativelocation="70"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="13" issueid="36" module="AgaveWorkerCookie-1.1.3.jar&#x2f;cmpLoggingDB-1.1.0.jar" type="java.sql.PreparedStatement.executeUpdate" description="This database query contains a SQL injection flaw. The call to java.sql.PreparedStatement.executeUpdate&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. executeUpdate&#x28;&#x29; was called on the ps object, which contains tainted data. The tainted data originated from earlier calls to mx.isban.agave.commons.utils.LogUtil.getLoggingBean, mx.isban.agave.commons.architech.ArchitechLocalLogging.error, mx.isban.agave.commons.architech.ArchitechLocalLogging.debug, mx.isban.agave.commons.architech.ArchitechLocalLoggingDB.warn, mx.isban.agave.commons.architech.Architech.debug, mx.isban.agave.commons.architech.ArchitechLocalLoggingDB.trace, mx.isban.agave.commons.architech.ArchitechLocalLoggingDB.fatal, mx.isban.agave.commons.architech.ArchitechLocalLoggingDB.info, mx.isban.agave.commons.architech.Architech.debug, mx.isban.agave.commons.architech.Architech.trace, mx.isban.agave.commons.architech.ArchitechLocalLogging.info, mx.isban.agave.commons.architech.ArchitechLocalLoggingDB.error, mx.isban.agave.commons.architech.Architech.info, mx.isban.agave.commons.architech.Architech.trace, mx.isban.agave.commons.architech.ArchitechLocalLogging.error, mx.isban.agave.commons.architech.ArchitechLocalLogging.debug, mx.isban.agave.commons.architech.ArchitechLocalLogging.warn, mx.isban.agave.commons.architech.ArchitechLocalLoggingDB.debug, mx.isban.agave.commons.architech.ArchitechLocalLogging.info, mx.isban.agave.commons.architech.Architech.fatal, mx.isban.agave.commons.utils.LogUtil.construyeTrama, mx.isban.agave.commons.architech.ArchitechLocalLogging.fatal, mx.isban.agave.commons.architech.ArchitechLocalLoggingDB.info, mx.isban.agave.commons.architech.ArchitechLocalLogging.trace, mx.isban.agave.commons.architech.ArchitechLocalLogging.error, mx.isban.agave.commons.architech.ArchitechLocalLogging.error, mx.isban.agave.commons.architech.ArchitechLocalLogging.info, mx.isban.agave.configuracion.ConfiguracionUtil.getTramaLog, mx.isban.agave.logging.LoggingUtil.getTramaLog, mx.isban.agave.configuracion.ConfiguracionUtil.getTramaLog, mx.isban.agave.commons.architech.ArchitechLocalLoggingDB.trace, mx.isban.agave.commons.architech.ArchitechLocalLogging.fatal, and mx.isban.agave.commons.architech.ArchitechLocalLogging.trace.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LoggingDB.java" line="195" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;logging&#x2f;" scope="mx.isban.agave.logging.LoggingDB" functionprototype="void grabaLogBD&#x28;commons.beans.LoggingBean, Level&#x29;" functionrelativelocation="68"/>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <severity level="3">
      <category categoryid="21" categoryname="CRLF Injection" pcirelated="true">
         <desc>
            <para text="The acronym CRLF stands for &#x22;Carriage Return, Line Feed&#x22; and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  "/>
         </desc>
         <recommendations>
            <para text="Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents."/>
         </recommendations>
         <cwe cweid="113" cwename="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" pcirelated="true" owasp="1027">
            <description>
               <text text="A function call contains an HTTP response splitting flaw.  Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" count="1" issueid="308" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie&#x28;&#x29; contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The first argument to addCookie&#x28;&#x29; contains tainted data from the variable cookie. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.&#xd;&#xa;&#xd;&#xa;Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader&#x28;&#x29;, etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;113.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;HTTP_Response_Splitting&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;HTTP-Response-Splitting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="VentanaOperativaController.java" line="502" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;ventana&#x2f;operativa&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.ventana.operativa.controller.VentanaOperativaController" functionprototype="org.springframework.http.ResponseEntity borrarCache&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.http.HttpSession&#x29;" functionrelativelocation="54"/>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" count="1" issueid="243" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie&#x28;&#x29; contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The first argument to addCookie&#x28;&#x29; contains tainted data from the variable cookie. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.&#xd;&#xa;&#xd;&#xa;Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader&#x28;&#x29;, etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;113.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;HTTP_Response_Splitting&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;HTTP-Response-Splitting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="VentanaOperativaController.java" line="511" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;ventana&#x2f;operativa&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.ventana.operativa.controller.VentanaOperativaController" functionprototype="org.springframework.http.ResponseEntity borrarCache&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.http.HttpSession&#x29;" functionrelativelocation="84"/>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" count="2" issueid="7" module="IsbSecuritySSOFilter-1.0.6.jar&#x2f;ssocomunes-1.0.2.jar" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie&#x28;&#x29; contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The first argument to addCookie&#x28;&#x29; contains tainted data from the variable retSecCookie. The tainted data originated from an earlier call to mx.isban.security.filterng.extractor.CookieExtractor.createCookie.&#xd;&#xa;&#xd;&#xa;Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader&#x28;&#x29;, etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;113.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;HTTP_Response_Splitting&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;HTTP-Response-Splitting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CookieExtractor.java" line="84" sourcefilepath="mx&#x2f;isban&#x2f;security&#x2f;filterng&#x2f;extractor&#x2f;" scope="mx.isban.security.filterng.extractor.CookieExtractor" functionprototype="void regeneraToken&#x28;java.lang.String, SecurityWorker, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.String&#x29;" functionrelativelocation="86"/>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" count="1" issueid="72" module="web-1.0.2.jar" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect&#x28;&#x29; contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server.&#xd;&#xa;&#xd;&#xa;Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader&#x28;&#x29;, etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;113.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;HTTP_Response_Splitting&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;HTTP-Response-Splitting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="113" remediationeffort="2" exploitLevel="0" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EnvironmentFilter.java" line="71" sourcefilepath="mx&#x2f;isban&#x2f;arquitectura&#x2f;seguridad&#x2f;config&#x2f;filter&#x2f;" scope="mx.isban.arquitectura.seguridad.config.filter.EnvironmentFilter" functionprototype="void doFilter&#x28;javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain&#x29;" functionrelativelocation="69"/>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" count="1" issueid="102" module="cmpInterceptors-1.2.1.jar" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect&#x28;&#x29; contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server.&#xd;&#xa;&#xd;&#xa;Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader&#x28;&#x29;, etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;113.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;HTTP_Response_Splitting&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;HTTP-Response-Splitting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="113" remediationeffort="2" exploitLevel="0" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FilterLogin.java" line="457" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;commons&#x2f;filters&#x2f;" scope="mx.isban.agave.commons.filters.FilterLogin" functionprototype="void expulsarSesionEnviarLogout&#x28;javax.servlet.ServletResponse, javax.servlet.http.HttpSession, java.lang.String, java.lang.String, boolean, sesiones.Sesiones&#x29;" functionrelativelocation="51"/>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" count="1" issueid="108" module="cmpInterceptors-1.2.1.jar" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect&#x28;&#x29; contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server.&#xd;&#xa;&#xd;&#xa;Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader&#x28;&#x29;, etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;113.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;HTTP_Response_Splitting&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;HTTP-Response-Splitting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="113" remediationeffort="2" exploitLevel="0" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FilterLogin.java" line="460" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;commons&#x2f;filters&#x2f;" scope="mx.isban.agave.commons.filters.FilterLogin" functionprototype="void expulsarSesionEnviarLogout&#x28;javax.servlet.ServletResponse, javax.servlet.http.HttpSession, java.lang.String, java.lang.String, boolean, sesiones.Sesiones&#x29;" functionrelativelocation="93"/>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" count="1" issueid="103" module="cmpInterceptors-1.2.1.jar" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect&#x28;&#x29; contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server.&#xd;&#xa;&#xd;&#xa;Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader&#x28;&#x29;, etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;113.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;HTTP_Response_Splitting&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;HTTP-Response-Splitting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="113" remediationeffort="2" exploitLevel="0" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FilterLogin.java" line="488" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;commons&#x2f;filters&#x2f;" scope="mx.isban.agave.commons.filters.FilterLogin" functionprototype="void expulsarSesionEnviarLogout&#x28;javax.servlet.ServletResponse, javax.servlet.http.HttpSession, java.lang.String, java.lang.String, boolean, sesiones.Sesiones, sesiones.beans.SesionDTO&#x29;" functionrelativelocation="66"/>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" count="1" issueid="104" module="cmpInterceptors-1.2.1.jar" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect&#x28;&#x29; contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server.&#xd;&#xa;&#xd;&#xa;Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader&#x28;&#x29;, etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;113.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;HTTP_Response_Splitting&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;HTTP-Response-Splitting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="113" remediationeffort="2" exploitLevel="0" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FilterLogin.java" line="491" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;commons&#x2f;filters&#x2f;" scope="mx.isban.agave.commons.filters.FilterLogin" functionprototype="void expulsarSesionEnviarLogout&#x28;javax.servlet.ServletResponse, javax.servlet.http.HttpSession, java.lang.String, java.lang.String, boolean, sesiones.Sesiones, sesiones.beans.SesionDTO&#x29;" functionrelativelocation="95"/>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" count="1" issueid="116" module="cmpInterceptors-1.2.1.jar" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect&#x28;&#x29; contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server.&#xd;&#xa;&#xd;&#xa;Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader&#x28;&#x29;, etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;113.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;HTTP_Response_Splitting&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;HTTP-Response-Splitting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="113" remediationeffort="2" exploitLevel="0" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FilterLogin.java" line="542" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;commons&#x2f;filters&#x2f;" scope="mx.isban.agave.commons.filters.FilterLogin" functionprototype="void reenviarInactivarSesion&#x28;javax.servlet.ServletResponse, javax.servlet.http.HttpSession, java.lang.String, java.lang.String, boolean, sesiones.Sesiones, sesiones.beans.SesionDTO&#x29;" functionrelativelocation="64"/>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" count="1" issueid="112" module="cmpInterceptors-1.2.1.jar" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect&#x28;&#x29; contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server.&#xd;&#xa;&#xd;&#xa;Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader&#x28;&#x29;, etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;113.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;HTTP_Response_Splitting&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;HTTP-Response-Splitting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="113" remediationeffort="2" exploitLevel="0" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FilterLogin.java" line="546" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;commons&#x2f;filters&#x2f;" scope="mx.isban.agave.commons.filters.FilterLogin" functionprototype="void reenviarInactivarSesion&#x28;javax.servlet.ServletResponse, javax.servlet.http.HttpSession, java.lang.String, java.lang.String, boolean, sesiones.Sesiones, sesiones.beans.SesionDTO&#x29;" functionrelativelocation="96"/>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" count="1" issueid="107" module="cmpInterceptors-1.2.1.jar" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect&#x28;&#x29; contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server.&#xd;&#xa;&#xd;&#xa;Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader&#x28;&#x29;, etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;113.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;HTTP_Response_Splitting&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;HTTP-Response-Splitting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="113" remediationeffort="2" exploitLevel="0" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FilterLoginSimulaSAM.java" line="135" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;commons&#x2f;filters&#x2f;" scope="mx.isban.agave.commons.filters.FilterLoginSimulaSAM" functionprototype="void doFilter&#x28;javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain&#x29;" functionrelativelocation="57"/>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" count="1" issueid="109" module="cmpInterceptors-1.2.1.jar" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect&#x28;&#x29; contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server.&#xd;&#xa;&#xd;&#xa;Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader&#x28;&#x29;, etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;113.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;HTTP_Response_Splitting&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;HTTP-Response-Splitting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="113" remediationeffort="2" exploitLevel="0" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FilterLoginSimulaSAM.java" line="164" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;commons&#x2f;filters&#x2f;" scope="mx.isban.agave.commons.filters.FilterLoginSimulaSAM" functionprototype="void doFilter&#x28;javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain&#x29;" functionrelativelocation="94"/>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" count="1" issueid="117" module="cmpInterceptors-1.2.1.jar" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie&#x28;&#x29; contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The first argument to addCookie&#x28;&#x29; contains tainted data from the variable cookie. The tainted data originated from earlier calls to javax.servlet.http.HttpServletRequest.getCookies, and javax.servlet.http.HttpServletRequestWrapper.getCookies.&#xd;&#xa;&#xd;&#xa;Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader&#x28;&#x29;, etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;113.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;HTTP_Response_Splitting&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;HTTP-Response-Splitting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FilterLoginSimulaSAM.java" line="225" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;commons&#x2f;filters&#x2f;" scope="mx.isban.agave.commons.filters.FilterLoginSimulaSAM" functionprototype="void eliminaCookie&#x28;javax.servlet.ServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="88"/>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" count="1" issueid="71" module="web-1.0.2.jar&#x2f;IsbSecurityFilter-1.0.1.jar" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect&#x28;&#x29; contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server.&#xd;&#xa;&#xd;&#xa;Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader&#x28;&#x29;, etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;113.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;HTTP_Response_Splitting&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;HTTP-Response-Splitting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="113" remediationeffort="2" exploitLevel="0" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SecOutputFilter.java" line="232" sourcefilepath="mx&#x2f;isban&#x2f;security&#x2f;components&#x2f;" scope="mx.isban.security.components.SecOutputFilter&#x24;WrapperRsSecured" functionprototype="void sendRedirect&#x28;java.lang.String&#x29;" functionrelativelocation="43"/>
            </staticflaws>
         </cwe>
         <cwe cweid="117" cwename="Improper Output Neutralization for Logs" pcirelated="true" owasp="1027" certjava="1134">
            <description>
               <text text="A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="2" issueid="155" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error&#x28;&#x29; contains tainted data from the variables &#x28;new Object&#x5c;&#x5b;...&#x5c;&#x5d;&#x29;. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AliasUtils.java" line="47" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;util&#x2f;" scope="com.santander.sbp.security.server.util.AliasUtils" functionprototype="java.lang.String getCompanyFromLegalEntity&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="95"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="2" issueid="175" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;MicroSitioBETCliente-1.0.jar" type="org.apache.log4j.Category.debug" description="This call to org.apache.log4j.Category.debug&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and javax.xml.parsers.SAXParser.parse.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CabeceraOPLP.java" line="200" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;comunes&#x2f;partenon&#x2f;cabeceras&#x2f;" scope="mx.isban.bet.micrositio.comunes.partenon.cabeceras.CabeceraOPLP" functionprototype="boolean evaluaExistenciaField&#x28;java.lang.Object, java.lang.String&#x29;" functionrelativelocation="50"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="2" issueid="186" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;MicroSitioBETCliente-1.0.jar" type="org.apache.log4j.Category.debug" description="This call to org.apache.log4j.Category.debug&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to javax.xml.parsers.SAXParser.parse, and AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CabeceraPCT1.java" line="211" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;comunes&#x2f;partenon&#x2f;cabeceras&#x2f;" scope="mx.isban.bet.micrositio.comunes.partenon.cabeceras.CabeceraPCT1" functionprototype="boolean evaluaExistenciaField&#x28;java.lang.Object, java.lang.String&#x29;" functionrelativelocation="50"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="2" issueid="185" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;MicroSitioBETCliente-1.0.jar" type="org.apache.log4j.Category.debug" description="This call to org.apache.log4j.Category.debug&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to javax.xml.parsers.SAXParser.parse, and AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CabeceraPCTA.java" line="172" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;comunes&#x2f;partenon&#x2f;cabeceras&#x2f;" scope="mx.isban.bet.micrositio.comunes.partenon.cabeceras.CabeceraPCTA" functionprototype="boolean evaluaExistenciaField&#x28;java.lang.Object, java.lang.String&#x29;" functionrelativelocation="50"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="310" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and javax.servlet.http.HttpServletRequest.getRequestURL.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ExceptionHandlerController.java" line="72" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;errors&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.errors.controller.ExceptionHandlerController" functionprototype="org.springframework.web.servlet.ModelAndView jmsError&#x28;javax.servlet.http.HttpServletRequest, javax.jms.JMSException&#x29;" functionrelativelocation="92"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="326" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and javax.servlet.http.HttpServletRequest.getRequestURL.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ExceptionHandlerController.java" line="96" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;errors&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.errors.controller.ExceptionHandlerController" functionprototype="org.springframework.web.servlet.ModelAndView raResourceError&#x28;javax.servlet.http.HttpServletRequest, com.isban.mfconnectors.jca.trxop.cci.RAResourceException&#x29;" functionrelativelocation="92"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="269" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and javax.servlet.http.HttpServletRequest.getRequestURL.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ExceptionHandlerController.java" line="120" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;errors&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.errors.controller.ExceptionHandlerController" functionprototype="org.springframework.web.servlet.ModelAndView mathError&#x28;javax.servlet.http.HttpServletRequest, java.lang.ArithmeticException&#x29;" functionrelativelocation="92"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="309" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and javax.servlet.http.HttpServletRequest.getRequestURL.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ExceptionHandlerController.java" line="143" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;errors&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.errors.controller.ExceptionHandlerController" functionprototype="org.springframework.web.servlet.ModelAndView nullError&#x28;javax.servlet.http.HttpServletRequest, java.lang.NullPointerException&#x29;" functionrelativelocation="92"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="432" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and javax.servlet.http.HttpServletRequest.getRequestURL.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ExceptionHandlerController.java" line="166" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;errors&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.errors.controller.ExceptionHandlerController" functionprototype="org.springframework.web.servlet.ModelAndView oracleError404&#x28;javax.servlet.http.HttpServletRequest, oracle.jdbc.xa.OracleXAException&#x29;" functionrelativelocation="92"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="266" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and javax.servlet.http.HttpServletRequest.getRequestURL.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ExceptionHandlerController.java" line="189" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;errors&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.errors.controller.ExceptionHandlerController" functionprototype="org.springframework.web.servlet.ModelAndView sqlError&#x28;javax.servlet.http.HttpServletRequest, java.sql.SQLSyntaxErrorException&#x29;" functionrelativelocation="92"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="323" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and javax.servlet.http.HttpServletRequest.getRequestURL.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ExceptionHandlerController.java" line="213" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;errors&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.errors.controller.ExceptionHandlerController" functionprototype="org.springframework.web.servlet.ModelAndView sqlError&#x28;javax.servlet.http.HttpServletRequest, java.sql.SQLException&#x29;" functionrelativelocation="92"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="241" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and javax.servlet.http.HttpServletRequest.getRequestURL.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ExceptionHandlerController.java" line="237" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;errors&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.errors.controller.ExceptionHandlerController" functionprototype="org.springframework.web.servlet.ModelAndView handleError404&#x28;javax.servlet.http.HttpServletRequest, org.springframework.web.servlet.NoHandlerFoundException&#x29;" functionrelativelocation="92"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="427" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and javax.servlet.http.HttpServletRequest.getRequestURL.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ExceptionHandlerController.java" line="260" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;errors&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.errors.controller.ExceptionHandlerController" functionprototype="org.springframework.web.servlet.ModelAndView ejbError&#x28;javax.servlet.http.HttpServletRequest, javax.ejb.EJBException&#x29;" functionrelativelocation="92"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="374" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and javax.servlet.http.HttpServletRequest.getRequestURL.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ExceptionHandlerController.java" line="283" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;errors&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.errors.controller.ExceptionHandlerController" functionprototype="org.springframework.web.servlet.ModelAndView BusinessError&#x28;javax.servlet.http.HttpServletRequest, agave.commons.exception.BusinessException&#x29;" functionrelativelocation="92"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="314" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and javax.servlet.http.HttpServletRequest.getRequestURL.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ExceptionHandlerController.java" line="306" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;errors&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.errors.controller.ExceptionHandlerController" functionprototype="org.springframework.web.servlet.ModelAndView handleError&#x28;javax.servlet.http.HttpServletRequest, java.lang.Exception&#x29;" functionrelativelocation="92"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="29" module="MicroSitioBETEAREJB.ear&#x2f;cmpLogging-1.1.0.jar" type="org.apache.log4j.Category.log" description="This call to org.apache.log4j.Category.log&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to log&#x28;&#x29; contains tainted data from the variable trama. The tainted data originated from an earlier call to java.net.URL.openStream.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Log.java" line="143" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;logging&#x2f;" scope="mx.isban.agave.logging.Log" functionprototype="void mostrarTrama&#x28;commons.beans.LoggingBean, Level&#x29;" functionrelativelocation="93"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="32" module="MicroSitioBETEAREJB.ear&#x2f;cmpLogging-1.1.0.jar" type="org.apache.log4j.Category.log" description="This call to org.apache.log4j.Category.log&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to log&#x28;&#x29; contains tainted data from the variable trama. The tainted data originated from an earlier call to java.net.URL.openStream.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Log.java" line="163" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;logging&#x2f;" scope="mx.isban.agave.logging.Log" functionprototype="void mostrarTrama&#x28;commons.beans.LoggingBean, Level, java.lang.Throwable&#x29;" functionrelativelocation="93"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="303" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and javax.servlet.ServletRequest.getParameter.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RecaudacionesPagosReferenciadosController.java" line="595" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;micro&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.micro.controller.RecaudacionesPagosReferenciadosController" functionprototype="org.springframework.web.servlet.ModelAndView pagoReferenciadoSATPaso3&#x28;recaudaciones.beans.PagoGenericoBean_veracode_2, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpSession, java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="88"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="426" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to javax.servlet.ServletRequest.getParameter, and AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RecaudacionesPagosReferenciadosController.java" line="596" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;micro&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.micro.controller.RecaudacionesPagosReferenciadosController" functionprototype="org.springframework.web.servlet.ModelAndView pagoReferenciadoSATPaso3&#x28;recaudaciones.beans.PagoGenericoBean_veracode_2, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpSession, java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="90"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="149" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error&#x28;&#x29; contains tainted data from the variable e. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="133" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="rest.model.AuthResponse authenticate&#x28;java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="80"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="157" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="133" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="rest.model.AuthResponse authenticate&#x28;java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="80"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="2" issueid="137" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.info" description="This call to org.slf4j.Logger.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="146" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="rest.model.AuthResponse authenticate&#x28;java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="97"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="2" issueid="130" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="161" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="rest.model.TokenResponse generateToken&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="39"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="2" issueid="147" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="167" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="rest.model.TokenResponse generateToken&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="83"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="150" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="220" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="rest.model.AuthResponse changePassword&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="83"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="151" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error&#x28;&#x29; contains tainted data from the variable e. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="220" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="rest.model.AuthResponse changePassword&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="83"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="2" issueid="156" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.info" description="This call to org.slf4j.Logger.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="230" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="rest.model.AuthResponse changePassword&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="97"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="2" issueid="163" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.info" description="This call to org.slf4j.Logger.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="248" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="boolean addUser&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="27"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="160" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="266" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="boolean addUser&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="96"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="161" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error&#x28;&#x29; contains tainted data from the variable e. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="266" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="boolean addUser&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="96"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="159" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error&#x28;&#x29; contains tainted data from the variable e. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="275" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="boolean removeUser&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="86"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="143" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="275" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="boolean removeUser&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="86"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="152" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error&#x28;&#x29; contains tainted data from the variable e. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="284" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="boolean modifyUser&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="87"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="138" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="284" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="boolean modifyUser&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="87"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="2" issueid="135" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.info" description="This call to org.slf4j.Logger.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="290" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="boolean lock&#x28;java.lang.String, java.lang.String, boolean&#x29;" functionrelativelocation="36"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="131" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="294" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="boolean lock&#x28;java.lang.String, java.lang.String, boolean&#x29;" functionrelativelocation="93"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="145" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error&#x28;&#x29; contains tainted data from the variable e. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="294" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="boolean lock&#x28;java.lang.String, java.lang.String, boolean&#x29;" functionrelativelocation="93"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="2" issueid="144" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.info" description="This call to org.slf4j.Logger.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="300" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="boolean enable&#x28;java.lang.String, java.lang.String, boolean&#x29;" functionrelativelocation="36"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="142" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error&#x28;&#x29; contains tainted data from the variable e. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="304" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="boolean enable&#x28;java.lang.String, java.lang.String, boolean&#x29;" functionrelativelocation="93"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="136" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="304" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="boolean enable&#x28;java.lang.String, java.lang.String, boolean&#x29;" functionrelativelocation="93"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="2" issueid="164" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.info" description="This call to org.slf4j.Logger.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="310" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="rest.model.UserFields find&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="14"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="2" issueid="154" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.info" description="This call to org.slf4j.Logger.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="320" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="rest.model.UserFields find&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="75"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="133" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="324" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="rest.model.UserFields find&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="96"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="140" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error&#x28;&#x29; contains tainted data from the variable e. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="324" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="rest.model.UserFields find&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="96"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="126" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error&#x28;&#x29; contains tainted data from the variable e. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="349" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="boolean setPassword&#x28;java.lang.String, java.lang.String, java.lang.String, boolean&#x29;" functionrelativelocation="92"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="146" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="349" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="boolean setPassword&#x28;java.lang.String, java.lang.String, java.lang.String, boolean&#x29;" functionrelativelocation="92"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="134" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error&#x28;&#x29; contains tainted data from the variable e. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="387" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="rest.model.AuthResponse forgotPassword&#x28;java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="80"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="158" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="387" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="rest.model.AuthResponse forgotPassword&#x28;java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="80"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="2" issueid="124" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.info" description="This call to org.slf4j.Logger.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="398" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="rest.model.AuthResponse forgotPassword&#x28;java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="97"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="125" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="414" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="rest.model.AuthResponse getAuthResponseWithLegalEntity&#x28;rest.model.AuthResponse&#x24;Result, java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="69"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="139" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error&#x28;&#x29; contains tainted data from the variable e. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="414" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="rest.model.AuthResponse getAuthResponseWithLegalEntity&#x28;rest.model.AuthResponse&#x24;Result, java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="69"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="2" issueid="148" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error&#x28;&#x29; contains tainted data from the variables &#x28;new Object&#x5c;&#x5b;...&#x5c;&#x5d;&#x29;. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="440" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="boolean isUserEnabledForTradingAccount&#x28;java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="94"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="162" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error&#x28;&#x29; contains tainted data from the variable e. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="461" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="boolean canSendMailToUser&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="93"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="132" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpSecurityService.java" line="461" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;" scope="com.santander.sbp.security.server.SbpSecurityService" functionprototype="boolean canSendMailToUser&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="93"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="129" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error&#x28;&#x29; contains tainted data from the variable e. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SecurityDetailMailer.java" line="51" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;mail&#x2f;" scope="com.santander.sbp.security.server.mail.SecurityDetailMailer" functionprototype="boolean mailNewUserPassword&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="90"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="153" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="org.slf4j.Logger.error" description="This call to org.slf4j.Logger.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SecurityDetailMailer.java" line="51" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;mail&#x2f;" scope="com.santander.sbp.security.server.mail.SecurityDetailMailer" functionprototype="boolean mailNewUserPassword&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="90"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="373" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SignaturePatternController.java" line="466" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;signature&#x2f;pattern&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.signature.pattern.controller.SignaturePatternController" functionprototype="java.lang.String getRealForwardedFor&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="26"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="278" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SignaturePatternController.java" line="467" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;signature&#x2f;pattern&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.signature.pattern.controller.SignaturePatternController" functionprototype="java.lang.String getRealForwardedFor&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="57"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="395" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TokenController.java" line="92" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;token&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.token.controller.TokenController" functionprototype="java.lang.String consultarDatosToken&#x28;java.lang.String, java.lang.String, javax.servlet.http.HttpSession&#x29;" functionrelativelocation="8"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="280" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TokenController.java" line="93" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;token&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.token.controller.TokenController" functionprototype="java.lang.String consultarDatosToken&#x28;java.lang.String, java.lang.String, javax.servlet.http.HttpSession&#x29;" functionrelativelocation="16"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="2" issueid="179" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;MicroSitioBETCliente-1.0.jar" type="org.apache.log4j.Category.debug" description="This call to org.apache.log4j.Category.debug&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to java.net.URLConnection.getHeaderFields.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UtilsHttpRequest.java" line="110" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;util&#x2f;" scope="mx.isban.bet.micrositio.util.UtilsHttpRequest" functionprototype="void setSessionCookies&#x28;java.lang.Object, java.lang.Boolean, java.util.List&#x29;" functionrelativelocation="83"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="2" issueid="169" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;MicroSitioBETCliente-1.0.jar" type="org.apache.log4j.Category.debug" description="This call to org.apache.log4j.Category.debug&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to java.net.URLConnection.getHeaderFields.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UtilsHttpRequest.java" line="189" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;util&#x2f;" scope="mx.isban.bet.micrositio.util.UtilsHttpRequest" functionprototype="java.lang.Object setHttpProporties&#x28;java.lang.Object, java.lang.Boolean, java.util.Map&#x29;" functionrelativelocation="76"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="2" issueid="174" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;MicroSitioBETCliente-1.0.jar" type="org.apache.log4j.Category.debug" description="This call to org.apache.log4j.Category.debug&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to java.net.URLConnection.getContentEncoding.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UtilsHttpRequest.java" line="317" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;util&#x2f;" scope="mx.isban.bet.micrositio.util.UtilsHttpRequest" functionprototype="java.lang.String printHttpHeaderResponse&#x28;java.lang.Object, java.lang.Boolean, int&#x29;" functionrelativelocation="51"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="2" issueid="178" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;MicroSitioBETCliente-1.0.jar" type="org.apache.log4j.Category.debug" description="This call to org.apache.log4j.Category.debug&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to java.net.URLConnection.getContentType.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UtilsHttpRequest.java" line="320" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;util&#x2f;" scope="mx.isban.bet.micrositio.util.UtilsHttpRequest" functionprototype="java.lang.String printHttpHeaderResponse&#x28;java.lang.Object, java.lang.Boolean, int&#x29;" functionrelativelocation="87"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="245" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="VentanaOperativaController.java" line="256" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;ventana&#x2f;operativa&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.ventana.operativa.controller.VentanaOperativaController" functionprototype="org.springframework.web.servlet.ModelAndView configuraEntornoBET&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.http.HttpSession&#x29;" functionrelativelocation="56"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="332" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="VentanaOperativaController.java" line="339" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;ventana&#x2f;operativa&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.ventana.operativa.controller.VentanaOperativaController" functionprototype="org.springframework.http.ResponseEntity configuraMenuJson&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="12"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="380" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="VentanaOperativaController.java" line="340" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;ventana&#x2f;operativa&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.ventana.operativa.controller.VentanaOperativaController" functionprototype="org.springframework.http.ResponseEntity configuraMenuJson&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="23"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="371" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="VentanaOperativaController.java" line="341" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;ventana&#x2f;operativa&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.ventana.operativa.controller.VentanaOperativaController" functionprototype="org.springframework.http.ResponseEntity configuraMenuJson&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="34"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="459" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-07-21 19&#x3a;48&#x3a;28 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2020-08-12 19&#x3a;15&#x3a;52 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="VentanaOperativaController.java" line="876" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;ventana&#x2f;operativa&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.ventana.operativa.controller.VentanaOperativaController" functionprototype="org.springframework.http.ResponseEntity cerrarSesionTerceros&#x28;java.util.Map, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.http.HttpSession&#x29;" functionrelativelocation="25"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="461" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-07-21 19&#x3a;48&#x3a;28 UTC" remediation_status="New" cia_impact="npp" grace_period_expires="2020-08-12 19&#x3a;15&#x3a;52 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="VentanaOperativaController.java" line="981" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;ventana&#x2f;operativa&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.ventana.operativa.controller.VentanaOperativaController" functionprototype="java.lang.String obtenTitularCuenta&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String, agave.commons.beans.ArchitechSessionBean&#x29;" functionrelativelocation="9"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="400" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.debug" description="This call to org.apache.log4j.Category.debug&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="VOCommonsController.java" line="286" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;ventana&#x2f;operativa&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.ventana.operativa.controller.VOCommonsController" functionprototype="org.springframework.http.ResponseEntity cargaLocalStorage&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpSession&#x29;" functionrelativelocation="8"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="375" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.debug" description="This call to org.apache.log4j.Category.debug&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="VOCommonsController.java" line="287" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;ventana&#x2f;operativa&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.ventana.operativa.controller.VOCommonsController" functionprototype="org.springframework.http.ResponseEntity cargaLocalStorage&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpSession&#x29;" functionrelativelocation="11"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="339" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.debug" description="This call to org.apache.log4j.Category.debug&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="VOCommonsController.java" line="300" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;ventana&#x2f;operativa&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.ventana.operativa.controller.VOCommonsController" functionprototype="org.springframework.http.ResponseEntity cargaLocalStorage&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpSession&#x29;" functionrelativelocation="18"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="443" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.debug" description="This call to org.apache.log4j.Category.debug&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="VOCommonsController.java" line="340" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;ventana&#x2f;operativa&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.ventana.operativa.controller.VOCommonsController" functionprototype="org.springframework.http.ResponseEntity cargaLocalStorage&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpSession&#x29;" functionrelativelocation="42"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="288" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.log4j.Category.debug" description="This call to org.apache.log4j.Category.debug&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="VOCommonsController.java" line="398" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;ventana&#x2f;operativa&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.ventana.operativa.controller.VOCommonsController" functionprototype="org.springframework.http.ResponseEntity cargaLocalStorage&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpSession&#x29;" functionrelativelocation="83"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="2" issueid="4" module="IsbSecuritySSOFilter-1.0.6.jar&#x2f;ssocomunes-1.0.2.jar" type="java.util.logging.Logger.fine" description="This call to java.util.logging.Logger.fine&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to fine&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to javax.servlet.http.HttpServletRequestWrapper.getRequestURL, and javax.servlet.http.HttpServletRequest.getRequestURL.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CookieExtractor.java" line="44" sourcefilepath="mx&#x2f;isban&#x2f;security&#x2f;filterng&#x2f;extractor&#x2f;" scope="mx.isban.security.filterng.extractor.CookieExtractor" functionprototype="java.lang.String getToken&#x28;java.lang.String, javax.servlet.http.HttpServletRequest&#x29;" functionrelativelocation="18"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="2" issueid="3" module="IsbSecuritySSOFilter-1.0.6.jar&#x2f;ssocomunes-1.0.2.jar" type="java.util.logging.Logger.fine" description="This call to java.util.logging.Logger.fine&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to fine&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to javax.servlet.http.HttpServletRequestWrapper.getMethod, and javax.servlet.http.HttpServletRequest.getMethod.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CookieExtractor.java" line="45" sourcefilepath="mx&#x2f;isban&#x2f;security&#x2f;filterng&#x2f;extractor&#x2f;" scope="mx.isban.security.filterng.extractor.CookieExtractor" functionprototype="java.lang.String getToken&#x28;java.lang.String, javax.servlet.http.HttpServletRequest&#x29;" functionrelativelocation="26"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="2" issueid="1" module="IsbSecuritySSOFilter-1.0.6.jar&#x2f;ssocomunes-1.0.2.jar" type="java.util.logging.Logger.fine" description="This call to java.util.logging.Logger.fine&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to fine&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getRemoteHost.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CookieExtractor.java" line="46" sourcefilepath="mx&#x2f;isban&#x2f;security&#x2f;filterng&#x2f;extractor&#x2f;" scope="mx.isban.security.filterng.extractor.CookieExtractor" functionprototype="java.lang.String getToken&#x28;java.lang.String, javax.servlet.http.HttpServletRequest&#x29;" functionrelativelocation="34"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="2" issueid="6" module="IsbSecuritySSOFilter-1.0.6.jar&#x2f;ssocomunes-1.0.2.jar" type="java.util.logging.Logger.fine" description="This call to java.util.logging.Logger.fine&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to fine&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to javax.servlet.http.HttpServletRequestWrapper.getRequestedSessionId, and javax.servlet.http.HttpServletRequest.getRequestedSessionId.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CookieExtractor.java" line="48" sourcefilepath="mx&#x2f;isban&#x2f;security&#x2f;filterng&#x2f;extractor&#x2f;" scope="mx.isban.security.filterng.extractor.CookieExtractor" functionprototype="java.lang.String getToken&#x28;java.lang.String, javax.servlet.http.HttpServletRequest&#x29;" functionrelativelocation="51"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="120" module="CmpEncryptedFile.jar" type="org.apache.log4j.Category.log" description="This call to org.apache.log4j.Category.log&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The third argument to log&#x28;&#x29; contains tainted data from the variable sb. The tainted data originated from earlier calls to java.io.FileInputStream.&#x21;ctor, and java.io.File.&#x21;ctor.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Debugger.java" line="155" sourcefilepath="com&#x2f;mx&#x2f;isban&#x2f;encrypt&#x2f;util&#x2f;" scope="com.mx.isban.encrypt.util.Debugger" functionprototype="void log&#x28;java.lang.String, org.apache.log4j.Level, java.lang.String  &#x5b;&#x5d;&#x29;" functionrelativelocation="96"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="15" module="IdcCore-G2.jar" type="java.util.logging.Logger.log" description="This call to java.util.logging.Logger.log&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to log&#x28;&#x29; contains tainted data from the variable format&#x28;&#x29;. The tainted data originated from an earlier call to java.lang.System.getProperties.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DebugMesg.java" line="20" sourcefilepath="mx&#x2f;isban&#x2f;idc&#x2f;core&#x2f;" scope="mx.isban.idc.core.DebugMesg" functionprototype="void trazaSystemInfo&#x28;void&#x29;" functionrelativelocation="83"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="182" module="MicroSitioBETEAREJB.ear&#x2f;MicroSitioBETEJB-1.0.jar" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to java.sql.PreparedStatement.executeQuery, and java.sql.Statement.executeQuery.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="GeneradorBitacora.java" line="202" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;utils&#x2f;" scope="mx.isban.bet.micrositio.utils.GeneradorBitacora" functionprototype="java.lang.String cosultarEstatusToken&#x28;java.lang.String&#x29;" functionrelativelocation="98"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="12" module="IdcCore-G2.jar" type="java.util.logging.Logger.finest" description="This call to java.util.logging.Logger.finest&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to finest&#x28;&#x29; contains tainted data from the variable format&#x28;&#x29;. The tainted data originated from an earlier call to java.io.File.&#x21;ctor.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="IsbProvider.java" line="92" sourcefilepath="mx&#x2f;isban&#x2f;idc&#x2f;core&#x2f;appserver&#x2f;" scope="mx.isban.idc.core.appserver.IsbProvider" functionprototype="void initJndi&#x28;void&#x29;" functionrelativelocation="40"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="10" module="IsbSecuritySSOFilter-1.0.7.beta.jar" type="java.util.logging.Logger.info" description="This call to java.util.logging.Logger.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to javax.servlet.http.HttpServletRequestWrapper.getPathInfo, and javax.servlet.http.HttpServletRequest.getPathInfo.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="IsbSecurityFilter.java" line="74" sourcefilepath="mx&#x2f;isban&#x2f;security&#x2f;filterng&#x2f;" scope="mx.isban.security.filterng.IsbSecurityFilter" functionprototype="void doFilter&#x28;javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain&#x29;" functionrelativelocation="4"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="26" module="AgaveWorkerCookie-1.1.3.jar" type="java.util.logging.Logger.info" description="This call to java.util.logging.Logger.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to mx.isban.agave.jedis.JedisService.get, and mx.isban.agave.jedis.JedisService.ttl.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="JedisService.java" line="33" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;jedis&#x2f;" scope="mx.isban.agave.jedis.JedisService" functionprototype="java.lang.Long ttl&#x28;java.lang.String&#x29;" functionrelativelocation="33"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="27" module="AgaveWorkerCookie-1.1.3.jar" type="java.util.logging.Logger.info" description="This call to java.util.logging.Logger.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to mx.isban.agave.jedis.JedisService.get, and mx.isban.agave.jedis.JedisService.expire.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="JedisService.java" line="51" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;jedis&#x2f;" scope="mx.isban.agave.jedis.JedisService" functionprototype="java.lang.Long expire&#x28;java.lang.String, int&#x29;" functionrelativelocation="40"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="38" module="AgaveWorkerCookie-1.1.3.jar" type="java.util.logging.Logger.info" description="This call to java.util.logging.Logger.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to mx.isban.agave.jedis.JedisService.get.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="JedisService.java" line="68" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;jedis&#x2f;" scope="mx.isban.agave.jedis.JedisService" functionprototype="java.lang.String get&#x28;java.lang.String&#x29;" functionrelativelocation="16"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="20" module="AgaveWorkerCookie-1.1.3.jar" type="java.util.logging.Logger.info" description="This call to java.util.logging.Logger.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to mx.isban.agave.jedis.JedisService.get.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="JedisService.java" line="87" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;jedis&#x2f;" scope="mx.isban.agave.jedis.JedisService" functionprototype="java.lang.String get&#x28;java.lang.String&#x29;" functionrelativelocation="96"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="5" issueid="34" module="AgaveWorkerCookie-1.1.3.jar&#x2f;cmpLogging-1.1.0.jar" type="org.apache.log4j.Category.log" description="This call to org.apache.log4j.Category.log&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to log&#x28;&#x29; contains tainted data from the variable trama. The tainted data originated from earlier calls to mx.isban.agave.configuracion.ConfiguracionUtil.inicializaClase, mx.isban.agave.configuracion.ConfiguracionUtil.destruyeContextoComponente, mx.isban.agave.logging.utils.VersionadorUtils.versionarComponente, and mx.isban.agave.logging.utils.VersionadorUtils.almacenaVersionEnFilesystem.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Log.java" line="174" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;logging&#x2f;" scope="mx.isban.agave.logging.Log" functionprototype="void mostrarTrama&#x28;java.lang.String, Level&#x29;" functionrelativelocation="84"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="77" module="web-1.0.2.jar&#x2f;IsbSecurityFilter-1.0.1.jar" type="java.util.logging.Logger.log" description="This call to java.util.logging.Logger.log&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to log&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getMethod.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SecOutputFilter.java" line="81" sourcefilepath="mx&#x2f;isban&#x2f;security&#x2f;components&#x2f;" scope="mx.isban.security.components.SecOutputFilter" functionprototype="boolean doBeforeProcessing&#x28;javax.servlet.ServletRequest, javax.servlet.ServletResponse&#x29;" functionrelativelocation="60"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="12" issueid="68" module="cmpInterfacesToken-1.1.0.jar&#x2f;cmpIsbanDataAccess-1.12.0.jar" type="org.apache.log4j.Category.error" description="This call to org.apache.log4j.Category.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error&#x28;&#x29; contains tainted data from the variable errorMsg. The tainted data originated from an earlier call to mx.isban.agave.dataaccess.util.parser.UtilsOut.crearArchivoOut.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UtilsOut.java" line="66" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;util&#x2f;parser&#x2f;" scope="mx.isban.agave.dataaccess.util.parser.UtilsOut" functionprototype="boolean crearArchivoOut&#x28;java.lang.String, java.lang.StringBuilder&#x29;" functionrelativelocation="57"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="12" issueid="51" module="cmpInterfacesToken-1.1.0.jar&#x2f;cmpIsbanDataAccess-1.12.0.jar" type="org.apache.log4j.Category.error" description="This call to org.apache.log4j.Category.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error&#x28;&#x29; contains tainted data from the variable format&#x28;&#x29;. The tainted data originated from an earlier call to mx.isban.agave.dataaccess.util.parser.UtilsOut.crearYEscribirArchivo.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UtilsOut.java" line="173" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;util&#x2f;parser&#x2f;" scope="mx.isban.agave.dataaccess.util.parser.UtilsOut" functionprototype="void crearYEscribirArchivo&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="50"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="12" issueid="62" module="cmpInterfacesToken-1.1.0.jar&#x2f;cmpIsbanDataAccess-1.12.0.jar" type="org.apache.log4j.Category.error" description="This call to org.apache.log4j.Category.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error&#x28;&#x29; contains tainted data from the variable format&#x28;&#x29;. The tainted data originated from an earlier call to mx.isban.agave.dataaccess.util.parser.UtilsOut.crearYEscribirArchivoStd.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UtilsOut.java" line="214" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;util&#x2f;parser&#x2f;" scope="mx.isban.agave.dataaccess.util.parser.UtilsOut" functionprototype="void crearYEscribirArchivoStd&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="51"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="12" issueid="46" module="cmpInterfacesToken-1.1.0.jar&#x2f;cmpIsbanDataAccess-1.12.0.jar" type="org.apache.log4j.Category.error" description="This call to org.apache.log4j.Category.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error&#x28;&#x29; contains tainted data from the variable format&#x28;&#x29;. The tainted data originated from an earlier call to mx.isban.agave.dataaccess.util.parser.UtilsOut.crearYEscribirArchivoStd.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UtilsOut.java" line="229" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;util&#x2f;parser&#x2f;" scope="mx.isban.agave.dataaccess.util.parser.UtilsOut" functionprototype="void crearYEscribirArchivoStd&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="97"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="11" issueid="54" module="cmpInterfacesToken-1.1.0.jar&#x2f;cmpIsbanDataAccess-1.12.0.jar" type="org.apache.log4j.Category.error" description="This call to org.apache.log4j.Category.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error&#x28;&#x29; contains tainted data from the variable format&#x28;&#x29;. The tainted data originated from an earlier call to mx.isban.agave.dataaccess.util.parser.UtilsOut.crearYEscribirArchivoStd.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UtilsOut.java" line="229" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;util&#x2f;parser&#x2f;" scope="mx.isban.agave.dataaccess.util.parser.UtilsOut" functionprototype="void crearYEscribirArchivoStd&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="38"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="10" issueid="56" module="cmpInterfacesToken-1.1.0.jar&#x2f;cmpIsbanDataAccess-1.12.0.jar" type="org.apache.log4j.Category.error" description="This call to org.apache.log4j.Category.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error&#x28;&#x29; contains tainted data from the variable format&#x28;&#x29;. The tainted data originated from an earlier call to mx.isban.agave.dataaccess.util.parser.UtilsOut.crearYEscribirArchivoStd.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UtilsOut.java" line="229" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;util&#x2f;parser&#x2f;" scope="mx.isban.agave.dataaccess.util.parser.UtilsOut" functionprototype="void crearYEscribirArchivoStd&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="73"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="12" issueid="53" module="cmpInterfacesToken-1.1.0.jar&#x2f;cmpIsbanDataAccess-1.12.0.jar" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to mx.isban.agave.dataaccess.util.parser.XMLValidator.validarXML.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="XMLValidator.java" line="58" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;util&#x2f;parser&#x2f;" scope="mx.isban.agave.dataaccess.util.parser.XMLValidator" functionprototype="void validarXML&#x28;java.lang.String, java.lang.String, TipoEsquemaXSDEnum&#x29;" functionrelativelocation="9"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="12" issueid="69" module="cmpInterfacesToken-1.1.0.jar&#x2f;cmpIsbanDataAccess-1.12.0.jar" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data from the variable format&#x28;&#x29;. The tainted data originated from an earlier call to mx.isban.agave.dataaccess.util.parser.XMLValidator.validarXML.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="XMLValidator.java" line="77" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;util&#x2f;parser&#x2f;" scope="mx.isban.agave.dataaccess.util.parser.XMLValidator" functionprototype="void validarXML&#x28;java.lang.String, java.lang.String, TipoEsquemaXSDEnum&#x29;" functionrelativelocation="39"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="12" issueid="70" module="cmpInterfacesToken-1.1.0.jar&#x2f;cmpIsbanDataAccess-1.12.0.jar" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data from the variable format&#x28;&#x29;. The tainted data originated from an earlier call to mx.isban.agave.dataaccess.util.parser.XMLValidator.validarXML.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="XMLValidator.java" line="79" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;util&#x2f;parser&#x2f;" scope="mx.isban.agave.dataaccess.util.parser.XMLValidator" functionprototype="void validarXML&#x28;java.lang.String, java.lang.String, TipoEsquemaXSDEnum&#x29;" functionrelativelocation="43"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="12" issueid="44" module="cmpInterfacesToken-1.1.0.jar&#x2f;cmpIsbanDataAccess-1.12.0.jar" type="org.apache.log4j.Category.error" description="This call to org.apache.log4j.Category.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error&#x28;&#x29; contains tainted data from the variable format&#x28;&#x29;. The tainted data originated from an earlier call to mx.isban.agave.dataaccess.util.parser.XMLValidator.validarXML.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="XMLValidator.java" line="99" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;util&#x2f;parser&#x2f;" scope="mx.isban.agave.dataaccess.util.parser.XMLValidator" functionprototype="void validarXML&#x28;java.lang.String, java.lang.String, TipoEsquemaXSDEnum&#x29;" functionrelativelocation="91"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="11" issueid="50" module="cmpInterfacesToken-1.1.0.jar&#x2f;cmpIsbanDataAccess-1.12.0.jar" type="org.apache.log4j.Category.error" description="This call to org.apache.log4j.Category.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error&#x28;&#x29; contains tainted data from the variable format&#x28;&#x29;. The tainted data originated from an earlier call to mx.isban.agave.dataaccess.util.parser.XMLValidator.validarXML.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="XMLValidator.java" line="99" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;util&#x2f;parser&#x2f;" scope="mx.isban.agave.dataaccess.util.parser.XMLValidator" functionprototype="void validarXML&#x28;java.lang.String, java.lang.String, TipoEsquemaXSDEnum&#x29;" functionrelativelocation="57"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="12" issueid="65" module="cmpInterfacesToken-1.1.0.jar&#x2f;cmpIsbanDataAccess-1.12.0.jar" type="org.apache.log4j.Category.error" description="This call to org.apache.log4j.Category.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error&#x28;&#x29; contains tainted data from the variable format&#x28;&#x29;. The tainted data originated from an earlier call to mx.isban.agave.dataaccess.util.parser.XMLValidator.validarXML.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="XMLValidator.java" line="106" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;util&#x2f;parser&#x2f;" scope="mx.isban.agave.dataaccess.util.parser.XMLValidator" functionprototype="void validarXML&#x28;java.lang.String, java.lang.String, TipoEsquemaXSDEnum&#x29;" functionrelativelocation="65"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="11" issueid="67" module="cmpInterfacesToken-1.1.0.jar&#x2f;cmpIsbanDataAccess-1.12.0.jar" type="org.apache.log4j.Category.error" description="This call to org.apache.log4j.Category.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error&#x28;&#x29; contains tainted data from the variable format&#x28;&#x29;. The tainted data originated from an earlier call to mx.isban.agave.dataaccess.util.parser.XMLValidator.validarXML.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="npp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="XMLValidator.java" line="106" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;util&#x2f;parser&#x2f;" scope="mx.isban.agave.dataaccess.util.parser.XMLValidator" functionprototype="void validarXML&#x28;java.lang.String, java.lang.String, TipoEsquemaXSDEnum&#x29;" functionrelativelocation="98"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="10" categoryname="Credentials Management" pcirelated="true">
         <desc>
            <para text="Improper management of credentials, such as usernames and passwords, may compromise system security.  In particular, storing passwords in plaintext or hard-coding passwords directly into application code are design issues that cannot be easily remedied.  Not only does embedding a password allow all of the project&#x27;s developers to view the password, it also makes fixing the problem extremely difficult.  Once the code is in production, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack, putting customers at risk."/>
            <para text="One variation on hard-coding plaintext passwords is to hard-code a constant string which is the result of a cryptographic one-way hash.  For example, instead of storing the word &#x22;secret,&#x22; the application stores an MD5 hash of the word.  This is a common mechanism for obscuring hard-coded passwords from casual viewing but does not significantly reduce risk.  However, using cryptographic hashes for data stored outside the application code can be an effective practice."/>
         </desc>
         <recommendations>
            <para text="Avoid storing passwords in easily accessible locations, and never store any type of sensitive data in plaintext.  Avoid using hard-coded usernames, passwords, or hash constants whenever possible, particularly in relation to security-critical components.   Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in alternate locations such as configuration or properties files."/>
         </recommendations>
         <cwe cweid="259" cwename="Use of Hard-coded Password" pcirelated="true" owasp="1028" sans="798" certjava="1152">
            <description>
               <text text="A method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="127" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="SBP_SECURITY_DB_PASS initializer" description="This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack. In some cases, this finding may indicate a reference to a password &#x28;e.g. the name of a key in a properties file&#x29; rather than an actual password. SBP_SECURITY_DB_PASS initializer&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AppProperties.java" line="1" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;rest&#x2f;" scope="UNKNOWN" functionprototype="UNKNOWN" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="141" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="SBP_DIRECTOR_DB_PASS initializer" description="This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack. In some cases, this finding may indicate a reference to a password &#x28;e.g. the name of a key in a properties file&#x29; rather than an actual password. SBP_DIRECTOR_DB_PASS initializer&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AppProperties.java" line="1" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;rest&#x2f;" scope="UNKNOWN" functionprototype="UNKNOWN" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="40" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;AgaveWorkerCookie-1.1.3.jar" type="hardcodepasswdset" description="This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack. In some cases, this finding may indicate a reference to a password &#x28;e.g. the name of a key in a properties file&#x29; rather than an actual password. hardcodepasswdset&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="JedisFactory.java" line="59" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;jedis&#x2f;" scope="mx.isban.agave.jedis.JedisFactory" functionprototype="void &#x3c;clinit&#x3e;&#x28;void&#x29;" functionrelativelocation="87"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="2" issueid="123" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="SBP_SECURITY_SETPASS initializer" description="This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack. In some cases, this finding may indicate a reference to a password &#x28;e.g. the name of a key in a properties file&#x29; rather than an actual password. SBP_SECURITY_SETPASS initializer&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SbpRestController.java" line="1" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;rest&#x2f;" scope="UNKNOWN" functionprototype="UNKNOWN" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="121" module="CmpEncryptedFile.jar" type="PASSWORD initializer" description="This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack. In some cases, this finding may indicate a reference to a password &#x28;e.g. the name of a key in a properties file&#x29; rather than an actual password. PASSWORD initializer&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Constant.java" line="1" sourcefilepath="com&#x2f;mx&#x2f;isban&#x2f;encrypt&#x2f;constant&#x2f;" scope="UNKNOWN" functionprototype="UNKNOWN" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="2" issueid="19" module="IdcCore-G2.jar" type="COMP1_PASSWORD initializer" description="This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack. In some cases, this finding may indicate a reference to a password &#x28;e.g. the name of a key in a properties file&#x29; rather than an actual password. COMP1_PASSWORD initializer&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="IsbProvider.java" line="1" sourcefilepath="mx&#x2f;isban&#x2f;idc&#x2f;core&#x2f;appserver&#x2f;" scope="UNKNOWN" functionprototype="UNKNOWN" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="2" issueid="14" module="IdcCore-G2.jar" type="COMP1_PASSWORD_FILE initializer" description="This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack. In some cases, this finding may indicate a reference to a password &#x28;e.g. the name of a key in a properties file&#x29; rather than an actual password. COMP1_PASSWORD_FILE initializer&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="IsbProvider.java" line="1" sourcefilepath="mx&#x2f;isban&#x2f;idc&#x2f;core&#x2f;appserver&#x2f;" scope="UNKNOWN" functionprototype="UNKNOWN" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="17" module="IdcCore-G2.jar" type="java.security.KeyStore&#x24;PasswordProtection" description="This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack. In some cases, this finding may indicate a reference to a password &#x28;e.g. the name of a key in a properties file&#x29; rather than an actual password. java.security.KeyStore&#x24;PasswordProtection&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TU1.java" line="33" sourcefilepath="mx&#x2f;isban&#x2f;idc&#x2f;provider&#x2f;" scope="mx.isban.idc.provider.TU1" functionprototype="void main&#x28;java.lang.String  &#x5b;&#x5d;&#x29;" functionrelativelocation="35"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="16" module="IdcCore-G2.jar" type="java.security.KeyStore.getKey" description="This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack. In some cases, this finding may indicate a reference to a password &#x28;e.g. the name of a key in a properties file&#x29; rather than an actual password. java.security.KeyStore.getKey&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TU1.java" line="36" sourcefilepath="mx&#x2f;isban&#x2f;idc&#x2f;provider&#x2f;" scope="mx.isban.idc.provider.TU1" functionprototype="void main&#x28;java.lang.String  &#x5b;&#x5d;&#x29;" functionrelativelocation="50"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="11" module="IdcCore-G2.jar" type="java.security.KeyStore.store" description="This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack. In some cases, this finding may indicate a reference to a password &#x28;e.g. the name of a key in a properties file&#x29; rather than an actual password. java.security.KeyStore.store&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TU1.java" line="38" sourcefilepath="mx&#x2f;isban&#x2f;idc&#x2f;provider&#x2f;" scope="mx.isban.idc.provider.TU1" functionprototype="void main&#x28;java.lang.String  &#x5b;&#x5d;&#x29;" functionrelativelocation="64"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="13" module="IdcCore-G2.jar" type="java.security.KeyStore.load" description="This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack. In some cases, this finding may indicate a reference to a password &#x28;e.g. the name of a key in a properties file&#x29; rather than an actual password. java.security.KeyStore.load&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TU1.java" line="44" sourcefilepath="mx&#x2f;isban&#x2f;idc&#x2f;provider&#x2f;" scope="mx.isban.idc.provider.TU1" functionprototype="void main&#x28;java.lang.String  &#x5b;&#x5d;&#x29;" functionrelativelocation="86"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="18" module="IdcCore-G2.jar" type="java.security.KeyStore.getKey" description="This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack. In some cases, this finding may indicate a reference to a password &#x28;e.g. the name of a key in a properties file&#x29; rather than an actual password. java.security.KeyStore.getKey&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="TU1.java" line="45" sourcefilepath="mx&#x2f;isban&#x2f;idc&#x2f;provider&#x2f;" scope="mx.isban.idc.provider.TU1" functionprototype="void main&#x28;java.lang.String  &#x5b;&#x5d;&#x29;" functionrelativelocation="97"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="20" categoryname="Cross-Site Scripting &#x28;XSS&#x29;" pcirelated="true">
         <desc>
            <para text="Cross-site scripting &#x28;XSS&#x29; attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed occur whenever a web application uses untrusted data in the output it generates without validating or encoding it.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise sensitive information, with new attack vectors being discovered on a regular basis.  XSS is also commonly referred to as HTML injection."/>
            <para text="XSS vulnerabilities can be either persistent or transient &#x28;often referred to as stored and reflected, respectively&#x29;.  In a persistent XSS vulnerability, the injected code is stored by the application, for example within a blog comment or message board.  The attack occurs whenever a victim views the page containing the malicious script.  In a transient XSS vulnerability, the injected code is included directly in the HTTP request.  These attacks are often carried out via malicious URLs sent via email or another website and requires the victim to browse to that link.  The consequence of an XSS attack to a victim is the same regardless of whether it is persistent or transient&#x3b; however, persistent XSS vulnerabilities are likely to affect a greater number of victims due to its delivery mechanism."/>
         </desc>
         <recommendations>
            <para text="Several techniques can be used to prevent XSS attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a XSS vulnerability.">
               <bulletitem text="Use output filtering to sanitize all output generated from user-supplied input, selecting the appropriate method of encoding based on the use case of the untrusted data.  For example, if the data is being written to the body of an HTML page, use HTML entity encoding.  However, if the data is being used to construct generated Javascript or if it is consumed by client-side methods that may interpret it as code &#x28;a common technique in Web 2.0 applications&#x29;, additional restrictions may be necessary beyond simple HTML encoding."/>
               <bulletitem text="Validate user-supplied input using positive filters &#x28;white lists&#x29; to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
               <bulletitem text="Do not permit users to include HTML content in posts, notes, or other data that will be displayed by the application.  If users are permitted to include HTML tags, then carefully limit access to specific elements or attributes, and use strict validation filters to prevent abuse."/>
            </para>
         </recommendations>
         <cwe cweid="80" cwename="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" pcirelated="true" owasp="1033" sans="79">
            <description>
               <text text="This call contains a cross-site scripting &#x28;XSS&#x29; flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="237" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_scrollbar.jsp" line="1" sourcefilepath="&#x2f;WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fscrollbar_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="18"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="239" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_scrollbar.jsp" line="1" sourcefilepath="&#x2f;WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fscrollbar_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="15"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="441" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_scrollbar.jsp" line="2" sourcefilepath="&#x2f;WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fscrollbar_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="27"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="445" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_scrollbar.jsp" line="2" sourcefilepath="&#x2f;WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fscrollbar_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="23"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="333" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_scrollbar.jsp" line="3" sourcefilepath="&#x2f;WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fscrollbar_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="31"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="334" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_scrollbar.jsp" line="3" sourcefilepath="&#x2f;WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fscrollbar_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="35"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="352" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_scrollbar.jsp" line="4" sourcefilepath="&#x2f;WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fscrollbar_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="43"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="353" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_scrollbar.jsp" line="4" sourcefilepath="&#x2f;WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fscrollbar_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="40"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="407" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_scrollbar.jsp" line="5" sourcefilepath="&#x2f;WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fscrollbar_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="48"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="409" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_scrollbar.jsp" line="5" sourcefilepath="&#x2f;WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fscrollbar_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="51"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="258" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_scrollbar.jsp" line="9" sourcefilepath="&#x2f;WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fscrollbar_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="56"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="259" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_scrollbar.jsp" line="9" sourcefilepath="&#x2f;WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fscrollbar_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="60"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="420" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_scrollbar.jsp" line="10" sourcefilepath="&#x2f;WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fscrollbar_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="74"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="422" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_scrollbar.jsp" line="10" sourcefilepath="&#x2f;WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fscrollbar_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="77"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="223" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_stepStart.jsp" line="5" sourcefilepath="&#x2f;WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;patron&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.patron.vsf_005fstepStart_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="52"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="226" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_stepStart.jsp" line="5" sourcefilepath="&#x2f;WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;patron&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.patron.vsf_005fstepStart_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="39"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="229" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_stepStart.jsp" line="5" sourcefilepath="&#x2f;WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;patron&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.patron.vsf_005fstepStart_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="27"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="247" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_stepStart.jsp" line="5" sourcefilepath="&#x2f;WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;patron&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.patron.vsf_005fstepStart_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="65"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="273" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorContratos.jsp" line="68" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorContratos_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="72"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="252" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorContratos.jsp" line="70" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorContratos_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="75"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="457" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="69" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="50"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="296" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="71" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="51"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="297" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="71" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="50"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="436" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="72" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="52"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="454" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="72" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="53"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="447" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="73" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="54"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="450" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="73" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="54"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="228" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="74" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="56"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="225" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="74" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="55"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="356" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="75" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="58"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="358" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="75" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="57"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="219" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="76" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="59"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="222" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="76" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="59"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="417" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="77" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="60"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="349" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="78" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="62"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="351" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="78" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="61"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="338" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="81" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="63"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="300" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="82" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="64"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="260" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="83" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="64"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="249" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="120" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="69"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="346" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="120" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="68"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="276" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="123" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="70"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="275" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="123" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="71"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="382" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="137" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="74"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="383" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="137" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="73"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="232" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="160" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="78"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="325" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="161" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="78"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="365" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="177" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="80"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="281" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="182" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="82"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="363" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="194" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="87"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="331" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="208" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="90"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="290" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="215" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="91"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="404" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="218" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="92"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="248" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="223" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="94"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="402" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentas.jsp" line="255" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentas_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="95"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="304" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="69" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="49"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="439" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="71" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="50"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="448" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="71" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="51"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="221" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="72" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="51"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="224" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="72" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="52"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="242" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="73" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="54"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="244" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="73" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="53"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="342" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="74" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="56"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="345" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="74" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="55"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="294" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="75" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="56"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="291" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="75" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="57"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="292" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="76" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="59"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="307" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="76" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="58"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="289" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="77" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="60"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="408" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="78" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="61"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="410" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="78" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="62"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="396" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="79" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="62"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="418" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="79" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="63"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="416" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="81" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="64"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="444" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="82" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="65"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="431" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="83" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="66"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="319" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="126" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="70"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="287" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="126" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="69"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="347" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="129" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="72"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="348" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="129" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="72"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="452" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="132" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="73"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="405" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="133" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="74"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="453" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="149" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="76"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="456" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="149" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="77"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="398" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="175" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="81"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="401" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="180" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="83"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="406" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="192" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="87"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="455" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="206" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="90"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="394" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="213" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="92"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="412" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="216" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="93"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="238" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="buscadorCuentasMaster.jsp" line="221" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;buscadores&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.buscadores.buscadorCuentasMaster_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="95"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="423" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="myMenu.jsp" line="13" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.myMenu_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="52"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="424" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="myMenu.jsp" line="13" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.myMenu_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="48"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="335" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="myMenu.jsp" line="14" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.myMenu_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="56"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="337" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="myMenu.jsp" line="14" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.myMenu_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="61"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="425" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="myMenu.jsp" line="14" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.myMenu_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="78"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="220" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_confirming_cbopaises.jsp" line="17" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fconfirming_005fcbopaises_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="53"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="250" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_confirming_cbopaises.jsp" line="18" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fconfirming_005fcbopaises_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="60"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="251" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_confirming_cbopaises.jsp" line="18" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fconfirming_005fcbopaises_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="67"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="256" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_confirming_combo.jsp" line="17" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fconfirming_005fcombo_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="53"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="434" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_confirming_combo.jsp" line="18" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fconfirming_005fcombo_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="60"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="437" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_confirming_combo.jsp" line="18" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fconfirming_005fcombo_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="67"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="433" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_alertbtn.jsp" line="8" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005fgral_005falertbtn_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f0&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="56"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="305" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_alertbtn.jsp" line="11" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005fgral_005falertbtn_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f1&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="56"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="268" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_alertbtn.jsp" line="15" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005fgral_005falertbtn_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="45"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="354" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_alertbtn.jsp" line="21" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005fgral_005falertbtn_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f2&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="78"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="277" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_alertbtn.jsp" line="21" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005fgral_005falertbtn_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f2&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="44"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="279" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_alertbtn.jsp" line="21" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005fgral_005falertbtn_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f2&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="34"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="282" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_alertbtn.jsp" line="21" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005fgral_005falertbtn_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f2&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="65"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="284" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_alertbtn.jsp" line="21" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005fgral_005falertbtn_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f2&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="54"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="379" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_alertbtn.jsp" line="24" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005fgral_005falertbtn_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f3&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="80"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="360" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_alertbtn.jsp" line="24" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005fgral_005falertbtn_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f3&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="30"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="364" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_alertbtn.jsp" line="24" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005fgral_005falertbtn_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f3&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="42"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="366" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_alertbtn.jsp" line="24" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005fgral_005falertbtn_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f3&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="51"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="367" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_alertbtn.jsp" line="24" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005fgral_005falertbtn_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f3&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="60"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="369" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_alertbtn.jsp" line="24" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005fgral_005falertbtn_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f3&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="69"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="295" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_checkbox.jsp" line="8" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fcheckbox_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="45"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="298" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_checkbox.jsp" line="8" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fcheckbox_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="27"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="299" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_checkbox.jsp" line="8" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fcheckbox_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="36"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="255" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_checkbox.jsp" line="9" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fcheckbox_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="53"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="267" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_checkbox.jsp" line="9" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fcheckbox_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="64"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="355" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_combo.jsp" line="17" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fcombo_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="53"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="217" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_combo.jsp" line="18" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fcombo_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="60"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="218" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_combo.jsp" line="18" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fcombo_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="67"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="274" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_combo.jsp" line="23" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fcombo_jsp" functionprototype="boolean _jspx_meth_c_005fforEach_005f0&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="56"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="397" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_fileinput.jsp" line="8" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005ffileinput_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="28"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="388" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_fileinput.jsp" line="9" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005ffileinput_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="37"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="322" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_fileinput.jsp" line="10" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005ffileinput_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="46"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="324" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_fileinput.jsp" line="10" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005ffileinput_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="54"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="336" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_fileinput.jsp" line="14" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005ffileinput_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="63"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="385" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_inlineSub.jsp" line="8" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005finlineSub_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="27"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="234" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_inlineSub.jsp" line="9" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005finlineSub_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="47"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="236" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_inlineSub.jsp" line="9" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005finlineSub_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="36"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="393" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_inlineSub.jsp" line="14" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005finlineSub_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="55"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="230" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_inlineSub.jsp" line="15" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005finlineSub_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="64"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="376" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_link.jsp" line="9" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005flink_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="38"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="286" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_link.jsp" line="15" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005flink_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f0&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="52"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="370" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_link.jsp" line="16" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005flink_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f0&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="67"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="372" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_radiobutton.jsp" line="7" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fradiobutton_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="22"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="233" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_radiobutton.jsp" line="8" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fradiobutton_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="58"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="312" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_radiobutton.jsp" line="8" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fradiobutton_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="49"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="315" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_radiobutton.jsp" line="8" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fradiobutton_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="35"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="316" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_radiobutton.jsp" line="8" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fradiobutton_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="42"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="235" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_radiobutton.jsp" line="8" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fradiobutton_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="65"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="318" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_radiobutton.jsp" line="8" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fradiobutton_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="28"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="361" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_radiobutton.jsp" line="10" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fradiobutton_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="71"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="285" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_subtitleBlack.jsp" line="10" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fsubtitleBlack_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="38"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="264" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_subtitleBlack.jsp" line="16" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fsubtitleBlack_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f0&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="52"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="344" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_gral_subtitleBlack.jsp" line="17" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;controles&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.controles.vsf_005fgral_005fsubtitleBlack_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f0&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="67"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="415" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_alert2btn.jsp" line="10" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005falert2btn_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="22"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="350" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_alert2btn.jsp" line="15" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005falert2btn_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="51"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="429" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_alert2btn.jsp" line="15" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005falert2btn_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="42"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="438" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_alert2btn.jsp" line="15" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005falert2btn_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="35"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="440" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_alert2btn.jsp" line="15" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005falert2btn_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="28"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="387" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_alert2btn.jsp" line="18" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005falert2btn_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="65"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="389" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_alert2btn.jsp" line="18" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005falert2btn_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="58"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="392" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_alert2btn.jsp" line="18" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005falert2btn_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="71"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="317" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footer.jsp" line="9" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooter_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="27"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="430" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footer.jsp" line="18" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooter_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="64"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="451" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footer.jsp" line="18" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooter_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="53"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="446" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footer.jsp" line="18" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooter_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="36"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="449" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footer.jsp" line="18" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooter_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="45"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="231" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footerPaso2.jsp" line="20" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooterPaso2_jsp" functionprototype="boolean _jspx_meth_c_005fwhen_005f0&#x28;javax.servlet.jsp.tagext.JspTag, javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="52"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="261" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footerPaso2.jsp" line="20" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooterPaso2_jsp" functionprototype="boolean _jspx_meth_c_005fwhen_005f0&#x28;javax.servlet.jsp.tagext.JspTag, javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="42"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="254" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footerPaso2.jsp" line="21" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooterPaso2_jsp" functionprototype="boolean _jspx_meth_c_005fwhen_005f0&#x28;javax.servlet.jsp.tagext.JspTag, javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="64"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="257" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footerPaso2.jsp" line="21" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooterPaso2_jsp" functionprototype="boolean _jspx_meth_c_005fwhen_005f0&#x28;javax.servlet.jsp.tagext.JspTag, javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="75"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="306" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footerPaso2.jsp" line="24" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooterPaso2_jsp" functionprototype="boolean _jspx_meth_c_005fotherwise_005f0&#x28;javax.servlet.jsp.tagext.JspTag, javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="46"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="302" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footerPaso2.jsp" line="24" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooterPaso2_jsp" functionprototype="boolean _jspx_meth_c_005fotherwise_005f0&#x28;javax.servlet.jsp.tagext.JspTag, javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="63"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="262" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footerPaso2.jsp" line="27" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooterPaso2_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="16"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="265" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footerPaso2.jsp" line="27" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooterPaso2_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="20"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="270" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footerPaso2.jsp" line="30" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooterPaso2_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f0&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="63"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="321" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footerPaso2.jsp" line="33" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooterPaso2_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f1&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="63"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="428" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footerPaso2.jsp" line="35" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooterPaso2_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="30"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="341" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footerPaso2.jsp" line="58" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooterPaso2_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="37"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="368" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footerPaso2.jsp" line="63" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooterPaso2_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="41"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="357" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footerPaso2.jsp" line="65" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooterPaso2_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="45"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="359" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footerPaso2.jsp" line="65" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooterPaso2_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="49"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="411" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footerPaso2.jsp" line="65" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooterPaso2_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="57"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="413" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footerPaso2.jsp" line="65" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooterPaso2_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="62"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="414" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footerPaso2.jsp" line="65" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooterPaso2_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="53"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="378" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footerPaso2.jsp" line="68" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooterPaso2_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="74"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="381" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footerPaso2.jsp" line="68" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooterPaso2_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="78"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="386" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footerPaso2.jsp" line="68" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooterPaso2_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="66"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="377" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footerPaso2.jsp" line="68" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooterPaso2_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="70"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="384" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_footerPaso2.jsp" line="68" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005ffooterPaso2_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="83"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="293" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.taglibs.standard.tag.rt.core.OutTag.setValue" description="This call to org.apache.taglibs.standard.tag.rt.core.OutTag.setValue&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to setValue&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_header.jsp" line="19" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005fheader_jsp" functionprototype="boolean _jspx_meth_c_005fout_005f0&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="50"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="240" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_header.jsp" line="19" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005fheader_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="38"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="390" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_header.jsp" line="34" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005fheader_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f5&#x28;javax.servlet.jsp.tagext.JspTag, javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="63"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="391" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_header.jsp" line="45" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005fheader_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f7&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="62"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="362" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_header.jsp" line="51" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005fheader_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f9&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="62"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="313" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_header_buscador.jsp" line="15" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005fheader_005fbuscador_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="32"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="301" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.taglibs.standard.tag.rt.core.OutTag.setValue" description="This call to org.apache.taglibs.standard.tag.rt.core.OutTag.setValue&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to setValue&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_header_buscador.jsp" line="15" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005fheader_005fbuscador_jsp" functionprototype="boolean _jspx_meth_c_005fout_005f0&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="50"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="271" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_header_buscador.jsp" line="25" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005fheader_005fbuscador_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f1&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="62"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="329" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_headerauxiliar.jsp" line="10" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005fheaderauxiliar_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="42"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="328" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_headerauxiliar.jsp" line="10" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005fheaderauxiliar_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="34"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="311" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.taglibs.standard.tag.rt.core.OutTag.setValue" description="This call to org.apache.taglibs.standard.tag.rt.core.OutTag.setValue&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to setValue&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_headerauxiliar.jsp" line="14" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005fheaderauxiliar_jsp" functionprototype="boolean _jspx_meth_c_005fout_005f0&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="50"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="320" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_headerauxiliar.jsp" line="14" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005fheaderauxiliar_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="47"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="283" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_headerauxiliar.jsp" line="15" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005fheaderauxiliar_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="53"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="442" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.taglibs.standard.tag.rt.core.OutTag.setValue" description="This call to org.apache.taglibs.standard.tag.rt.core.OutTag.setValue&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to setValue&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_headerauxiliar.jsp" line="15" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005fheaderauxiliar_jsp" functionprototype="boolean _jspx_meth_c_005fout_005f1&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="50"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="263" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_headerauxiliar.jsp" line="20" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005fheaderauxiliar_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f0&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="40"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="227" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_headerauxiliar.jsp" line="21" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005fheaderauxiliar_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f0&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="52"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="272" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_headerauxiliar.jsp" line="22" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005fheaderauxiliar_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f0&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="64"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="399" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_headerauxiliar.jsp" line="26" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005fheaderauxiliar_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f1&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="45"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="330" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_headerauxiliar.jsp" line="27" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005fheaderauxiliar_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f1&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="59"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="421" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_redalert.jsp" line="10" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005fredalert_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="35"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="435" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_redalert.jsp" line="12" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005fredalert_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f0&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="61"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="343" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_redalert.jsp" line="15" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005fredalert_jsp" functionprototype="boolean _jspx_meth_c_005fif_005f1&#x28;javax.servlet.jsp.PageContext&#x29;" functionrelativelocation="61"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="327" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable _jspx_page_context.getRequest&#x28;&#x29;.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="vsf_operativa_redalertdat.jsp" line="10" sourcefilepath="WEB-INF&#x2f;jsp&#x2f;private&#x2f;vsfGenerales&#x2f;estructura&#x2f;" scope="com.veracode.compiledjsp.xMicroSitioBETEARWebear.xMicroSitioBETWeb10war.WEB_002dINF.jsp.private_.vsfGenerales.estructura.vsf_005foperativa_005fredalertdat_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="43"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="12" categoryname="Cryptographic Issues" pcirelated="true">
         <desc>
            <para text="Applications commonly use cryptography to implement authentication mechanisms and to ensure the confidentiality and integrity of sensitive data, both in transit and at rest.  The proper and accurate implementation of cryptography is extremely critical to its efficacy.  Configuration or coding mistakes as well as incorrect assumptions may negate a large degree of the protection it affords, leaving the crypto implementation vulnerable to attack."/>
            <para text="Common cryptographic mistakes include, but are not limited to, selecting weak keys or weak cipher modes, unintentionally exposing sensitive cryptographic data, using predictable entropy sources, and mismanaging or hard-coding keys.  "/>
            <para text="Developers often make the dangerous assumption that they can improve security by designing their own cryptographic algorithm&#x3b; however, one of the basic tenets of cryptography is that any cipher whose effectiveness is reliant on the secrecy of the algorithm is fundamentally flawed.  "/>
         </desc>
         <recommendations>
            <para text="Select the appropriate type of cryptography for the intended purpose.  Avoid proprietary encryption algorithms as they typically rely on &#x22;security through obscurity&#x22; rather than sound mathematics.  Select key sizes appropriate for the data being protected&#x3b; for high assurance applications, 256-bit symmetric keys and 2048-bit asymmetric keys are sufficient.  Follow best practices for key storage, and ensure that plaintext data and key material are not inadvertently exposed."/>
         </recommendations>
         <cwe cweid="331" cwename="Insufficient Entropy" pcirelated="false" sans="327" certc="1170">
            <description>
               <text text="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand&#x28;&#x29;."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="403" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="org.apache.commons.lang.RandomStringUtils.random" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;331.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ExceptionHandlerController.java" line="51" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;errors&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.errors.controller.ExceptionHandlerController" functionprototype="java.lang.String generateRandom&#x28;&#x29;" functionrelativelocation="93"/>
               <flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="21" module="MicroSitioBETEAREJB.ear&#x2f;cmpCommonsGlobal-1.1.0.jar" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;331.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Utils.java" line="605" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;commons&#x2f;utils&#x2f;" scope="mx.isban.agave.commons.utils.Utils" functionprototype="java.lang.String getMsgId&#x28;void&#x29;" functionrelativelocation="18"/>
            </staticflaws>
         </cwe>
         <cwe cweid="321" cwename="Use of Hard-coded Cryptographic Key" pcirelated="true" owasp="1028" sans="798">
            <description>
               <text text="A method uses a hard-coded cryptographic key that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded key significantly increases the possibility that encrypted data may be recovered.  Moreover, the key cannot be changed without patching the software.  If a hard-coded key is compromised in a commercial product, all deployed instances may be vulnerable to attack."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Use of Hard-coded Cryptographic Key" count="1" issueid="166" module="MicroSitioBETEAREJB.ear&#x2f;MicroSitioBETEJB-1.0.jar" type="javax.crypto.spec.SecretKeySpec.&#x21;operator_javanewinit" description="The javax.crypto.spec.SecretKeySpec.&#x21;operator_javanewinit&#x28;&#x29; method uses a hard-coded cryptographic key that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded key significantly increases the possibility that encrypted data may be recovered. Moreover, the key cannot be changed without patching the software. If a hard-coded key is compromised, deployed instances of the product may be vulnerable to attack. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains hard-coded data from the variable cveSecret.&#xd;&#xa;&#xd;&#xa;Store encryption keys out-of-band from the application code. Follow best practices for protecting keys stored in locations such as configuration or properties files.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;321.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="321" remediationeffort="4" exploitLevel="1" categoryid="12" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AesCryptoService.java" line="127" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;utils&#x2f;" scope="mx.isban.bet.micrositio.utils.AesCryptoService" functionprototype="java.lang.String aesEncrypt&#x28;java.lang.String&#x29;" functionrelativelocation="22"/>
            </staticflaws>
         </cwe>
         <cwe cweid="327" cwename="Use of a Broken or Risky Cryptographic Algorithm" pcirelated="true" owasp="1029" sans="866" certc="1170" certcpp="883" certjava="1152">
            <description>
               <text text="The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in the disclosure of sensitive information."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Use of a Broken or Risky Cryptographic Algorithm" count="1" issueid="189" module="MicroSitioBETEAREJB.ear&#x2f;MicroSitioBETEJB-1.0.jar" type="java.security.Signature.getInstance" description="This function uses the java.lang.String&#x28;&#x29; function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5.&#xd;&#xa;&#xd;&#xa;Consider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;327.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="327" remediationeffort="1" exploitLevel="1" categoryid="12" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DAOValidaFirmaToken.java" line="80" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;transversales&#x2f;dao&#x2f;impl&#x2f;" scope="mx.isban.bet.micrositio.transversales.dao.impl.DAOValidaFirmaToken" functionprototype="boolean validaFirma&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="61"/>
               <flaw severity="3" categoryname="Use of a Broken or Risky Cryptographic Algorithm" count="1" issueid="171" module="MicroSitioBETEAREJB.ear&#x2f;MicroSitioBETEJB-1.0.jar" type="java.security.Signature.getInstance" description="This function uses the java.lang.String&#x28;&#x29; function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5.&#xd;&#xa;&#xd;&#xa;Consider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;327.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="327" remediationeffort="1" exploitLevel="1" categoryid="12" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UtilGeneraToken.java" line="109" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;transversales&#x2f;dao&#x2f;impl&#x2f;" scope="mx.isban.bet.micrositio.transversales.dao.impl.UtilGeneraToken" functionprototype="java.lang.String generateToken&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="69"/>
               <flaw severity="3" categoryname="Use of a Broken or Risky Cryptographic Algorithm" count="1" issueid="122" module="CmpEncryptedFile.jar" type="java.security.Signature.getInstance" description="This cryptographic object is initialized with the cipher spec &#x27;SHA1withRSA&#x27;, which uses a known risky cryptographic algorithm. While it was once considered a strong algorithm, it is now regarded as insufficient in light of computational advances.&#xd;&#xa;&#xd;&#xa;Use a stronger cryptographic algorithm. Consult the cryptographic literature to determine which mode is appropriate for your use case. For example, AES is a good replacement for DES.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;327.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="327" remediationeffort="1" exploitLevel="1" categoryid="12" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CipherUtil.java" line="161" sourcefilepath="com&#x2f;mx&#x2f;isban&#x2f;encrypt&#x2f;util&#x2f;" scope="com.mx.isban.encrypt.util.CipherUtil" functionprototype="boolean signFile&#x28;java.security.PrivateKey, byte  &#x5b;&#x5d;, java.lang.String&#x29;" functionrelativelocation="18"/>
               <flaw severity="3" categoryname="Use of a Broken or Risky Cryptographic Algorithm" count="2" issueid="5" module="IsbSecuritySSOFilter-1.0.6.jar" type="java.security.MessageDigest.getInstance" description="This function uses the SHA-1&#x28;&#x29; function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5.&#xd;&#xa;&#xd;&#xa;Consider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;327.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="327" remediationeffort="1" exploitLevel="1" categoryid="12" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="IsbSecurityFilter.java" line="96" sourcefilepath="mx&#x2f;isban&#x2f;security&#x2f;filterng&#x2f;" scope="mx.isban.security.filterng.IsbSecurityFilter" functionprototype="void doFilter&#x28;javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain&#x29;" functionrelativelocation="17"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="1" categoryname="Directory Traversal" pcirelated="false">
         <desc>
            <para text="Allowing user input to control paths used in filesystem operations may enable an attacker to access or modify otherwise protected system resources that would normally be inaccessible to end users.  In some cases, the user-provided input may be passed directly to the filesystem operation, or it may be concatenated to one or more fixed strings to construct a fully-qualified path."/>
            <para text="When an application improperly cleanses special character sequences in user-supplied filenames, a path traversal &#x28;or directory traversal&#x29; vulnerability may occur.  For example, an attacker could specify a filename such as &#x22;..&#x2f;..&#x2f;etc&#x2f;passwd&#x22;, which resolves to a file outside of the intended directory that the attacker would not normally be authorized to view."/>
         </desc>
         <recommendations>
            <para text="Assume all user-supplied input is malicious.  Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters and ensure that the end result is not dangerous."/>
         </recommendations>
         <cwe cweid="73" cwename="External Control of File Name or Path" pcirelated="false" sans="22" certcpp="877">
            <description>
               <text text="This call contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="99" module="cmpConfiguracionGlobal-1.1.0.jar" type="java.io.File.&#x21;operator_javanewinit" description="This call to java.io.File.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable rutaArchivoConfig. The tainted data originated from earlier calls to mx.isban.agave.configuracionGlobal.ConfiguracionGlobal.cargaConfigsDesdeArch, and mx.isban.agave.configuracionGlobal.ConfiguracionGlobal.initModoStandalone.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConfiguracionGlobal.java" line="222" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;configuracionGlobal&#x2f;" scope="mx.isban.agave.configuracionGlobal.ConfiguracionGlobal" functionprototype="void cargaConfigsDesdeArch&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="12"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="96" module="cmpConfiguracionGlobal-1.1.0.jar" type="java.io.File.&#x21;operator_javanewinit" description="This call to java.io.File.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable rutaDirArchivoContingencia. The tainted data originated from earlier calls to mx.isban.agave.logging.Level.valueOf, mx.isban.agave.configuracion.ConfiguracionUtil.getComponentByID, mx.isban.agave.logging.utils.VersionadorUtils.almacenaVersionEnFilesystem, mx.isban.agave.logging.utils.VersionadorUtils.versionarComponente, mx.isban.agave.commons.security.Security.authorized, mx.isban.agave.commons.utils.ComponenteDatosIni.getComponentePorNombre, mx.isban.agave.configuracion.ConfiguracionUtil.destruyeContextoComponente, mx.isban.agave.configuracion.ConfiguracionUtil.inicializaClase, mx.isban.agave.dataaccess.util.parser.UtilsBusqueda.listarArchivosDeDirectorio, java.sql.PreparedStatement.executeQuery, and java.sql.Statement.executeQuery.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConfiguracionGlobal.java" line="382" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;configuracionGlobal&#x2f;" scope="mx.isban.agave.configuracionGlobal.ConfiguracionGlobal" functionprototype="void generarArchivoContingencia&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String, commons.beans.ConfiguracionBean&#x29;" functionrelativelocation="17"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="95" module="cmpConfiguracionGlobal-1.1.0.jar" type="java.io.File.&#x21;operator_javanewinit" description="This call to java.io.File.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The second argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to mx.isban.agave.logging.Level.valueOf, mx.isban.agave.configuracion.ConfiguracionUtil.getComponentByID, mx.isban.agave.logging.utils.VersionadorUtils.almacenaVersionEnFilesystem, mx.isban.agave.logging.utils.VersionadorUtils.versionarComponente, mx.isban.agave.commons.security.Security.authorized, mx.isban.agave.commons.utils.ComponenteDatosIni.getComponentePorNombre, mx.isban.agave.configuracion.ConfiguracionUtil.destruyeContextoComponente, mx.isban.agave.configuracion.ConfiguracionUtil.inicializaClase, mx.isban.agave.dataaccess.util.parser.UtilsBusqueda.listarArchivosDeDirectorio, java.sql.PreparedStatement.executeQuery, and java.sql.Statement.executeQuery.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConfiguracionGlobal.java" line="388" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;configuracionGlobal&#x2f;" scope="mx.isban.agave.configuracionGlobal.ConfiguracionGlobal" functionprototype="void generarArchivoContingencia&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String, commons.beans.ConfiguracionBean&#x29;" functionrelativelocation="60"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="97" module="cmpConfiguracionGlobal-1.1.0.jar" type="java.io.File.&#x21;operator_javanewinit" description="This call to java.io.File.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable rutaDirArchivoContingencia. The tainted data originated from earlier calls to mx.isban.agave.logging.Level.valueOf, mx.isban.agave.configuracion.ConfiguracionUtil.getComponentByID, mx.isban.agave.logging.utils.VersionadorUtils.almacenaVersionEnFilesystem, mx.isban.agave.logging.utils.VersionadorUtils.versionarComponente, mx.isban.agave.commons.security.Security.authorized, mx.isban.agave.commons.utils.ComponenteDatosIni.getComponentePorNombre, mx.isban.agave.configuracion.ConfiguracionUtil.destruyeContextoComponente, mx.isban.agave.configuracion.ConfiguracionUtil.inicializaClase, mx.isban.agave.dataaccess.util.parser.UtilsBusqueda.listarArchivosDeDirectorio, java.sql.PreparedStatement.executeQuery, and java.sql.Statement.executeQuery.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConfiguracionGlobal.java" line="418" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;configuracionGlobal&#x2f;" scope="mx.isban.agave.configuracionGlobal.ConfiguracionGlobal" functionprototype="void cargarConfigsModoContingencia&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="26"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="98" module="cmpConfiguracionGlobal-1.1.0.jar" type="java.io.File.&#x21;operator_javanewinit" description="This call to java.io.File.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The second argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to mx.isban.agave.logging.Level.valueOf, mx.isban.agave.configuracion.ConfiguracionUtil.getComponentByID, mx.isban.agave.logging.utils.VersionadorUtils.almacenaVersionEnFilesystem, mx.isban.agave.logging.utils.VersionadorUtils.versionarComponente, mx.isban.agave.commons.security.Security.authorized, mx.isban.agave.commons.utils.ComponenteDatosIni.getComponentePorNombre, mx.isban.agave.configuracion.ConfiguracionUtil.destruyeContextoComponente, mx.isban.agave.configuracion.ConfiguracionUtil.inicializaClase, mx.isban.agave.dataaccess.util.parser.UtilsBusqueda.listarArchivosDeDirectorio, java.sql.PreparedStatement.executeQuery, and java.sql.Statement.executeQuery.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConfiguracionGlobal.java" line="419" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;configuracionGlobal&#x2f;" scope="mx.isban.agave.configuracionGlobal.ConfiguracionGlobal" functionprototype="void cargarConfigsModoContingencia&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="45"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="100" module="cmpConfiguracionGlobal-1.1.0.jar" type="java.io.File.&#x21;operator_javanewinit" description="This call to java.io.File.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable rutaArchivoCLA. The tainted data originated from an earlier call to mx.isban.agave.configuracionGlobal.ConfiguracionGlobal.init.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConfiguracionGlobal.java" line="682" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;configuracionGlobal&#x2f;" scope="mx.isban.agave.configuracionGlobal.ConfiguracionGlobal" functionprototype="java.util.List getRutasArchivosConfig&#x28;java.lang.String&#x29;" functionrelativelocation="24"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="19" issueid="39" module="AgaveWorkerCookie-1.1.3.jar&#x2f;cmpConfiguracion-1.2.0.jar" type="java.io.File.&#x21;operator_javanewinit" description="This call to java.io.File.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable pathConfigFile. The tainted data originated from earlier calls to mx.isban.agave.configuracion.ConfiguracionUtil.getDocument, and mx.isban.agave.configuracion.ConfiguracionUtil.getConfigsFromXML.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConfiguracionUtil.java" line="235" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;configuracion&#x2f;" scope="mx.isban.agave.configuracion.ConfiguracionUtil" functionprototype="org.w3c.dom.Document getDocument&#x28;java.lang.String&#x29;" functionrelativelocation="10"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="19" issueid="25" module="AgaveWorkerCookie-1.1.3.jar&#x2f;cmpConfiguracion-1.2.0.jar" type="java.io.FileInputStream.&#x21;operator_javanewinit" description="This call to java.io.FileInputStream.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable rutaArchivoConfiguracion. The tainted data originated from an earlier call to mx.isban.agave.configuracion.ConfiguracionUtil.getConfigsFromProperties.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConfiguracionUtil.java" line="394" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;configuracion&#x2f;" scope="mx.isban.agave.configuracion.ConfiguracionUtil" functionprototype="java.util.List getConfigsFromProperties&#x28;java.lang.String&#x29;" functionrelativelocation="30"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="5" issueid="78" module="cmpMensajeria-1.2.1.jar&#x2f;cmpIsbanDataAccess-1.12.0.jar" type="java.io.File.&#x21;operator_javanewinit" description="This call to java.io.File.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable pathProfile. The tainted data originated from earlier calls to mx.isban.agave.logging.utils.VersionadorUtils.versionarComponente, and mx.isban.agave.logging.utils.VersionadorUtils.almacenaVersionEnFilesystem.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DataAccess.java" line="579" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;" scope="mx.isban.agave.dataaccess.DataAccess" functionprototype="void cargarArchivosSimulacion&#x28;void&#x29;" functionrelativelocation="7"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="12" issueid="43" module="cmpInterfacesToken-1.1.0.jar&#x2f;cmpIsbanDataAccess-1.12.0.jar" type="java.io.FileInputStream.&#x21;operator_javanewinit" description="This call to java.io.FileInputStream.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable pstrFileConfig. The tainted data originated from an earlier call to mx.isban.agave.dataaccess.DataAccess.setConfigLocal.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DataAccess.java" line="614" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;" scope="mx.isban.agave.dataaccess.DataAccess" functionprototype="void setConfigLocal&#x28;java.lang.String&#x29;" functionrelativelocation="27"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="253" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;cmpIsbanDataAccess-1.11.0.jar" type="java.io.FileOutputStream.&#x21;operator_javanewinit" description="This call to java.io.FileOutputStream.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DataAccess.java" line="843" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;" scope="mx.isban.agave.dataaccess.DataAccess" functionprototype="boolean serializeClass&#x28;java.lang.String, java.lang.String, ResponseMessageDTO&#x29;" functionrelativelocation="71"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="4" issueid="81" module="cmpAuditoria-1.1.0.jar&#x2f;cmpIsbanDataAccess-1.12.0.jar" type="java.io.FileOutputStream.&#x21;operator_javanewinit" description="This call to java.io.FileOutputStream.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to mx.isban.agave.logging.utils.VersionadorUtils.versionarComponente, and mx.isban.agave.logging.utils.VersionadorUtils.almacenaVersionEnFilesystem.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DataAccess.java" line="844" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;" scope="mx.isban.agave.dataaccess.DataAccess" functionprototype="boolean serializeClass&#x28;java.lang.String, java.lang.String, ResponseMessageDTO&#x29;" functionrelativelocation="71"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="4" issueid="83" module="cmpAuditoria-1.1.0.jar&#x2f;cmpIsbanDataAccess-1.12.0.jar" type="java.io.File.&#x21;operator_javanewinit" description="This call to java.io.File.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable pathProfile. The tainted data originated from earlier calls to mx.isban.agave.logging.utils.VersionadorUtils.versionarComponente, and mx.isban.agave.logging.utils.VersionadorUtils.almacenaVersionEnFilesystem.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DataAccess.java" line="881" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;" scope="mx.isban.agave.dataaccess.DataAccess" functionprototype="boolean validateAndCreateDirs&#x28;&#x29;" functionrelativelocation="38"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="246" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;cmpIsbanDataAccess-1.11.0.jar" type="java.io.FileInputStream.&#x21;operator_javanewinit" description="This call to java.io.FileInputStream.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DataAccess.java" line="914" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;" scope="mx.isban.agave.dataaccess.DataAccess" functionprototype="ResponseMessageDTO deserializeClass&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="69"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="4" issueid="82" module="cmpAuditoria-1.1.0.jar&#x2f;cmpIsbanDataAccess-1.12.0.jar" type="java.io.FileInputStream.&#x21;operator_javanewinit" description="This call to java.io.FileInputStream.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to mx.isban.agave.logging.utils.VersionadorUtils.versionarComponente, and mx.isban.agave.logging.utils.VersionadorUtils.almacenaVersionEnFilesystem.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DataAccess.java" line="915" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;" scope="mx.isban.agave.dataaccess.DataAccess" functionprototype="ResponseMessageDTO deserializeClass&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="69"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="2" issueid="93" module="cmpEjecutoresMensajeria-1.1.1.jar&#x2f;cmpSMSEmail-1.1.0.jar" type="java.io.File.&#x21;operator_javanewinit" description="This call to java.io.File.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable urlArchivos. The tainted data originated from earlier calls to mx.isban.agave.cmpSMSEmail.cliente.SMSEmail.obtenMensajesDistribuido, and mx.isban.agave.cmpSMSEmail.cliente.SMSEmail.obtenMensajesDeBD.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SMSEmail.java" line="159" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;cmpSMSEmail&#x2f;cliente&#x2f;" scope="mx.isban.agave.cmpSMSEmail.cliente.SMSEmail" functionprototype="void obtenMensajesLocal&#x28;java.lang.String, boolean&#x29;" functionrelativelocation="6"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="2" issueid="86" module="cmpEjecutoresMensajeria-1.1.1.jar&#x2f;cmpSMSEmail-1.1.0.jar" type="java.io.FileReader.&#x21;operator_javanewinit" description="This call to java.io.FileReader.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to mx.isban.agave.cmpSMSEmail.cliente.SMSEmail.obtenMensajesDistribuido, and mx.isban.agave.cmpSMSEmail.cliente.SMSEmail.obtenMensajesDeBD.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SMSEmail.java" line="237" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;cmpSMSEmail&#x2f;cliente&#x2f;" scope="mx.isban.agave.cmpSMSEmail.cliente.SMSEmail" functionprototype="void leeArchivos&#x28;java.util.ArrayList&#x29;" functionrelativelocation="45"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="2" issueid="94" module="cmpEjecutoresMensajeria-1.1.1.jar&#x2f;cmpSMSEmail-1.1.0.jar" type="java.io.File.&#x21;operator_javanewinit" description="This call to java.io.File.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable urlArchivos. The tainted data originated from earlier calls to mx.isban.agave.cmpSMSEmail.cliente.SMSEmail.obtenMensajesDistribuido, and mx.isban.agave.cmpSMSEmail.cliente.SMSEmail.obtenMensajesDeBD.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SMSEmail.java" line="364" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;cmpSMSEmail&#x2f;cliente&#x2f;" scope="mx.isban.agave.cmpSMSEmail.cliente.SMSEmail" functionprototype="boolean creaArchivosContingencia&#x28;java.util.ArrayList&#x29;" functionrelativelocation="7"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="2" issueid="89" module="cmpEjecutoresMensajeria-1.1.1.jar&#x2f;cmpSMSEmail-1.1.0.jar" type="java.io.File.&#x21;operator_javanewinit" description="This call to java.io.File.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to mx.isban.agave.cmpSMSEmail.cliente.SMSEmail.obtenMensajesDistribuido, mx.isban.agave.cmpSMSEmail.cliente.SMSEmail.obtenMensajesDeBD, java.sql.Statement.executeQuery, and java.sql.PreparedStatement.executeQuery.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SMSEmail.java" line="369" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;cmpSMSEmail&#x2f;cliente&#x2f;" scope="mx.isban.agave.cmpSMSEmail.cliente.SMSEmail" functionprototype="boolean creaArchivosContingencia&#x28;java.util.ArrayList&#x29;" functionrelativelocation="33"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="7" issueid="45" module="cmpInterfacesToken-1.1.0.jar&#x2f;cmpChannelDatabase-1.11.0.jar" type="java.io.File.&#x21;operator_javanewinit" description="This call to java.io.File.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable archivo. The tainted data originated from an earlier call to mx.isban.agave.dataaccess.channels.database.utils.UtilDataAccessDB.getBytesFromFile.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UtilDataAccessDB.java" line="240" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;channels&#x2f;database&#x2f;utils&#x2f;" scope="mx.isban.agave.dataaccess.channels.database.utils.UtilDataAccessDB" functionprototype="byte &#x5b;&#x5d; getBytesFromFile&#x28;java.lang.String&#x29;" functionrelativelocation="10"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="7" issueid="48" module="cmpInterfacesToken-1.1.0.jar&#x2f;cmpChannelDatabase-1.11.0.jar" type="java.io.FileOutputStream.&#x21;operator_javanewinit" description="This call to java.io.FileOutputStream.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable archivoDestino. The tainted data originated from an earlier call to mx.isban.agave.dataaccess.channels.database.utils.UtilDataAccessDB.arrayOfBytesToFile.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UtilDataAccessDB.java" line="269" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;channels&#x2f;database&#x2f;utils&#x2f;" scope="mx.isban.agave.dataaccess.channels.database.utils.UtilDataAccessDB" functionprototype="void arrayOfBytesToFile&#x28;byte  &#x5b;&#x5d;, java.lang.String&#x29;" functionrelativelocation="42"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="19" issueid="33" module="AgaveWorkerCookie-1.1.3.jar&#x2f;cmpCommonsGlobal-1.2.1.jar" type="java.io.File.&#x21;operator_javanewinit" description="This call to java.io.File.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable strRuta. The tainted data originated from an earlier call to mx.isban.agave.commons.utils.Utils.validarRuta.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Utils.java" line="339" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;commons&#x2f;utils&#x2f;" scope="mx.isban.agave.commons.utils.Utils" functionprototype="boolean validarRuta&#x28;java.lang.String&#x29;" functionrelativelocation="33"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="24" module="AgaveWorkerCookie-1.1.3.jar&#x2f;cmpCommonsGlobal-1.2.1.jar" type="java.io.File.&#x21;operator_javanewinit" description="This call to java.io.File.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable strRuta. The tainted data originated from an earlier call to mx.isban.agave.commons.utils.Utils.validaArchivo.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Utils.java" line="352" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;commons&#x2f;utils&#x2f;" scope="mx.isban.agave.commons.utils.Utils" functionprototype="boolean validaArchivo&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="30"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="41" module="AgaveWorkerCookie-1.1.3.jar&#x2f;cmpCommonsGlobal-1.2.1.jar" type="java.io.File.&#x21;operator_javanewinit" description="This call to java.io.File.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The second argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable strArch. The tainted data originated from an earlier call to mx.isban.agave.commons.utils.Utils.validaArchivo.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Utils.java" line="352" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;commons&#x2f;utils&#x2f;" scope="mx.isban.agave.commons.utils.Utils" functionprototype="boolean validaArchivo&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="30"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="30" module="AgaveWorkerCookie-1.1.3.jar&#x2f;cmpCommonsGlobal-1.2.1.jar" type="java.io.File.&#x21;operator_javanewinit" description="This call to java.io.File.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable strRuta. The tainted data originated from an earlier call to mx.isban.agave.commons.utils.Utils.borraArchivo.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Utils.java" line="363" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;commons&#x2f;utils&#x2f;" scope="mx.isban.agave.commons.utils.Utils" functionprototype="boolean borraArchivo&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="60"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="28" module="AgaveWorkerCookie-1.1.3.jar&#x2f;cmpCommonsGlobal-1.2.1.jar" type="java.io.File.&#x21;operator_javanewinit" description="This call to java.io.File.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The second argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable strArch. The tainted data originated from an earlier call to mx.isban.agave.commons.utils.Utils.borraArchivo.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Utils.java" line="363" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;commons&#x2f;utils&#x2f;" scope="mx.isban.agave.commons.utils.Utils" functionprototype="boolean borraArchivo&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="60"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="12" issueid="60" module="cmpInterfacesToken-1.1.0.jar&#x2f;cmpIsbanDataAccess-1.12.0.jar" type="java.io.File.&#x21;operator_javanewinit" description="This call to java.io.File.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable directorioABuscar. The tainted data originated from an earlier call to mx.isban.agave.dataaccess.util.parser.UtilsBusqueda.listarArchivosDeDirectorio.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UtilsBusqueda.java" line="55" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;util&#x2f;parser&#x2f;" scope="mx.isban.agave.dataaccess.util.parser.UtilsBusqueda" functionprototype="java.util.Map listarArchivosDeDirectorio&#x28;java.lang.String, java.lang.String, ModoPatronEnum&#x29;" functionrelativelocation="7"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="12" issueid="49" module="cmpInterfacesToken-1.1.0.jar&#x2f;cmpIsbanDataAccess-1.12.0.jar" type="java.io.FileWriter.&#x21;operator_javanewinit" description="This call to java.io.FileWriter.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable rutaArchivoSalida. The tainted data originated from an earlier call to mx.isban.agave.dataaccess.util.parser.UtilsOut.crearArchivoOut.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UtilsOut.java" line="56" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;util&#x2f;parser&#x2f;" scope="mx.isban.agave.dataaccess.util.parser.UtilsOut" functionprototype="boolean crearArchivoOut&#x28;java.lang.String, java.lang.StringBuilder&#x29;" functionrelativelocation="9"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="12" issueid="63" module="cmpInterfacesToken-1.1.0.jar&#x2f;cmpIsbanDataAccess-1.12.0.jar" type="java.io.File.&#x21;operator_javanewinit" description="This call to java.io.File.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable rutaArchivo. The tainted data originated from an earlier call to mx.isban.agave.dataaccess.util.parser.UtilsOut.obtenerContenidoArchivo.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UtilsOut.java" line="107" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;util&#x2f;parser&#x2f;" scope="mx.isban.agave.dataaccess.util.parser.UtilsOut" functionprototype="java.lang.String obtenerContenidoArchivo&#x28;java.lang.String, boolean&#x29;" functionrelativelocation="3"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="12" issueid="57" module="cmpInterfacesToken-1.1.0.jar&#x2f;cmpIsbanDataAccess-1.12.0.jar" type="java.io.FileWriter.&#x21;operator_javanewinit" description="This call to java.io.FileWriter.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable rutaArchivoSalida. The tainted data originated from an earlier call to mx.isban.agave.dataaccess.util.parser.UtilsOut.crearYEscribirArchivo.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UtilsOut.java" line="167" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;util&#x2f;parser&#x2f;" scope="mx.isban.agave.dataaccess.util.parser.UtilsOut" functionprototype="void crearYEscribirArchivo&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="5"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="12" issueid="59" module="cmpInterfacesToken-1.1.0.jar&#x2f;cmpIsbanDataAccess-1.12.0.jar" type="java.io.FileWriter.&#x21;operator_javanewinit" description="This call to java.io.FileWriter.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable rutaArchivoSalida. The tainted data originated from an earlier call to mx.isban.agave.dataaccess.util.parser.UtilsOut.crearYEscribirArchivoStd.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UtilsOut.java" line="208" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;util&#x2f;parser&#x2f;" scope="mx.isban.agave.dataaccess.util.parser.UtilsOut" functionprototype="void crearYEscribirArchivoStd&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="5"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="18" issueid="31" module="AgaveWorkerCookie-1.1.3.jar&#x2f;cmpLogging-1.1.0.jar" type="java.io.FileWriter.&#x21;operator_javanewinit" description="This call to java.io.FileWriter.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable filePathVersionado. The tainted data originated from earlier calls to mx.isban.agave.logging.utils.VersionadorUtils.almacenaVersionEnFilesystem, and mx.isban.agave.logging.utils.VersionadorUtils.versionarComponente.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="VersionadorUtils.java" line="194" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;logging&#x2f;utils&#x2f;" scope="mx.isban.agave.logging.utils.VersionadorUtils" functionprototype="void almacenaVersionEnFilesystem&#x28;java.lang.String, java.util.List, java.lang.Class, java.lang.String&#x29;" functionrelativelocation="29"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="12" issueid="47" module="cmpInterfacesToken-1.1.0.jar&#x2f;cmpIsbanDataAccess-1.12.0.jar" type="java.lang.Class.getResourceAsStream" description="This call to java.lang.Class.getResourceAsStream&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to getResourceAsStream&#x28;&#x29; contains tainted data from the variable mySchema1. The tainted data originated from an earlier call to mx.isban.agave.dataaccess.util.parser.XMLValidator.validarXML.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="XMLValidator.java" line="61" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;util&#x2f;parser&#x2f;" scope="mx.isban.agave.dataaccess.util.parser.XMLValidator" functionprototype="void validarXML&#x28;java.lang.String, java.lang.String, TipoEsquemaXSDEnum&#x29;" functionrelativelocation="15"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="12" issueid="66" module="cmpInterfacesToken-1.1.0.jar&#x2f;cmpIsbanDataAccess-1.12.0.jar" type="java.io.File.&#x21;operator_javanewinit" description="This call to java.io.File.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable rutaArchivoXML. The tainted data originated from an earlier call to mx.isban.agave.dataaccess.util.parser.XMLValidator.validarXML.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="XMLValidator.java" line="70" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;util&#x2f;parser&#x2f;" scope="mx.isban.agave.dataaccess.util.parser.XMLValidator" functionprototype="void validarXML&#x28;java.lang.String, java.lang.String, TipoEsquemaXSDEnum&#x29;" functionrelativelocation="22"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="22" categoryname="Encapsulation" pcirelated="false">
         <desc>
            <para text="Encapsulation is about defining strong security boundaries governing data and processes. Within an application, it might mean differentiation between validated and unvalidated data, between public and private members, or between one user&#x27;s data and another&#x27;s.  "/>
            <para text="In object-oriented programming, the term encapsulation is used to describe the grouping together of data and functionality within an object and the ability to provide users with a well-defined interface in a way which hides their internal workings.  Though there is some overlap with the above definition, the two definitions should not be confused as being interchangeable."/>
         </desc>
         <recommendations>
            <para text="The wide variance of encapsulation issues makes it impractical to generalize how these issues should be addressed, beyond stating that encapsulation boundaries should be well-defined and adhered to.  Refer to individual categories for specific recommendations. "/>
         </recommendations>
         <cwe cweid="501" cwename="Trust Boundary Violation" pcirelated="false">
            <description>
               <text text="A trust boundary violation occurs when a program blurs the line between what is trusted and what is untrusted.  This application mixes trusted and untrusted data in the same data structure.  By doing so, it becomes easier for programmers to mistakenly trust unvalidated data.  Without well-established and maintained trust boundaries, programmers will inevitably lose track of which pieces of data have been validated and which have not. This confusion will eventually allow some data to be used without first being validated.  A common manifestation of this flaw is in J2EE application, when a Session object is used to store untrusted data from the HTTP request."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Trust Boundary Violation" count="1" issueid="76" module="web-1.0.2.jar" type="javax.servlet.http.HttpSession.setAttribute" description="This call to javax.servlet.http.HttpSession.setAttribute&#x28;&#x29; mixes trusted and untrusted data in the same data structure, thereby encouraging programmers to mistakenly trust unvalidated data. The second argument to setAttribute&#x28;&#x29; contains tainted data from the variable request.getRequestURL&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getRequestURL.&#xd;&#xa;&#xd;&#xa;Avoid storing untrusted data alongside trusted data in the same data structure. Establish and maintain trust boundaries for data storage.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;501.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="501" remediationeffort="2" exploitLevel="0" categoryid="22" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EnvironmentFilter.java" line="76" sourcefilepath="mx&#x2f;isban&#x2f;arquitectura&#x2f;seguridad&#x2f;config&#x2f;filter&#x2f;" scope="mx.isban.arquitectura.seguridad.config.filter.EnvironmentFilter" functionprototype="void doFilter&#x28;javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain&#x29;" functionrelativelocation="79"/>
               <flaw severity="3" categoryname="Trust Boundary Violation" count="1" issueid="75" module="web-1.0.2.jar" type="javax.servlet.http.HttpSession.setAttribute" description="This call to javax.servlet.http.HttpSession.setAttribute&#x28;&#x29; mixes trusted and untrusted data in the same data structure, thereby encouraging programmers to mistakenly trust unvalidated data. The second argument to setAttribute&#x28;&#x29; contains tainted data from the variable request.getRequestURL&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getRequestURL.&#xd;&#xa;&#xd;&#xa;Avoid storing untrusted data alongside trusted data in the same data structure. Establish and maintain trust boundaries for data storage.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;501.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="501" remediationeffort="2" exploitLevel="0" categoryid="22" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EnvironmentFilter.java" line="79" sourcefilepath="mx&#x2f;isban&#x2f;arquitectura&#x2f;seguridad&#x2f;config&#x2f;filter&#x2f;" scope="mx.isban.arquitectura.seguridad.config.filter.EnvironmentFilter" functionprototype="void doFilter&#x28;javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain&#x29;" functionrelativelocation="87"/>
               <flaw severity="3" categoryname="Trust Boundary Violation" count="2" issueid="2" module="IsbSecuritySSOFilter-1.0.6.jar" type="javax.servlet.http.HttpSession.setAttribute" description="This call to javax.servlet.http.HttpSession.setAttribute&#x28;&#x29; mixes trusted and untrusted data in the same data structure, thereby encouraging programmers to mistakenly trust unvalidated data. The second argument to setAttribute&#x28;&#x29; contains tainted data from the variable newHashToken. The tainted data originated from earlier calls to javax.servlet.http.HttpServletRequestWrapper.getCookies, and javax.servlet.http.HttpServletRequest.getCookies.&#xd;&#xa;&#xd;&#xa;Avoid storing untrusted data alongside trusted data in the same data structure. Establish and maintain trust boundaries for data storage.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;501.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="501" remediationeffort="2" exploitLevel="0" categoryid="22" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="IsbSecurityFilter.java" line="151" sourcefilepath="mx&#x2f;isban&#x2f;security&#x2f;filterng&#x2f;" scope="mx.isban.security.filterng.IsbSecurityFilter" functionprototype="void doFilter&#x28;javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain&#x29;" functionrelativelocation="66"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="8" categoryname="Information Leakage" pcirelated="true">
         <desc>
            <para text="An information leak is the intentional or unintentional disclosure of information that is either regarded as sensitive within the product&#x27;s own functionality or provides information about the product or its environment that could be useful in an attack.  Information leakage issues are commonly overlooked because they cannot be used to directly exploit the application.  However, information leaks should be viewed as building blocks that an attacker uses to carry out other, more complicated attacks."/>
            <para text="There are many different types of problems that involve information leaks, with severities that can range widely depending on the type of information leaked and the context of the information with respect to the application.  Common sources of information leakage include, but are not limited to&#x3a;">
               <bulletitem text="Source code disclosure"/>
               <bulletitem text="Browsable directories"/>
               <bulletitem text="Log files or backup files in web-accessible directories"/>
               <bulletitem text="Unfiltered backend error messages"/>
               <bulletitem text="Exception stack traces"/>
               <bulletitem text="Server version information"/>
               <bulletitem text="Transmission of uninitialized memory containing sensitive data"/>
            </para>
         </desc>
         <recommendations>
            <para text="Configure applications and servers to return generic error messages and to suppress stack traces from being displayed to end users.  Ensure that errors generated by the application do not provide insight into specific backend issues.  "/>
            <para text="Remove all backup files, binary archives, alternate versions of files, and test files from web-accessible directories of production servers.  The only files that should be present in the application&#x27;s web document root are files required by the application.  Ensure that deployment procedures include the removal of these file types by an administrator.  Keep web and application servers fully patched to minimize exposure to publicly-disclosed information leakage vulnerabilities."/>
         </recommendations>
         <cwe cweid="611" cwename="Improper Restriction of XML External Entity Reference" pcirelated="true" owasp="1030">
            <description>
               <text text="The product processes an XML document that can contain XML entities with URLs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output. By default, the XML entity resolver will attempt to resolve and retrieve external references. If attacker-controlled XML can be submitted to one of these functions, then the attacker could gain access to information about an internal network, local filesystem, or other sensitive data. This is known as an XML eXternal Entity &#x28;XXE&#x29; attack."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Improper Restriction of XML External Entity Reference" count="1" issueid="23" module="MicroSitioBETEAREJB.ear&#x2f;cmpConfiguracion-1.1.0.jar" type="javax.xml.parsers.DocumentBuilder.parse" description="The resolution of external entity references is enabled. If attacker-controlled XML can be submitted to the XML parser here, then the attacker could gain access to information about an internal network, local filesystem, or other sensitive data. This is known as an XML eXternal Entity &#x28;XXE&#x29; attack.&#xd;&#xa;&#xd;&#xa;Configure the XML parser to disable external entity resolution.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;611.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;XML_External_Entity_Prevention_Cheat_Sheet.md&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;XML-External-Entities&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="611" remediationeffort="2" exploitLevel="0" categoryid="8" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConfiguracionUtil.java" line="238" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;configuracion&#x2f;" scope="mx.isban.agave.configuracion.ConfiguracionUtil" functionprototype="org.w3c.dom.Document getDocument&#x28;java.lang.String&#x29;" functionrelativelocation="29"/>
               <flaw severity="3" categoryname="Improper Restriction of XML External Entity Reference" count="2" issueid="58" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;cmpIsbanDataAccess-1.11.0.jar" type="javax.xml.parsers.SAXParser.parse" description="The resolution of external entity references is enabled. If attacker-controlled XML can be submitted to the XML parser here, then the attacker could gain access to information about an internal network, local filesystem, or other sensitive data. This is known as an XML eXternal Entity &#x28;XXE&#x29; attack.&#xd;&#xa;&#xd;&#xa;Configure the XML parser to disable external entity resolution.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;611.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;XML_External_Entity_Prevention_Cheat_Sheet.md&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;XML-External-Entities&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="611" remediationeffort="2" exploitLevel="0" categoryid="8" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ParserXML.java" line="64" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;util&#x2f;parser&#x2f;" scope="mx.isban.agave.dataaccess.util.parser.ParserXML" functionprototype="java.util.Map getResultParse&#x28;java.lang.String, XMLReadHandler&#x29;" functionrelativelocation="19"/>
               <flaw severity="3" categoryname="Improper Restriction of XML External Entity Reference" count="2" issueid="42" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;cmpIsbanDataAccess-1.11.0.jar" type="javax.xml.parsers.DocumentBuilder.parse" description="The resolution of external entity references is enabled. If attacker-controlled XML can be submitted to the XML parser here, then the attacker could gain access to information about an internal network, local filesystem, or other sensitive data. This is known as an XML eXternal Entity &#x28;XXE&#x29; attack.&#xd;&#xa;&#xd;&#xa;Configure the XML parser to disable external entity resolution.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;611.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;XML_External_Entity_Prevention_Cheat_Sheet.md&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;XML-External-Entities&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="611" remediationeffort="2" exploitLevel="0" categoryid="8" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ParserXML.java" line="120" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;util&#x2f;parser&#x2f;" scope="mx.isban.agave.dataaccess.util.parser.ParserXML" functionprototype="java.util.Map getResultParseHijosRepetidos&#x28;java.lang.String, java.util.Map&#x29;" functionrelativelocation="10"/>
               <flaw severity="3" categoryname="Improper Restriction of XML External Entity Reference" count="2" issueid="180" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;MicroSitioBETCliente-1.0.jar" type="javax.xml.bind.Unmarshaller.unmarshal" description="The resolution of external entity references is enabled. If attacker-controlled XML can be submitted to the XML parser here, then the attacker could gain access to information about an internal network, local filesystem, or other sensitive data. This is known as an XML eXternal Entity &#x28;XXE&#x29; attack.&#xd;&#xa;&#xd;&#xa;Configure the XML parser to disable external entity resolution.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;611.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;XML_External_Entity_Prevention_Cheat_Sheet.md&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;XML-External-Entities&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="611" remediationeffort="2" exploitLevel="0" categoryid="8" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UtilsHttpRequest.java" line="386" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;util&#x2f;" scope="mx.isban.bet.micrositio.util.UtilsHttpRequest" functionprototype="java.lang.Object getObjectFromStringXML&#x28;java.lang.String, java.lang.Class&#x29;" functionrelativelocation="64"/>
               <flaw severity="3" categoryname="Improper Restriction of XML External Entity Reference" count="2" issueid="177" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;MicroSitioBETCliente-1.0.jar" type="javax.xml.parsers.DocumentBuilder.parse" description="The resolution of external entity references is enabled. If attacker-controlled XML can be submitted to the XML parser here, then the attacker could gain access to information about an internal network, local filesystem, or other sensitive data. This is known as an XML eXternal Entity &#x28;XXE&#x29; attack.&#xd;&#xa;&#xd;&#xa;Configure the XML parser to disable external entity resolution.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;611.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;XML_External_Entity_Prevention_Cheat_Sheet.md&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;XML-External-Entities&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="611" remediationeffort="2" exploitLevel="0" categoryid="8" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UtilsHttpRequest.java" line="418" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;util&#x2f;" scope="mx.isban.bet.micrositio.util.UtilsHttpRequest" functionprototype="java.lang.String cleanXml&#x28;java.lang.String&#x29;" functionrelativelocation="17"/>
               <flaw severity="3" categoryname="Improper Restriction of XML External Entity Reference" count="2" issueid="184" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;MicroSitioBETCliente-1.0.jar" type="javax.xml.transform.Transformer.transform" description="The resolution of external entity references is enabled. If attacker-controlled XML can be submitted to the XML parser here, then the attacker could gain access to information about an internal network, local filesystem, or other sensitive data. This is known as an XML eXternal Entity &#x28;XXE&#x29; attack.&#xd;&#xa;&#xd;&#xa;Configure the XML parser to disable external entity resolution.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;611.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;XML_External_Entity_Prevention_Cheat_Sheet.md&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;XML-External-Entities&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="611" remediationeffort="2" exploitLevel="0" categoryid="8" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UtilsHttpRequest.java" line="429" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;util&#x2f;" scope="mx.isban.bet.micrositio.util.UtilsHttpRequest" functionprototype="java.lang.String cleanXml&#x28;java.lang.String&#x29;" functionrelativelocation="51"/>
               <flaw severity="3" categoryname="Improper Restriction of XML External Entity Reference" count="1" issueid="340" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="javax.xml.parsers.DocumentBuilder.parse" description="The resolution of external entity references is enabled. If attacker-controlled XML can be submitted to the XML parser here, then the attacker could gain access to information about an internal network, local filesystem, or other sensitive data. This is known as an XML eXternal Entity &#x28;XXE&#x29; attack.&#xd;&#xa;&#xd;&#xa;Configure the XML parser to disable external entity resolution.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;611.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;XML_External_Entity_Prevention_Cheat_Sheet.md&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;XML-External-Entities&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="611" remediationeffort="2" exploitLevel="0" categoryid="8" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-05-07 23&#x3a;29&#x3a;50 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="VOCommonsController.java" line="558" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;ventana&#x2f;operativa&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.ventana.operativa.controller.VOCommonsController" functionprototype="java.lang.String decodeCuenta&#x28;java.lang.String&#x29;" functionrelativelocation="36"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="25" categoryname="Insufficient Input Validation" pcirelated="false">
         <desc>
            <para text="Weaknesses in this category are related to an absent or incorrect protection mechanism that fails to properly validate input that can affect the control flow or data flow of a program."/>
         </desc>
         <recommendations>
            <para text="Validate input from untrusted sources before it is used. The untrusted data sources may include HTTP requests, file systems, databases, and any external systems that provide data to the application. In the case of HTTP requests, validate all parts of the request, including headers, form fields, cookies, and URL components that are used to transfer information from the browser to the server side application."/>
            <para text="Duplicate any client-side checks on the server side. This should be simple to implement in terms of time and difficulty, and will greatly reduce the likelihood of insecure parameter values being used in the application."/>
         </recommendations>
         <cwe cweid="470" cwename="Use of Externally-Controlled Input to Select Classes or Code &#x28;&#x27;Unsafe Reflection&#x27;&#x29;" pcirelated="false">
            <description>
               <text text="A call uses reflection in an unsafe manner.  An attacker can specify the class name to be instantiated, which may create unexpected control flow paths through the application.  Depending on how reflection is being used, the attack vector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpected manner.  Even if the object does not implement the specified interface and a ClassCastException is thrown, the constructor of the untrusted class name will have already executed."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Use of Externally-Controlled Input to Select Classes or Code &#x28;&#x27;Unsafe Reflection&#x27;&#x29;" count="19" issueid="22" module="AgaveWorkerCookie-1.1.3.jar&#x2f;cmpConfiguracion-1.2.0.jar" type="java.lang.Class.forName" description="This call to java.lang.Class.forName&#x28;&#x29; uses reflection in an unsafe manner. An attacker can specify the class name to be instantiated, which may create unexpected control flow paths through the application. Depending on how reflection is being used, the attack vector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpected manner. Even if the object does not implement the specified interface and a ClassCastException is thrown, the constructor of the untrusted class name will have already executed. The first argument to forName&#x28;&#x29; contains tainted data from the variable qualifiedClass. The tainted data originated from an earlier call to mx.isban.agave.configuracion.ConfiguracionUtil.inicializaClase.&#xd;&#xa;&#xd;&#xa;Validate the class name against a combination of white and black lists to ensure that only expected behavior is produced.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;470.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Unsafe_Reflection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="470" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConfiguracionUtil.java" line="56" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;configuracion&#x2f;" scope="mx.isban.agave.configuracion.ConfiguracionUtil" functionprototype="void inicializaClase&#x28;java.lang.String&#x29;" functionrelativelocation="11"/>
               <flaw severity="3" categoryname="Use of Externally-Controlled Input to Select Classes or Code &#x28;&#x27;Unsafe Reflection&#x27;&#x29;" count="19" issueid="35" module="AgaveWorkerCookie-1.1.3.jar&#x2f;cmpConfiguracion-1.2.0.jar" type="java.lang.Class.forName" description="This call to java.lang.Class.forName&#x28;&#x29; uses reflection in an unsafe manner. An attacker can specify the class name to be instantiated, which may create unexpected control flow paths through the application. Depending on how reflection is being used, the attack vector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpected manner. Even if the object does not implement the specified interface and a ClassCastException is thrown, the constructor of the untrusted class name will have already executed. The first argument to forName&#x28;&#x29; contains tainted data from the variable qualifiedClass. The tainted data originated from an earlier call to mx.isban.agave.configuracion.ConfiguracionUtil.destruyeContextoComponente.&#xd;&#xa;&#xd;&#xa;Validate the class name against a combination of white and black lists to ensure that only expected behavior is produced.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;470.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Unsafe_Reflection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="470" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ConfiguracionUtil.java" line="102" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;configuracion&#x2f;" scope="mx.isban.agave.configuracion.ConfiguracionUtil" functionprototype="void destruyeContextoComponente&#x28;java.lang.String&#x29;" functionrelativelocation="12"/>
               <flaw severity="3" categoryname="Use of Externally-Controlled Input to Select Classes or Code &#x28;&#x27;Unsafe Reflection&#x27;&#x29;" count="5" issueid="79" module="cmpMensajeria-1.2.1.jar&#x2f;cmpIsbanDataAccess-1.12.0.jar" type="java.lang.Class.forName" description="This call to java.lang.Class.forName&#x28;&#x29; uses reflection in an unsafe manner. An attacker can specify the class name to be instantiated, which may create unexpected control flow paths through the application. Depending on how reflection is being used, the attack vector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpected manner. Even if the object does not implement the specified interface and a ClassCastException is thrown, the constructor of the untrusted class name will have already executed. The first argument to forName&#x28;&#x29; contains tainted data from the variable lstrClassFactory. The tainted data originated from earlier calls to mx.isban.agave.logging.utils.VersionadorUtils.versionarComponente, and mx.isban.agave.logging.utils.VersionadorUtils.almacenaVersionEnFilesystem.&#xd;&#xa;&#xd;&#xa;Validate the class name against a combination of white and black lists to ensure that only expected behavior is produced.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;470.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Unsafe_Reflection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="470" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DataAccess.java" line="502" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;" scope="mx.isban.agave.dataaccess.DataAccess" functionprototype="void generaFactories&#x28;void&#x29;" functionrelativelocation="56"/>
               <flaw severity="3" categoryname="Use of Externally-Controlled Input to Select Classes or Code &#x28;&#x27;Unsafe Reflection&#x27;&#x29;" count="18" issueid="37" module="AgaveWorkerCookie-1.1.3.jar&#x2f;cmpLogging-1.1.0.jar" type="java.lang.Class.forName" description="This call to java.lang.Class.forName&#x28;&#x29; uses reflection in an unsafe manner. An attacker can specify the class name to be instantiated, which may create unexpected control flow paths through the application. Depending on how reflection is being used, the attack vector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpected manner. Even if the object does not implement the specified interface and a ClassCastException is thrown, the constructor of the untrusted class name will have already executed. The first argument to forName&#x28;&#x29; contains tainted data from the variable arg0. The tainted data originated from an earlier call to mx.isban.agave.logging.Log.getLogger.&#xd;&#xa;&#xd;&#xa;Validate the class name against a combination of white and black lists to ensure that only expected behavior is produced.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;470.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Unsafe_Reflection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="470" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Log.java" line="293" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;logging&#x2f;" scope="mx.isban.agave.logging.Log" functionprototype="org.apache.log4j.Logger getLogger&#x28;java.lang.String&#x29;" functionrelativelocation="26"/>
               <flaw severity="3" categoryname="Use of Externally-Controlled Input to Select Classes or Code &#x28;&#x27;Unsafe Reflection&#x27;&#x29;" count="1" issueid="80" module="cmpAuditoria-1.1.0.jar&#x2f;cmpMensajeria-1.2.1.jar" type="java.lang.Class.forName" description="This call to java.lang.Class.forName&#x28;&#x29; uses reflection in an unsafe manner. An attacker can specify the class name to be instantiated, which may create unexpected control flow paths through the application. Depending on how reflection is being used, the attack vector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpected manner. Even if the object does not implement the specified interface and a ClassCastException is thrown, the constructor of the untrusted class name will have already executed. The first argument to forName&#x28;&#x29; contains tainted data from the variable message.getDaoEjecutor&#x28;&#x29;. The tainted data originated from earlier calls to mx.isban.agave.logging.utils.VersionadorUtils.versionarComponente, and mx.isban.agave.logging.utils.VersionadorUtils.almacenaVersionEnFilesystem.&#xd;&#xa;&#xd;&#xa;Validate the class name against a combination of white and black lists to ensure that only expected behavior is produced.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;470.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Unsafe_Reflection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="470" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="MensajeClient.java" line="212" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;mensajeria&#x2f;" scope="mx.isban.agave.mensajeria.MensajeClient" functionprototype="void mensajeSincrono&#x28;commons.beans.MessageBean&#x29;" functionrelativelocation="6"/>
            </staticflaws>
         </cwe>
         <cwe cweid="601" cwename="URL Redirection to Untrusted Site &#x28;&#x27;Open Redirect&#x27;&#x29;" pcirelated="false" sans="864">
            <description>
               <text text="A web application accepts a untrusted input that specifies a link to an external site, and uses that link to generate a redirect.  This enables phishing attacks."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="URL Redirection to Untrusted Site &#x28;&#x27;Open Redirect&#x27;&#x29;" count="1" issueid="74" module="web-1.0.2.jar" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect&#x28;&#x29; contains a URL redirection to untrusted site flaw. Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.&#xd;&#xa;&#xd;&#xa;Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;601.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;URL-Redirector-Abuse&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="601" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="EnvironmentFilter.java" line="71" sourcefilepath="mx&#x2f;isban&#x2f;arquitectura&#x2f;seguridad&#x2f;config&#x2f;filter&#x2f;" scope="mx.isban.arquitectura.seguridad.config.filter.EnvironmentFilter" functionprototype="void doFilter&#x28;javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain&#x29;" functionrelativelocation="69"/>
               <flaw severity="3" categoryname="URL Redirection to Untrusted Site &#x28;&#x27;Open Redirect&#x27;&#x29;" count="1" issueid="101" module="cmpInterceptors-1.2.1.jar" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect&#x28;&#x29; contains a URL redirection to untrusted site flaw. Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.&#xd;&#xa;&#xd;&#xa;Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;601.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;URL-Redirector-Abuse&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="601" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FilterLogin.java" line="457" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;commons&#x2f;filters&#x2f;" scope="mx.isban.agave.commons.filters.FilterLogin" functionprototype="void expulsarSesionEnviarLogout&#x28;javax.servlet.ServletResponse, javax.servlet.http.HttpSession, java.lang.String, java.lang.String, boolean, sesiones.Sesiones&#x29;" functionrelativelocation="51"/>
               <flaw severity="3" categoryname="URL Redirection to Untrusted Site &#x28;&#x27;Open Redirect&#x27;&#x29;" count="1" issueid="118" module="cmpInterceptors-1.2.1.jar" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect&#x28;&#x29; contains a URL redirection to untrusted site flaw. Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.&#xd;&#xa;&#xd;&#xa;Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;601.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;URL-Redirector-Abuse&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="601" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FilterLogin.java" line="460" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;commons&#x2f;filters&#x2f;" scope="mx.isban.agave.commons.filters.FilterLogin" functionprototype="void expulsarSesionEnviarLogout&#x28;javax.servlet.ServletResponse, javax.servlet.http.HttpSession, java.lang.String, java.lang.String, boolean, sesiones.Sesiones&#x29;" functionrelativelocation="93"/>
               <flaw severity="3" categoryname="URL Redirection to Untrusted Site &#x28;&#x27;Open Redirect&#x27;&#x29;" count="1" issueid="110" module="cmpInterceptors-1.2.1.jar" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect&#x28;&#x29; contains a URL redirection to untrusted site flaw. Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.&#xd;&#xa;&#xd;&#xa;Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;601.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;URL-Redirector-Abuse&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="601" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FilterLogin.java" line="488" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;commons&#x2f;filters&#x2f;" scope="mx.isban.agave.commons.filters.FilterLogin" functionprototype="void expulsarSesionEnviarLogout&#x28;javax.servlet.ServletResponse, javax.servlet.http.HttpSession, java.lang.String, java.lang.String, boolean, sesiones.Sesiones, sesiones.beans.SesionDTO&#x29;" functionrelativelocation="66"/>
               <flaw severity="3" categoryname="URL Redirection to Untrusted Site &#x28;&#x27;Open Redirect&#x27;&#x29;" count="1" issueid="119" module="cmpInterceptors-1.2.1.jar" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect&#x28;&#x29; contains a URL redirection to untrusted site flaw. Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.&#xd;&#xa;&#xd;&#xa;Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;601.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;URL-Redirector-Abuse&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="601" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FilterLogin.java" line="491" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;commons&#x2f;filters&#x2f;" scope="mx.isban.agave.commons.filters.FilterLogin" functionprototype="void expulsarSesionEnviarLogout&#x28;javax.servlet.ServletResponse, javax.servlet.http.HttpSession, java.lang.String, java.lang.String, boolean, sesiones.Sesiones, sesiones.beans.SesionDTO&#x29;" functionrelativelocation="95"/>
               <flaw severity="3" categoryname="URL Redirection to Untrusted Site &#x28;&#x27;Open Redirect&#x27;&#x29;" count="1" issueid="115" module="cmpInterceptors-1.2.1.jar" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect&#x28;&#x29; contains a URL redirection to untrusted site flaw. Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.&#xd;&#xa;&#xd;&#xa;Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;601.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;URL-Redirector-Abuse&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="601" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FilterLogin.java" line="542" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;commons&#x2f;filters&#x2f;" scope="mx.isban.agave.commons.filters.FilterLogin" functionprototype="void reenviarInactivarSesion&#x28;javax.servlet.ServletResponse, javax.servlet.http.HttpSession, java.lang.String, java.lang.String, boolean, sesiones.Sesiones, sesiones.beans.SesionDTO&#x29;" functionrelativelocation="64"/>
               <flaw severity="3" categoryname="URL Redirection to Untrusted Site &#x28;&#x27;Open Redirect&#x27;&#x29;" count="1" issueid="105" module="cmpInterceptors-1.2.1.jar" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect&#x28;&#x29; contains a URL redirection to untrusted site flaw. Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.&#xd;&#xa;&#xd;&#xa;Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;601.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;URL-Redirector-Abuse&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="601" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FilterLogin.java" line="546" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;commons&#x2f;filters&#x2f;" scope="mx.isban.agave.commons.filters.FilterLogin" functionprototype="void reenviarInactivarSesion&#x28;javax.servlet.ServletResponse, javax.servlet.http.HttpSession, java.lang.String, java.lang.String, boolean, sesiones.Sesiones, sesiones.beans.SesionDTO&#x29;" functionrelativelocation="96"/>
               <flaw severity="3" categoryname="URL Redirection to Untrusted Site &#x28;&#x27;Open Redirect&#x27;&#x29;" count="1" issueid="111" module="cmpInterceptors-1.2.1.jar" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect&#x28;&#x29; contains a URL redirection to untrusted site flaw. Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.&#xd;&#xa;&#xd;&#xa;Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;601.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;URL-Redirector-Abuse&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="601" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FilterLoginSimulaSAM.java" line="135" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;commons&#x2f;filters&#x2f;" scope="mx.isban.agave.commons.filters.FilterLoginSimulaSAM" functionprototype="void doFilter&#x28;javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain&#x29;" functionrelativelocation="57"/>
               <flaw severity="3" categoryname="URL Redirection to Untrusted Site &#x28;&#x27;Open Redirect&#x27;&#x29;" count="1" issueid="114" module="cmpInterceptors-1.2.1.jar" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect&#x28;&#x29; contains a URL redirection to untrusted site flaw. Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.&#xd;&#xa;&#xd;&#xa;Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;601.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;URL-Redirector-Abuse&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="601" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FilterLoginSimulaSAM.java" line="164" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;commons&#x2f;filters&#x2f;" scope="mx.isban.agave.commons.filters.FilterLoginSimulaSAM" functionprototype="void doFilter&#x28;javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain&#x29;" functionrelativelocation="94"/>
               <flaw severity="3" categoryname="URL Redirection to Untrusted Site &#x28;&#x27;Open Redirect&#x27;&#x29;" count="1" issueid="73" module="web-1.0.2.jar&#x2f;IsbSecurityFilter-1.0.1.jar" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect&#x28;&#x29; contains a URL redirection to untrusted site flaw. Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.&#xd;&#xa;&#xd;&#xa;Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;601.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;URL-Redirector-Abuse&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="601" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="ppn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SecOutputFilter.java" line="232" sourcefilepath="mx&#x2f;isban&#x2f;security&#x2f;components&#x2f;" scope="mx.isban.security.components.SecOutputFilter&#x24;WrapperRsSecured" functionprototype="void sendRedirect&#x28;java.lang.String&#x29;" functionrelativelocation="43"/>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <severity level="2">
      <category categoryid="7" categoryname="API Abuse" pcirelated="false">
         <desc>
            <para text="An API is a contract between a caller and a callee. Incorrect usage of certain API functions can result in exploitable security vulnerabilities."/>
            <para text="The most common forms of API abuse are caused by the caller failing to honor its end of this contract.  For example, if a program fails to call chdir&#x28;&#x29; after calling chroot&#x28;&#x29;, it violates the contract that specifies how to change the active root directory in a secure fashion.  Providing too few arguments to a varargs function such as printf&#x28;&#x29; also violates the API contract and will cause the missing parameters to be populated with unexpected data from the stack."/>
            <para text="Another common mishap is when the caller makes false assumptions about the callee&#x27;s behavior.  One example of this is when a caller expects a DNS-related function to return trustworthy information that can be used for authentication purposes.  This is a bad assumption because DNS responses can be easily spoofed."/>
         </desc>
         <recommendations>
            <para text="When calling API functions, be sure to fully understand and adhere to the specifications to avoid introducing security vulnerabilities.  Do not make assumptions about trustworthiness of the data returned from API calls or use the data in a context that was unintended by that API."/>
         </recommendations>
         <cwe cweid="245" cwename="J2EE Bad Practices&#x3a; Direct Management of Connections" pcirelated="false">
            <description>
               <text text="The J2EE application directly manages connections rather than using the container&#x27;s resource management facilities to obtain connections as specified in the J2EE standard.  Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Direct Management of Connections" count="2" issueid="61" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;cmpIsbanDataAccess-1.11.0.jar" type="java.sql.DriverManager.getConnection" description="This call to getConnection&#x28;&#x29; fails to use the J2EE container&#x27;s resource management facilities as required by the J2EE standard.&#xd;&#xa;&#xd;&#xa;Request the connection from the container rather than attempting to access it directly.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;245.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ServiceLocatorJDBC.java" line="168" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;factories&#x2f;jdbc&#x2f;" scope="mx.isban.agave.dataaccess.factories.jdbc.ServiceLocatorJDBC" functionprototype="java.sql.Connection getJDBCConnection&#x28;&#x29;" functionrelativelocation="49"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Direct Management of Connections" count="2" issueid="52" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;cmpIsbanDataAccess-1.11.0.jar" type="java.sql.DriverManager.getConnection" description="This call to getConnection&#x28;&#x29; fails to use the J2EE container&#x27;s resource management facilities as required by the J2EE standard.&#xd;&#xa;&#xd;&#xa;Request the connection from the container rather than attempting to access it directly.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;245.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ServiceLocatorJDBC.java" line="172" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;factories&#x2f;jdbc&#x2f;" scope="mx.isban.agave.dataaccess.factories.jdbc.ServiceLocatorJDBC" functionprototype="java.sql.Connection getJDBCConnection&#x28;&#x29;" functionrelativelocation="82"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="17" categoryname="Code Quality" pcirelated="false">
         <desc>
            <para text="Code quality issues stem from failure to follow good coding practices and can lead to unpredictable behavior. These may include but are not limited to&#x3a;">
               <bulletitem text="Neglecting to remove debug code or dead code"/>
               <bulletitem text="Improper resource management, such as using a pointer after it has been freed"/>
               <bulletitem text="Using the incorrect operator to compare objects"/>
               <bulletitem text="Failing to follow an API or framework specification"/>
               <bulletitem text="Using a language feature or API in an unintended manner"/>
            </para>
            <para text="While code quality flaws are generally less severe than other categories and usually are not directly exploitable, they may serve as indicators that developers are not following practices that increase the reliability and security of an application.  For an attacker, code quality issues may provide an opportunity to stress the application in unexpected ways."/>
         </desc>
         <recommendations>
            <para text="The wide variance of code quality issues makes it impractical to generalize how these issues should be addressed.  Refer to individual categories for specific recommendations. "/>
         </recommendations>
         <cwe cweid="597" cwename="Use of Wrong Operator in String Comparison" pcirelated="false" certjava="1136">
            <description>
               <text text="Using &#x27;&#x3d;&#x3d;&#x27; to compare two strings for equality or &#x27;&#x21;&#x3d;&#x27; for inequality actually compares the object references rather than their values.  It is unlikely that this reflects the intended application logic."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="187" module="MicroSitioBETEAREJB.ear&#x2f;MicroSitioBETEJB-1.0.jar" type="span.neq" description="Using &#x27;&#x21;&#x3d;&#x27; to compare two strings for inequality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.&#xd;&#xa;&#xd;&#xa;Use the equals&#x28;&#x29; method to compare strings, not the &#x27;&#x21;&#x3d;&#x27; operator.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;597.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BOBuscadorBeneficiariosImpl.java" line="128" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;buscadores&#x2f;ejb&#x2f;impl&#x2f;" scope="mx.isban.bet.micrositio.buscadores.ejb.impl.BOBuscadorBeneficiariosImpl" functionprototype="beans.SearchBeneficiarioBean buscarBeneficiarios&#x28;java.util.Map, java.util.Map, agave.commons.beans.ArchitechSessionBean&#x29;" functionrelativelocation="68"/>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="173" module="MicroSitioBETEAREJB.ear&#x2f;MicroSitioBETEJB-1.0.jar" type="span.neq" description="Using &#x27;&#x21;&#x3d;&#x27; to compare two strings for inequality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.&#xd;&#xa;&#xd;&#xa;Use the equals&#x28;&#x29; method to compare strings, not the &#x27;&#x21;&#x3d;&#x27; operator.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;597.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BOPatronFirmasImpl.java" line="317" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;comunes&#x2f;patron&#x2f;firmas&#x2f;ejb&#x2f;impl&#x2f;" scope="mx.isban.bet.micrositio.comunes.patron.firmas.ejb.impl.BOPatronFirmasImpl" functionprototype="java.lang.String stepStart&#x28;agave.commons.beans.ArchitechSessionBean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="52"/>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="183" module="MicroSitioBETEAREJB.ear&#x2f;MicroSitioBETEJB-1.0.jar" type="span.equ" description="Using &#x27;&#x3d;&#x3d;&#x27; to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.&#xd;&#xa;&#xd;&#xa;Use the equals&#x28;&#x29; method to compare strings, not the &#x27;&#x3d;&#x3d;&#x27; operator.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;597.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BOPatronFirmasImpl.java" line="585" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;comunes&#x2f;patron&#x2f;firmas&#x2f;ejb&#x2f;impl&#x2f;" scope="mx.isban.bet.micrositio.comunes.patron.firmas.ejb.impl.BOPatronFirmasImpl" functionprototype="net.sf.json.JSONObject stepResume&#x28;agave.commons.beans.ArchitechSessionBean, patron.bean.ResumeRequestBean, java.lang.String&#x29;" functionrelativelocation="29"/>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="176" module="MicroSitioBETEAREJB.ear&#x2f;MicroSitioBETEJB-1.0.jar" type="span.neq" description="Using &#x27;&#x21;&#x3d;&#x27; to compare two strings for inequality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.&#xd;&#xa;&#xd;&#xa;Use the equals&#x28;&#x29; method to compare strings, not the &#x27;&#x21;&#x3d;&#x27; operator.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;597.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BOPatronFirmasImpl.java" line="655" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;comunes&#x2f;patron&#x2f;firmas&#x2f;ejb&#x2f;impl&#x2f;" scope="mx.isban.bet.micrositio.comunes.patron.firmas.ejb.impl.BOPatronFirmasImpl" functionprototype="java.lang.String stepRSA1&#x28;agave.commons.beans.ArchitechSessionBean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, datospersonales.beans.DatosVoDatosPersonalesBean, java.lang.String&#x29;" functionrelativelocation="0"/>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="181" module="MicroSitioBETEAREJB.ear&#x2f;MicroSitioBETEJB-1.0.jar" type="span.neq" description="Using &#x27;&#x21;&#x3d;&#x27; to compare two strings for inequality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.&#xd;&#xa;&#xd;&#xa;Use the equals&#x28;&#x29; method to compare strings, not the &#x27;&#x21;&#x3d;&#x27; operator.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;597.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BOPatronFirmasImpl.java" line="704" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;comunes&#x2f;patron&#x2f;firmas&#x2f;ejb&#x2f;impl&#x2f;" scope="mx.isban.bet.micrositio.comunes.patron.firmas.ejb.impl.BOPatronFirmasImpl" functionprototype="java.lang.String stepRSA2&#x28;agave.commons.beans.ArchitechSessionBean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, &#x28;2 more parameters&#x29;&#x29;" functionrelativelocation="0"/>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="172" module="MicroSitioBETEAREJB.ear&#x2f;MicroSitioBETEJB-1.0.jar" type="span.neq" description="Using &#x27;&#x21;&#x3d;&#x27; to compare two strings for inequality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.&#xd;&#xa;&#xd;&#xa;Use the equals&#x28;&#x29; method to compare strings, not the &#x27;&#x21;&#x3d;&#x27; operator.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;597.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BOPatronFirmasImpl.java" line="754" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;comunes&#x2f;patron&#x2f;firmas&#x2f;ejb&#x2f;impl&#x2f;" scope="mx.isban.bet.micrositio.comunes.patron.firmas.ejb.impl.BOPatronFirmasImpl" functionprototype="java.lang.String stepLoad&#x28;agave.commons.beans.ArchitechSessionBean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="12"/>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="170" module="MicroSitioBETEAREJB.ear&#x2f;MicroSitioBETEJB-1.0.jar" type="span.neq" description="Using &#x27;&#x21;&#x3d;&#x27; to compare two strings for inequality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.&#xd;&#xa;&#xd;&#xa;Use the equals&#x28;&#x29; method to compare strings, not the &#x27;&#x21;&#x3d;&#x27; operator.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;597.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BOPatronFirmasImpl.java" line="782" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;comunes&#x2f;patron&#x2f;firmas&#x2f;ejb&#x2f;impl&#x2f;" scope="mx.isban.bet.micrositio.comunes.patron.firmas.ejb.impl.BOPatronFirmasImpl" functionprototype="java.lang.String stepFileData&#x28;agave.commons.beans.ArchitechSessionBean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="9"/>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="165" module="MicroSitioBETEAREJB.ear&#x2f;MicroSitioBETEJB-1.0.jar" type="span.neq" description="Using &#x27;&#x21;&#x3d;&#x27; to compare two strings for inequality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.&#xd;&#xa;&#xd;&#xa;Use the equals&#x28;&#x29; method to compare strings, not the &#x27;&#x21;&#x3d;&#x27; operator.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;597.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BOPatronFirmasImpl.java" line="830" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;comunes&#x2f;patron&#x2f;firmas&#x2f;ejb&#x2f;impl&#x2f;" scope="mx.isban.bet.micrositio.comunes.patron.firmas.ejb.impl.BOPatronFirmasImpl" functionprototype="java.lang.String stepCancel&#x28;agave.commons.beans.ArchitechSessionBean, java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="14"/>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="167" module="MicroSitioBETEAREJB.ear&#x2f;MicroSitioBETEJB-1.0.jar" type="span.equ" description="Using &#x27;&#x3d;&#x3d;&#x27; to compare two strings for equality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.&#xd;&#xa;&#xd;&#xa;Use the equals&#x28;&#x29; method to compare strings, not the &#x27;&#x3d;&#x3d;&#x27; operator.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;597.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BOPatronFirmasImpl.java" line="858" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;comunes&#x2f;patron&#x2f;firmas&#x2f;ejb&#x2f;impl&#x2f;" scope="mx.isban.bet.micrositio.comunes.patron.firmas.ejb.impl.BOPatronFirmasImpl" functionprototype="java.lang.String stepPing&#x28;agave.commons.beans.ArchitechSessionBean, java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="23"/>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="419" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war" type="span.neq" description="Using &#x27;&#x21;&#x3d;&#x27; to compare two strings for inequality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.&#xd;&#xa;&#xd;&#xa;Use the equals&#x28;&#x29; method to compare strings, not the &#x27;&#x21;&#x3d;&#x27; operator.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;597.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="VOCommonsController.java" line="315" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;ventana&#x2f;operativa&#x2f;controller&#x2f;" scope="mx.isban.bet.micrositio.ventana.operativa.controller.VOCommonsController" functionprototype="org.springframework.http.ResponseEntity cargaLocalStorage&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpSession&#x29;" functionrelativelocation="29"/>
               <flaw severity="2" categoryname="Use of Wrong Operator in String Comparison" count="1" issueid="168" module="MicroSitioBETEAREJB.ear&#x2f;MicroSitioBETEJB-1.0.jar" type="span.neq" description="Using &#x27;&#x21;&#x3d;&#x27; to compare two strings for inequality actually compares the object references rather than their values. It is unlikely that this reflects the intended application logic.&#xd;&#xa;&#xd;&#xa;Use the equals&#x28;&#x29; method to compare strings, not the &#x27;&#x21;&#x3d;&#x27; operator.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;597.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="597" remediationeffort="1" exploitLevel="-1" categoryid="17" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BOPagoReferenciadoImpl.java" line="768" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;recaudaciones&#x2f;ejb&#x2f;" scope="mx.isban.bet.micrositio.recaudaciones.ejb.BOPagoReferenciadoImpl" functionprototype="void generarActivityFUA664&#x28;comunes.activity.beans.ActivityRequestBean, java.util.Map, java.util.Map, beans.PagoGenericoBean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, agave.commons.beans.ArchitechSessionBean, java.lang.String, &#x28;2 more parameters&#x29;&#x29;" functionrelativelocation="90"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="12" categoryname="Cryptographic Issues" pcirelated="false">
         <desc>
            <para text="Applications commonly use cryptography to implement authentication mechanisms and to ensure the confidentiality and integrity of sensitive data, both in transit and at rest.  The proper and accurate implementation of cryptography is extremely critical to its efficacy.  Configuration or coding mistakes as well as incorrect assumptions may negate a large degree of the protection it affords, leaving the crypto implementation vulnerable to attack."/>
            <para text="Common cryptographic mistakes include, but are not limited to, selecting weak keys or weak cipher modes, unintentionally exposing sensitive cryptographic data, using predictable entropy sources, and mismanaging or hard-coding keys.  "/>
            <para text="Developers often make the dangerous assumption that they can improve security by designing their own cryptographic algorithm&#x3b; however, one of the basic tenets of cryptography is that any cipher whose effectiveness is reliant on the secrecy of the algorithm is fundamentally flawed.  "/>
         </desc>
         <recommendations>
            <para text="Select the appropriate type of cryptography for the intended purpose.  Avoid proprietary encryption algorithms as they typically rely on &#x22;security through obscurity&#x22; rather than sound mathematics.  Select key sizes appropriate for the data being protected&#x3b; for high assurance applications, 256-bit symmetric keys and 2048-bit asymmetric keys are sufficient.  Follow best practices for key storage, and ensure that plaintext data and key material are not inadvertently exposed."/>
         </recommendations>
         <cwe cweid="329" cwename="Not Using a Random IV with CBC Mode" pcirelated="false">
            <description>
               <text text="Not using a random initialization Vector &#x28;IV&#x29; with Cipher Block Chaining &#x28;CBC&#x29; Mode or other feedback-driven modes causes algorithms to be susceptible to dictionary attacks."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="Not Using a Random IV with CBC Mode" count="1" issueid="188" module="MicroSitioBETEAREJB.ear&#x2f;MicroSitioBETEJB-1.0.jar" type="javax.crypto.Cipher.init" description="The javax.crypto.Cipher.init&#x28;&#x29; method uses a hard-coded initialization vector &#x28;IV&#x29; that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded key IV with Cipher Block Chaining &#x28;CBC&#x29; Mode or other feedback-driven modes increases the possibility that encrypted data may be recovered. Moreover, the IV cannot be changed without patching the software. If a hard-coded IV is compromised, deployed instances of the product may be vulnerable to dictionary attacks.&#xd;&#xa;&#xd;&#xa;Ensure that IVs are unique and unpredictable. They do not need to be kept secret.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;329.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="329" remediationeffort="2" exploitLevel="0" categoryid="12" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="AesCryptoService.java" line="130" sourcefilepath="mx&#x2f;isban&#x2f;bet&#x2f;micrositio&#x2f;utils&#x2f;" scope="mx.isban.bet.micrositio.utils.AesCryptoService" functionprototype="java.lang.String aesEncrypt&#x28;java.lang.String&#x29;" functionrelativelocation="26"/>
            </staticflaws>
         </cwe>
         <cwe cweid="614" cwename="Sensitive Cookie in HTTPS Session Without &#x27;Secure&#x27; Attribute" pcirelated="true" owasp="1029" sans="311">
            <description>
               <text text="Setting the Secure attribute on an HTTP cookie instructs the web browser to send it only over a secure channel, such as a TLS connection.  Issuing a cookie without the Secure attribute allows the browser to transmit it over unencrypted connections, which are susceptible to eavesdropping.  It is particularly important to set the Secure attribute on any cookies containing sensitive data, such as authentication information &#x28;e.g. &#x22;remember me&#x22; style functionality&#x29;."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without &#x27;Secure&#x27; Attribute" count="2" issueid="8" module="IsbSecuritySSOFilter-1.0.6.jar&#x2f;ssocomunes-1.0.2.jar" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie&#x28;&#x29; adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.&#xd;&#xa;&#xd;&#xa;Set the Secure attribute for all cookies used by HTTPS sessions.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;614.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Insufficient-Transport-Layer-Protection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="CookieExtractor.java" line="84" sourcefilepath="mx&#x2f;isban&#x2f;security&#x2f;filterng&#x2f;extractor&#x2f;" scope="mx.isban.security.filterng.extractor.CookieExtractor" functionprototype="void regeneraToken&#x28;java.lang.String, SecurityWorker, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.String&#x29;" functionrelativelocation="86"/>
               <flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without &#x27;Secure&#x27; Attribute" count="1" issueid="113" module="cmpInterceptors-1.2.1.jar" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie&#x28;&#x29; adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.&#xd;&#xa;&#xd;&#xa;Set the Secure attribute for all cookies used by HTTPS sessions.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;614.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Insufficient-Transport-Layer-Protection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FilterLoginSimulaSAM.java" line="196" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;commons&#x2f;filters&#x2f;" scope="mx.isban.agave.commons.filters.FilterLoginSimulaSAM" functionprototype="java.lang.String getIdSesionDesdeCookie&#x28;javax.servlet.ServletRequest, javax.servlet.ServletResponse&#x29;" functionrelativelocation="64"/>
               <flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without &#x27;Secure&#x27; Attribute" count="1" issueid="106" module="cmpInterceptors-1.2.1.jar" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie&#x28;&#x29; adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.&#xd;&#xa;&#xd;&#xa;Set the Secure attribute for all cookies used by HTTPS sessions.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;614.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Insufficient-Transport-Layer-Protection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="FilterLoginSimulaSAM.java" line="225" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;commons&#x2f;filters&#x2f;" scope="mx.isban.agave.commons.filters.FilterLoginSimulaSAM" functionprototype="void eliminaCookie&#x28;javax.servlet.ServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="88"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="8" categoryname="Information Leakage" pcirelated="false">
         <desc>
            <para text="An information leak is the intentional or unintentional disclosure of information that is either regarded as sensitive within the product&#x27;s own functionality or provides information about the product or its environment that could be useful in an attack.  Information leakage issues are commonly overlooked because they cannot be used to directly exploit the application.  However, information leaks should be viewed as building blocks that an attacker uses to carry out other, more complicated attacks."/>
            <para text="There are many different types of problems that involve information leaks, with severities that can range widely depending on the type of information leaked and the context of the information with respect to the application.  Common sources of information leakage include, but are not limited to&#x3a;">
               <bulletitem text="Source code disclosure"/>
               <bulletitem text="Browsable directories"/>
               <bulletitem text="Log files or backup files in web-accessible directories"/>
               <bulletitem text="Unfiltered backend error messages"/>
               <bulletitem text="Exception stack traces"/>
               <bulletitem text="Server version information"/>
               <bulletitem text="Transmission of uninitialized memory containing sensitive data"/>
            </para>
         </desc>
         <recommendations>
            <para text="Configure applications and servers to return generic error messages and to suppress stack traces from being displayed to end users.  Ensure that errors generated by the application do not provide insight into specific backend issues.  "/>
            <para text="Remove all backup files, binary archives, alternate versions of files, and test files from web-accessible directories of production servers.  The only files that should be present in the application&#x27;s web document root are files required by the application.  Ensure that deployment procedures include the removal of these file types by an administrator.  Keep web and application servers fully patched to minimize exposure to publicly-disclosed information leakage vulnerabilities."/>
         </recommendations>
         <cwe cweid="209" cwename="Generation of Error Message Containing Sensitive Information" pcirelated="true" owasp="1032" certcpp="880">
            <description>
               <text text="The software generates an error message that includes sensitive information about its environment, users, or associated data.  The sensitive information may be valuable information on its own &#x28;such as a password&#x29;, or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack.  For example, file locations disclosed by an exception stack trace may be leveraged by an attacker to exploit a path traversal issue elsewhere in the application."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="Generation of Error Message Containing Sensitive Information" count="2" issueid="9" module="IsbSecuritySSOFilter-1.0.6.jar" type="javax.servlet.http.HttpServletResponse.sendError" description="The application calls the javax.servlet.http.HttpServletResponse.sendError&#x28;&#x29; function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The second argument to sendError&#x28;&#x29; contains data from an error message &#x28;possibly containing untrusted data&#x29; from the variable param. The data from an error message &#x28;possibly containing untrusted data&#x29; originated from an earlier call to java.lang.Throwable.getMessage.&#xd;&#xa;&#xd;&#xa;Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;209.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="true" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ResponseUtil.java" line="19" sourcefilepath="mx&#x2f;isban&#x2f;security&#x2f;filterng&#x2f;utils&#x2f;" scope="mx.isban.security.filterng.utils.ResponseUtil" functionprototype="void sendErrorRedirect&#x28;java.lang.String, java.lang.String, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="79"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="14" categoryname="Time and State" pcirelated="false">
         <desc>
            <para text="Time and State flaws are related to unexpected interactions between threads, processes, time, and information. These interactions happen through shared state&#x3a; semaphores, variables, the filesystem, and basically anything that can store information.  Vulnerabilities occur when there is a discrepancy between the programmer&#x27;s assumption of how a program executes and what happens in reality. "/>
            <para text="State issues result from improper management or invalid assumptions about system state, such as assuming mutable objects are immutable.  Though these conditions are less commonly exploited by attackers, state issues can lead to unpredictable or undefined application behavior."/>
         </desc>
         <recommendations>
            <para text="Limit the interleaving of operations on resources from multiple processes.  Use locking mechanisms to protect resources effectively.  Follow best practices with respect to mutable objects and internal references.  Pay close attention to asynchronous actions in processes and make copious use of sanity checks in systems that may be subject to synchronization errors."/>
         </recommendations>
         <cwe cweid="382" cwename="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" pcirelated="false" certjava="1141">
            <description>
               <text text="A web applications should not attempt to shut down its container.  A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application.  Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Use of System.exit&#x28;&#x29;" count="2" issueid="128" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;sbp-1.3.5-client.jar" type="exit" description="A J2EE application should not attempt to shut down its container. A call to System.exit&#x28;&#x29; is probably part of leftover debug code or code imported from a non-J2EE application. Non-web applications may contain a main&#x28;&#x29; method that calls System.exit&#x28;&#x29;, but generally should not call it from other locations in the code.&#xd;&#xa;&#xd;&#xa;Ensure that System.exit&#x28;&#x29; is never called by web applications.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;382.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="382" remediationeffort="1" exploitLevel="-1" categoryid="14" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="WsSbpServer.java" line="61" sourcefilepath="com&#x2f;santander&#x2f;sbp&#x2f;security&#x2f;server&#x2f;ws&#x2f;" scope="com.santander.sbp.security.server.ws.WsSbpServer" functionprototype="void onError&#x28;org.java_websocket.WebSocket, java.lang.Exception&#x29;" functionrelativelocation="86"/>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <severity level="1"/>
   <severity level="0">
      <category categoryid="17" categoryname="Code Quality" pcirelated="false">
         <desc>
            <para text="Code quality issues stem from failure to follow good coding practices and can lead to unpredictable behavior. These may include but are not limited to&#x3a;">
               <bulletitem text="Neglecting to remove debug code or dead code"/>
               <bulletitem text="Improper resource management, such as using a pointer after it has been freed"/>
               <bulletitem text="Using the incorrect operator to compare objects"/>
               <bulletitem text="Failing to follow an API or framework specification"/>
               <bulletitem text="Using a language feature or API in an unintended manner"/>
            </para>
            <para text="While code quality flaws are generally less severe than other categories and usually are not directly exploitable, they may serve as indicators that developers are not following practices that increase the reliability and security of an application.  For an attacker, code quality issues may provide an opportunity to stress the application in unexpected ways."/>
         </desc>
         <recommendations>
            <para text="The wide variance of code quality issues makes it impractical to generalize how these issues should be addressed.  Refer to individual categories for specific recommendations. "/>
         </recommendations>
         <cwe cweid="404" cwename="Improper Resource Shutdown or Release" pcirelated="false" certc="1162" certcpp="876" certjava="1147">
            <description>
               <text text="The application fails to release &#x28;or incorrectly releases&#x29; a system resource before it is made available for re-use.  This condition often occurs with resources such as database connections or file handles.  Most unreleased resource issues result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, it may be possible to launch a denial of service attack by depleting the resource pool."/>
            </description>
            <staticflaws>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="2" issueid="55" module="MicroSitioBETEARWeb.ear&#x2f;MicroSitioBETWeb-1.0.war&#x2f;cmpIsbanDataAccess-1.11.0.jar" type="java.io.BufferedWriter.&#x21;operator_javanewinit" description="The program fails to release or incorrectly releases the variable bWriter, which was previously allocated by a call to java.io.BufferedWriter.&#x21;operator_javanewinit&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UtilsOut.java" line="209" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;util&#x2f;parser&#x2f;" scope="mx.isban.agave.dataaccess.util.parser.UtilsOut" functionprototype="void crearYEscribirArchivoStd&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="9"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="8" issueid="64" module="cmpInterfacesToken-1.1.0.jar&#x2f;cmpChannelDatabase-1.11.0.jar" type="java.sql.Statement.executeQuery" description="The program fails to release or incorrectly releases the variable lobjResultSet, which was previously allocated by a call to java.sql.Statement.executeQuery&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DataAccessDataBaseDAO.java" line="170" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;dataaccess&#x2f;channels&#x2f;database&#x2f;dao&#x2f;" scope="mx.isban.agave.dataaccess.channels.database.dao.DataAccessDataBaseDAO" functionprototype="boolean executeQuery&#x28;java.lang.String&#x29;" functionrelativelocation="30"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="2" issueid="88" module="cmpEjecutoresMensajeria-1.1.1.jar&#x2f;cmpSMSEmail-1.1.0.jar" type="java.io.BufferedReader.&#x21;operator_javanewinit" description="The program fails to release or incorrectly releases the variable bf, which was previously allocated by a call to java.io.BufferedReader.&#x21;operator_javanewinit&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-05-07 21&#x3a;42&#x3a;39 UTC" remediation_status="Fixed" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SMSEmail.java" line="237" sourcefilepath="mx&#x2f;isban&#x2f;agave&#x2f;cmpSMSEmail&#x2f;cliente&#x2f;" scope="mx.isban.agave.cmpSMSEmail.cliente.SMSEmail" functionprototype="void leeArchivos&#x28;java.util.ArrayList&#x29;" functionrelativelocation="45"/>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <flaw-status new="2" reopen="0" open="124" cannot-reproduce="0" fixed="304" total="126" not_mitigated="126" sev-1-change="0" sev-2-change="-5" sev-3-change="-290" sev-4-change="-7" sev-5-change="0"/>
   <software_composition_analysis third_party_components="113" violate_policy="true" components_violated_policy="32" blocklisted_components="0">
      <vulnerable_components>
         <component component_id="050ca016-80eb-4ab7-bc9d-6f1767bf108d" file_name="nekohtml-1.9.16.jar" sha1="61e35204e5a8fdb864152f84e2e3b33ab56f50ab" vulnerabilities="0" max_cvss_score="" version="1.9.16" library="nekohtml" vendor="net.sourceforge.nekohtml" description="An HTML parser and tag balancer." added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;nekohtml-1.9.16.jar"/>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;nekohtml-1.9.16.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="0a097a0f-0d07-48c0-bf6c-1e7b4017f8f6" file_name="bcprov-jdk14-138.jar" sha1="de366c3243a586eb3c0e2bcde1ed9bb1bfb985ff" vulnerabilities="13" max_cvss_score="7.5" version="1.38" library="bcprov-jdk14" vendor="org.bouncycastle" description="The Bouncy Castle Crypto package is a Java implementation of cryptographic algorithms. This jar contains JCE provider and lightweight API for the Bouncy Castle Cryptography APIs for JDK 1.4." added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;bcprov-jdk14-138.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;bcprov-jdk14-138.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;bcprov-jdk14-138.jar"/>
            </file_paths>
            <licenses>
               <license name="MIT License" spdx_id="MIT" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;MIT.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2013-1624" cvss_score="4.0" severity="2" cwe_id="CWE-310" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="The TLS implementation in the Bouncy Castle Java library before 1.48 and C&#x23; library before 1.8 does not properly consider timing side-channel attacks on a noncompliant MAC check operation during the processing of malformed CBC padding, which allows remote attackers to conduct distinguishing attacks and plaintext-recovery attacks via statistical analysis of timing data for crafted packets, a related issue to CVE-2013-0169." severity_desc="Low" mitigation="false" vulnerability_affects_policy_compliance="false"/>
               <vulnerability cve_id="CVE-2015-7940" cvss_score="5.0" severity="3" cwe_id="CWE-310" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="The Bouncy Castle Java library before 1.51 does not validate a point is withing the elliptic curve, which makes it easier for remote attackers to obtain private keys via a series of crafted elliptic curve Diffie Hellman &#x28;ECDH&#x29; key exchanges, aka an &#x22;invalid curve attack.&#x22;" severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-1000338" cvss_score="5.0" severity="3" cwe_id="CWE-347" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="In Bouncy Castle JCE Provider version 1.55 and earlier the DSA does not fully validate ASN.1 encoding of signature on verification. It is possible to inject extra elements in the sequence making up the signature and still have it validate, which in some cases may allow the introduction of &#x27;invisible&#x27; data into a signed structure." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-1000339" cvss_score="5.0" severity="3" cwe_id="CWE-327" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="In the Bouncy Castle JCE Provider version 1.55 and earlier the primary engine class used for AES was AESFastEngine. Due to the highly table driven approach used in the algorithm it turns out that if the data channel on the CPU can be monitored the lookup table accesses are sufficient to leak information on the AES key being used. There was also a leak in AESEngine although it was substantially less. AESEngine has been modified to remove any signs of leakage &#x28;testing carried out on Intel X86-64&#x29; and is now the primary AES class for the BC JCE provider from 1.56. Use of AESFastEngine is now only recommended where otherwise deemed appropriate." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-1000341" cvss_score="4.3" severity="3" cwe_id="CWE-358" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="In the Bouncy Castle JCE Provider version 1.55 and earlier DSA signature generation is vulnerable to timing attack. Where timings can be closely observed for the generation of signatures, the lack of blinding in 1.55, or earlier, may allow an attacker to gain information about the signature&#x27;s k value and ultimately the private value as well." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-1000342" cvss_score="5.0" severity="3" cwe_id="CWE-347" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="In the Bouncy Castle JCE Provider version 1.55 and earlier ECDSA does not fully validate ASN.1 encoding of signature on verification. It is possible to inject extra elements in the sequence making up the signature and still have it validate, which in some cases may allow the introduction of &#x27;invisible&#x27; data into a signed structure." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-1000343" cvss_score="5.0" severity="3" cwe_id="CWE-326" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="In the Bouncy Castle JCE Provider version 1.55 and earlier the DSA key pair generator generates a weak private key if used with default values. If the JCA key pair generator is not explicitly initialised with DSA parameters, 1.55 and earlier generates a private value assuming a 1024 bit key size. In earlier releases this can be dealt with by explicitly passing parameters to the key pair generator." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-1000344" cvss_score="5.8" severity="3" cwe_id="CWE-358" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="In the Bouncy Castle JCE Provider version 1.55 and earlier the DHIES implementation allowed the use of ECB mode. This mode is regarded as unsafe and support for it has been removed from the provider." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-1000345" cvss_score="4.3" severity="3" cwe_id="CWE-326" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="In the Bouncy Castle JCE Provider version 1.55 and earlier the DHIES&#x2f;ECIES CBC mode vulnerable to padding oracle attack. For BC 1.55 and older, in an environment where timings can be easily observed, it is possible with enough observations to identify when the decryption is failing due to padding." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-1000346" cvss_score="4.3" severity="3" cwe_id="CWE-20" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="In the Bouncy Castle JCE Provider version 1.55 and earlier the other party DH public key is not fully validated. This can cause issues as invalid keys can be used to reveal details about the other party&#x27;s private key where static Diffie-Hellman is in use. As of release 1.56 the key parameters are checked on agreement calculation." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-1000352" cvss_score="5.8" severity="3" cwe_id="CWE-358" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="In the Bouncy Castle JCE Provider version 1.55 and earlier the ECIES implementation allowed the use of ECB mode. This mode is regarded as unsafe and support for it has been removed from the provider." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2018-1000613" cvss_score="7.5" severity="4" cwe_id="CWE-502" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="Legion of the Bouncy Castle Legion of the Bouncy Castle Java Cryptography APIs 1.58 up to but not including 1.60 contains a CWE-470&#x3a; Use of Externally-Controlled Input to Select Classes or Code &#x28;&#x27;Unsafe Reflection&#x27;&#x29; vulnerability in XMSS&#x2f;XMSS&#x5e;MT private key deserialization that can result in Deserializing an XMSS&#x2f;XMSS&#x5e;MT private key can result in the execution of unexpected code. This attack appear to be exploitable via A handcrafted private key can include references to unexpected classes which will be picked up from the class path for the executing application. This vulnerability appears to have been fixed in 1.60 and later." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2018-5382" cvss_score="7.5" severity="4" cwe_id="CWE-310" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="Bouncy Castle is vulnerable to hash collision attacks. The library keystore files uses a HMAC hash that is only 16 bits long, allowing a malicious user to retrieve the password used for keystore integrity verification checks. This vulnerability only affects users of the &#x60;BKS-V1&#x60; keystore format, which was re-introduced since 1.49." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="0abeacf4-6182-4e1d-901e-124c9d01a236" file_name="xalan-2.7.0.jar" sha1="a33c0097f1c70b20fa7ded220ea317eb3500515e" vulnerabilities="1" max_cvss_score="7.5" version="2.7.0" library="xalan" vendor="xalan" description="" added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;xalan-2.7.0.jar"/>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;xalan-2.7.0.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 1.1" spdx_id="Apache-1.1" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-1.1.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2014-0107" cvss_score="7.5" severity="4" cwe_id="CWE-264" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="The TransformerFactory in Apache Xalan-Java before 2.7.2 does not properly restrict access to certain properties when FEATURE_SECURE_PROCESSING is enabled, which allows remote attackers to bypass expected restrictions and load arbitrary classes or access external resources via a crafted &#x28;1&#x29; xalan&#x3a;content-header, &#x28;2&#x29; xalan&#x3a;entities, &#x28;3&#x29; xslt&#x3a;content-header, or &#x28;4&#x29; xslt&#x3a;entities property, or a Java property that is bound to the XSLT 1.0 system-property function." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="0b1f042a-0728-4208-85d5-a6213ab0d160" file_name="olap4j-1.2.0.jar" sha1="21d5b553313ef80fa366ffd4ed8645765b67fef6" vulnerabilities="0" max_cvss_score="" version="1.2.0" library="olap4j" vendor="org.olap4j" description="Open Java API for OLAP" added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;olap4j-1.2.0.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;olap4j-1.2.0.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;olap4j-1.2.0.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="0b2a75d4-9901-41c2-92b8-3aeb652d004d" file_name="commons-collections-3.2.2.jar" sha1="8ad72fe39fa8c91eaaf12aadb21e0c3661fe26d5" vulnerabilities="0" max_cvss_score="" version="3.2.2" library="commons-collections" vendor="commons-collections" description="Types that extend and augment the Java Collections Framework." added_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;commons-collections-3.2.2.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;commons-collections-3.2.2.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;commons-collections-3.2.2.jar"/>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;commons-collections-3.2.2.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;commons-collections-3.2.2.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="0b844337-0619-4c97-9d8c-05211344c808" file_name="commons-lang-2.6.jar" sha1="0ce1edb914c94ebc388f086c6827e8bdeec71ac2" vulnerabilities="0" max_cvss_score="" version="2.6" library="commons-lang" vendor="commons-lang" description="Commons Lang, a package of Java utility classes for the&#xa;        classes that are in java.lang&#x27;s hierarchy, or are considered to be so&#xa;        standard as to justify existence in java.lang." added_date="2020-05-07 21&#x3a;56&#x3a;45 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;commons-lang-2.6.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;commons-lang-2.6.jar"/>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;commons-lang-2.6.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;commons-lang-2.6.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;commons-lang-2.6.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="0c51c664-dfd1-42fb-a30c-2c9399ca8acf" file_name="spring-core-4.2.7.RELEASE.jar" sha1="3d08f6f68e0654bf4be50559aec4218334189583" vulnerabilities="1" max_cvss_score="6.0" version="4.2.7.RELEASE" library="spring-core" vendor="org.springframework" description="Spring Core" added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;spring-core-4.2.7.RELEASE.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;spring-core-4.2.7.RELEASE.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;spring-core-4.2.7.RELEASE.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2018-1272" cvss_score="6.0" severity="3" cwe_id="CWE-88" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, provide client-side support for multipart requests. When Spring MVC or Spring WebFlux server application &#x28;server A&#x29; receives input from a remote client, and then uses that input to make a multipart request to another server &#x28;server B&#x29;, it can be exposed to an attack, where an extra multipart is inserted in the content of the request from server A, causing server B to use the wrong value for a part it expects. This could to lead privilege escalation, for example, if the part content represents a username or user roles." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="0eae536d-fd09-482b-9b2e-ff53ce2c8588" file_name="lucene-analyzers-common-4.5.1.jar" sha1="ef6c6328e6095c91647126af88cf034ab235a6ed" vulnerabilities="0" max_cvss_score="" version="4.5.1" library="lucene-analyzers-common" vendor="org.apache.lucene" description="Additional Analyzers" added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;lucene-analyzers-common-4.5.1.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;lucene-analyzers-common-4.5.1.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;lucene-analyzers-common-4.5.1.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="0ebf669d-3c5b-4031-8488-8c1519f2ceb8" file_name="commons-logging-1.2.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="1.2" library="commons-logging" vendor="commons-logging" description="Apache Commons Logging is a thin adapter allowing configurable bridging to other,&#xa;    well known logging systems." added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;sbp-1.3.5-client.jar&#x3a;commons-logging-1.2.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="0ed4bbff-1bd6-47b8-be32-129fd1b9b4fb" file_name="dom4j-1.6.1.jar" sha1="5d3ccc056b6f056dbf0dddfdf43894b9065a8f94" vulnerabilities="2" max_cvss_score="6.8" version="1.6.1" library="dom4j" vendor="dom4j" description="dom4j&#x3a; the flexible XML framework for Java" added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;dom4j-1.6.1.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;IsbDom4j-1.0.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;dom4j-1.6.1.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;IsbDom4j-1.0.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;IsbDom4j-1.0.jar"/>
            </file_paths>
            <licenses>
               <license name="BSD 2-Clause &#x22;Simplified&#x22; License" spdx_id="BSD-2-Clause" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;BSD-2-Clause.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2018-1000632" cvss_score="6.4" severity="4" cwe_id="CWE-91" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="dom4j is vulnerable to XML External Entity &#x28;XXE&#x29; attacks. The library does not properly validate the attributes that can be inserted by the user, allowing a malicious user to conduct an XXE attack." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="SRCCLR-SID-4943" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="dom4j is vulnerable to XML External Entity Injection. The library by default uses the &#x60;SAXReader&#x60; to parse documents without using the &#x60;setFeature&#x60; function in it to disable doctype and entities, allowing a malicious user to pass a document to execute an XML Injection attack." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="0fb75098-0afa-45ae-9203-bb2908685ec0" file_name="commons-io-2.5.jar" sha1="2852e6e05fbb95076fc091f6d1780f1f8fe35e0f" vulnerabilities="0" max_cvss_score="" version="2.5" library="commons-io" vendor="commons-io" description="The Apache Commons IO library contains utility classes, stream implementations, file filters, &#xa;file comparators, endian transformation classes, and much more." added_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;commons-io-2.5.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;commons-io-2.5.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;commons-io-2.5.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="11242929-1230-4db4-8d24-8e35c978ec2d" file_name="jcommon-1.0.23.jar" sha1="a316f336ca996e0c6bec4e4fbd49be8f5e1c3968" vulnerabilities="0" max_cvss_score="" version="1.0.23" library="jcommon" vendor="org.jfree" description="JCommon is a free general purpose Java class library that is used in&#xa;    several projects at www.jfree.org, including JFreeChart and&#xa;    JFreeReport." added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jcommon-1.0.23.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jcommon-1.0.23.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;jcommon-1.0.23.jar"/>
            </file_paths>
            <licenses>
               <license name="GNU Lesser General Public License v3.0 only" spdx_id="LGPL-3.0-only" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;LGPL-3.0-only.html" risk_rating="4"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="1349575f-0ef6-48f9-ae7f-821e24307184" file_name="javatuples-1.2.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="1.2" library="javatuples" vendor="org.javatuples" description="Java library for tuples in Java." added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;CryptographyUtility-1.0.jar&#x3a;javatuples-1.2.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="15a26c81-f7b1-42ff-828a-b261db25a6d2" file_name="bcmail-jdk14-1.38.jar" sha1="14ff2dfec8578f5f6838c4d6a77a86789afe5382" vulnerabilities="1" max_cvss_score="7.5" version="1.38" library="bcmail-jdk14" vendor="org.bouncycastle" description="The Bouncy Castle Java CMS and S&#x2f;MIME APIs for handling the CMS and S&#x2f;MIME protocols. This jar contains CMS and S&#x2f;MIME APIs for JDK 1.4. The APIs can be used in conjunction with a JCE&#x2f;JCA provider such as the one provided with the Bouncy Castle Cryptography APIs. If the S&#x2f;MIME API is used, the JavaMail API and the Java activation framework will also be needed." added_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;bcmail-jdk14-138.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;bcmail-jdk14-138.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;bcmail-jdk14-1.38.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;bcmail-jdk14-1.38.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;bcmail-jdk14-1.38.jar"/>
            </file_paths>
            <licenses>
               <license name="MIT License" spdx_id="MIT" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;MIT.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2018-1000613" cvss_score="7.5" severity="4" cwe_id="CWE-502" first_found_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" cve_summary="Legion of the Bouncy Castle Legion of the Bouncy Castle Java Cryptography APIs 1.58 up to but not including 1.60 contains a CWE-470&#x3a; Use of Externally-Controlled Input to Select Classes or Code &#x28;&#x27;Unsafe Reflection&#x27;&#x29; vulnerability in XMSS&#x2f;XMSS&#x5e;MT private key deserialization that can result in Deserializing an XMSS&#x2f;XMSS&#x5e;MT private key can result in the execution of unexpected code. This attack appear to be exploitable via A handcrafted private key can include references to unexpected classes which will be picked up from the class path for the executing application. This vulnerability appears to have been fixed in 1.60 and later." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="16a61873-98e0-4ead-bad0-6afce286d57b" file_name="jdbm-1.0.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="1.0" library="jdbm" vendor="jdbm" description="" added_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;CryptographyUtility-1.0.jar&#x3a;jdbm-1.0.jar"/>
            </file_paths>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="16ee34b0-e525-46bc-ab98-8396e8d6f278" file_name="spring-context-4.2.7.RELEASE.jar" sha1="289f2906943827d37de89240dbac8fe4b315a838" vulnerabilities="0" max_cvss_score="" version="4.2.7.RELEASE" library="spring-context" vendor="org.springframework" description="Spring Context" added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;spring-context-4.2.7.RELEASE.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;spring-context-4.2.7.RELEASE.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;spring-context-4.2.7.RELEASE.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="1793362a-098a-47f2-95e8-0565117aa7fd" file_name="commons-httpclient-3.1.jar" sha1="964cd74171f427720480efdec40a7c7f6e58426a" vulnerabilities="3" max_cvss_score="5.8" version="3.1" library="commons-httpclient" vendor="commons-httpclient" description="The HttpClient  component supports the client-side of RFC 1945 &#x28;HTTP&#x2f;1.0&#x29;  and RFC 2616 &#x28;HTTP&#x2f;1.1&#x29; , several related specifications &#x28;RFC 2109 &#x28;Cookies&#x29; , RFC 2617 &#x28;HTTP Authentication&#x29; , etc.&#x29;, and provides a framework by which new request types &#x28;methods&#x29; or HTTP extensions can be created easily." added_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;commons-httpclient-3.1.jar"/>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;commons-httpclient-3.1.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2012-5783" cvss_score="5.8" severity="3" cwe_id="CWE-20" first_found_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" cve_summary="Apache Commons HttpClient 3.x, as used in Amazon Flexible Payments Service &#x28;FPS&#x29; merchant Java SDK and other products, does not verify that the server hostname matches a domain name in the subject&#x27;s Common Name &#x28;CN&#x29; or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2012-6153" cvss_score="4.3" severity="3" cwe_id="CWE-20" first_found_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" cve_summary="http&#x2f;conn&#x2f;ssl&#x2f;AbstractVerifier.java in Apache Commons HttpClient before 4.2.3 does not properly verify that the server hostname matches a domain name in the subject&#x27;s Common Name &#x28;CN&#x29; or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via a certificate with a subject that specifies a common name in a field that is not the CN field.  NOTE&#x3a; this issue exists because of an incomplete fix for CVE-2012-5783." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2014-3577" cvss_score="5.8" severity="3" cwe_id="" first_found_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" cve_summary="org.apache.http.conn.ssl.AbstractVerifier in Apache HttpComponents HttpClient before 4.3.5 and HttpAsyncClient before 4.0.2 does not properly verify that the server hostname matches a domain name in the subject&#x27;s Common Name &#x28;CN&#x29; or subjectAltName field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via a &#x22;CN&#x3d;&#x22; string in a field in the distinguished name &#x28;DN&#x29; of a certificate, as demonstrated by the &#x22;foo,CN&#x3d;www.apache.org&#x22; string in the O field." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="1bcd9271-9231-4c7e-910d-8bb6ef384509" file_name="itext-rtf-2.1.3.jar" sha1="bf63b18b4a832d02378b1db06d1c34fd1cb184bd" vulnerabilities="0" max_cvss_score="" version="2.1.3" library="itext-rtf" vendor="com.lowagie" description="iText, a free Java-PDF library &#x28;rtf package&#x29;" added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;itext-rtf-2.1.3.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;itext-rtf-2.1.3.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;itext-rtf-2.1.3.jar"/>
            </file_paths>
            <licenses>
               <license name="Mozilla Public License 2.0" spdx_id="MPL-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;MPL-2.0.html" risk_rating="3"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="1ff037ab-0b67-4ae3-9246-986d0eaa07f7" file_name="httpclient-4.5.3.jar" sha1="d1577ae15f01ef5438c5afc62162457c00a34713" vulnerabilities="0" max_cvss_score="" version="4.5.3" library="httpclient" vendor="org.apache.httpcomponents" description="Apache HttpComponents Client" added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;httpclient-4.5.3.jar"/>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;httpclient-4.5.3.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="23f4ab8e-0b82-4a5a-be71-1bd41fc0099a" file_name="jsoup-1.8.3.jar" sha1="65fd012581ded67bc20945d85c32b4598c3a9cf1" vulnerabilities="1" max_cvss_score="5.0" version="1.8.3" library="jsoup" vendor="org.jsoup" description="jsoup HTML parser" added_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;jsoup-1.8.3.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jsoup-1.8.3.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jsoup-1.8.3.jar"/>
            </file_paths>
            <licenses>
               <license name="MIT License" spdx_id="MIT" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;MIT.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="SRCCLR-SID-2477" cvss_score="5.0" severity="3" cwe_id="" first_found_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" cve_summary="jsoup is vulnerable to denial of service &#x28;DoS&#x29; attacks through infinite loops. The infinite loop is triggered when parsing html strings which contains letters with accents." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="2444052e-6ba7-4785-b7a6-9287dd921ee2" file_name="framework-0.4.1.jar" sha1="769ff2040cfc3d71ca2d3b1e6e4549186c64e3f9" vulnerabilities="0" max_cvss_score="" version="0.4.1" library="framework" vendor="org.syncope.identityconnectors" description="" added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;framework-0.4.1.jar"/>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;framework-0.4.1.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="26efb80b-7582-4d25-a4ee-328ba6416ca7" file_name="bsh-core-2.0b4.jar" sha1="495e25a99e29970ffe8ba0b1d551e1d1a9991fc1" vulnerabilities="1" max_cvss_score="6.8" version="2.0b4" library="bsh-core" vendor="org.beanshell" description="BeanShell core" added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;bsh-core-2.0b4.jar"/>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;bsh-core-2.0b4.jar"/>
            </file_paths>
            <licenses>
               <license name="GNU Lesser General Public License v3.0 only" spdx_id="LGPL-3.0-only" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;LGPL-3.0-only.html" risk_rating="4"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2016-2510" cvss_score="6.8" severity="4" cwe_id="CWE-19" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="BeanShell &#x28;bsh&#x29; before 2.0b6, when included on the classpath by an application that uses Java serialization or XStream, allows remote attackers to execute arbitrary code via crafted serialized data, related to XThis.Handler." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="27e80f56-6c2b-413e-922f-0d0580fcd415" file_name="commons-beanutils-core-1.8.3.jar" sha1="75812698e5e859f2cb587c622c4cdfcd61676426" vulnerabilities="2" max_cvss_score="7.5" version="1.8.3" library="commons-beanutils-core" vendor="commons-beanutils" description="" added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;commons-beanutils-core-1.8.3.jar"/>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;commons-beanutils-core-1.8.3.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2014-0114" cvss_score="7.5" severity="4" cwe_id="CWE-20" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="Apache Commons BeanUtils, as distributed in lib&#x2f;commons-beanutils-1.8.0.jar in Apache Struts 1.x through 1.3.10 and in other products requiring commons-beanutils through 1.9.2, does not suppress the class property, which allows remote attackers to &#x22;manipulate&#x22; the ClassLoader and execute arbitrary code via the class parameter, as demonstrated by the passing of this parameter to the getClass method of the ActionForm object in Struts 1." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2019-10086" cvss_score="7.5" severity="4" cwe_id="" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="commons-beanutils2 is vulnerable to authorization bypass. The vulnerability exists as the class property of Java objects are able to get access to the classloader by default." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="29d42c13-37f2-4551-b1e2-e2682bc6e201" file_name="json-lib-2.4-jdk15.jar" sha1="136743e0d12df4e785e62b48618cee169b2ae546" vulnerabilities="0" max_cvss_score="" version="2.4" library="json-lib" vendor="com.hynnet" description="Java library for transforming beans, maps, collections, java&#xa;      arrays and XML to JSON." added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;json-lib-2.4-jdk15.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;json-lib-2.4-jdk15.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;json-lib-2.4-jdk15.jar"/>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;json-lib-2.4-jdk15.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;json-lib-2.4-jdk15.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="2a3e4076-6d33-4752-b5c5-1c09a844a679" file_name="castor-core-1.3.3.jar" sha1="2fbb4a27b840e116526a1189dbe53307551ecfb4" vulnerabilities="0" max_cvss_score="" version="1.3.3" library="castor-core" vendor="org.codehaus.castor" description="Core functionality - Required by all other modules" added_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;castor-core-1.3.3.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;castor-core-1.3.3.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;castor-core-1.3.3.jar"/>
            </file_paths>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="306465be-7429-4310-9bf6-d91918bd5844" file_name="gson-2.2.4.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="2.2.4" library="gson" vendor="com.google.code.gson" description="Google Gson library" added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;sbp-1.3.5-client.jar&#x3a;gson-2.2.4.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="30b45cd2-fbf3-4fd1-b91f-bc847510ed4e" file_name="commons-logging-1.1.3.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="1.1.3" library="commons-logging" vendor="commons-logging" description="Commons Logging is a thin adapter allowing configurable bridging to other,&#xa;    well known logging systems." added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;CryptographyUtility-1.0.jar&#x3a;commons-logging-1.1.3.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="3441fa82-b3e2-4e4d-92f7-855049750a89" file_name="xml-apis-1.3.03.jar" sha1="3845d5aabd62dc1954f2c0e84a799068c917ad2b" vulnerabilities="0" max_cvss_score="" version="1.3.03" library="xml-apis" vendor="org.dspace.xmlui.xml" description="" added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;xml-apis-1.3.03.jar"/>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;xml-apis-1.3.03.jar"/>
            </file_paths>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="34d55fc4-8c13-4a4c-a14e-2036f39c3537" file_name="org.apache.servicemix.bundles.javax-inject-1_2.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="1_2" library="org.apache.servicemix.bundles.javax-inject" vendor="org.apache.servicemix.bundles" description="This OSGi bundle wraps &#x24;&#x7b;pkgArtifactId&#x7d; &#x24;&#x7b;pkgVersion&#x7d; jar file." added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;javaee-api-6.0.jar&#x3a;org.apache.servicemix.bundles.javax-inject-1_2.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="383ded5a-fe93-47f3-b2e8-e290474dbce0" file_name="jasperreports-6.2.0.jar" sha1="d158aa2b29e6433a82b125da1c002f04f7baa464" vulnerabilities="0" max_cvss_score="" version="6.2.0" library="jasperreports" vendor="net.sf.jasperreports" description="JasperReports Library" added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jasperreports-6.2.0.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jasperreports-6.2.0.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;jasperreports-6.2.0.jar"/>
            </file_paths>
            <licenses>
               <license name="GNU Lesser General Public License v3.0 only" spdx_id="LGPL-3.0-only" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;LGPL-3.0-only.html" risk_rating="4"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="3c94c290-501f-4d2a-a317-47419b81fcbb" file_name="batik-util-1.8.jar" sha1="35dcd204f397d6976290ca48ffa0011ba9b7ef43" vulnerabilities="0" max_cvss_score="" version="1.8" library="batik-util" vendor="org.apache.xmlgraphics" description="" added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;batik-util-1.8.jar"/>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;batik-util-1.8.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="3cfd7642-2c9d-41c5-a443-55aa719aa5c3" file_name="core-2.3.0.jar" sha1="80a402b12accd66d4be7e5dbcb44e42baa0bdd7c" vulnerabilities="0" max_cvss_score="" version="2.3.0" library="core" vendor="com.google.zxing" description="Core barcode encoding&#x2f;decoding library" added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;core-2.3.0.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;core-2.3.0.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;core-2.3.0.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="419ae553-4524-4d27-a963-d85ea650b3ca" file_name="commons-digester-1.7.jar" sha1="df4cdf149b9c2ff18053f9963f727b6ad2a9e8c0" vulnerabilities="0" max_cvss_score="" version="1.7" library="commons-digester" vendor="commons-digester" description="The Digester package lets you configure an XML-&#x3e;Java object mapping module&#xa;    which triggers certain actions called rules whenever a particular &#xa;    pattern of nested XML elements is recognized." added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;commons-digester-1.7.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;commons-digester-1.7.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;commons-digester-1.7.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="45d139bd-e046-4c91-9975-8bab9f28e7ee" file_name="commons-codec-1.9.jar" sha1="" vulnerabilities="1" max_cvss_score="5.0" version="1.9" library="commons-codec" vendor="commons-codec" description="The Apache Commons Codec package contains simple encoder and decoders for&#xa;     various formats such as Base64 and Hexadecimal.  In addition to these&#xa;     widely used encoders and decoders, the codec package also maintains a&#xa;     collection of phonetic encoding utilities." added_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;sbp-1.3.5-client.jar&#x3a;commons-codec-1.9.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="SRCCLR-SID-22742" cvss_score="5.0" severity="3" cwe_id="" first_found_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" cve_summary="commons-codec does not properly perform input validation on encoded values. The &#x60;decode&#x28;&#x29;&#x60; function in the Base32, Base64 and BCodec classes fails to reject malformed Base32 and Base64 encoded strings and decodes into arbitrary values. A remote attacker can leverage this vulnerability to tunnel additional information via Base32 or Base64 encoded strings that appears to be legitimate." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="5513f224-bdc1-4d50-8b04-532c48718250" file_name="jdom-1.1.3.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="1.1.3" library="jdom" vendor="org.lucee" description="OSGi Version of jdom" added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;CryptographyUtility-1.0.jar&#x3a;jdom-1.1.3.jar"/>
            </file_paths>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="55e771d4-21c6-4f39-8393-e826ba16ccf6" file_name="javaee-api-6.0.jar" sha1="d6f416983ea13c334d5c599a9045414ecaf5d66d" vulnerabilities="0" max_cvss_score="" version="6.0" library="javaee-api" vendor="javax" description="Java&#x28;TM&#x29; EE 6 Specification APIs" added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;javaee-api-6.0.jar"/>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;javaee-api-6.0.jar"/>
            </file_paths>
            <licenses>
               <license name="CeCILL Free Software License Agreement v1.0" spdx_id="CECILL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CECILL-1.0.html" risk_rating="3"/>
               <license name="Common Development and Distribution License 1.0" spdx_id="CDDL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.0.html" risk_rating="3"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="56ccfb79-3853-473a-aedc-3d9cc486306f" file_name="antisamy-1.5.3.jar" sha1="7538ad2b1afb74e74cc419e8c7b87abfd5526251" vulnerabilities="2" max_cvss_score="4.3" version="1.5.3" library="antisamy" vendor="org.owasp.antisamy" description="" added_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;antisamy-1.5.3.jar"/>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;antisamy-1.5.3.jar"/>
            </file_paths>
            <licenses>
               <license name="BSD 3-Clause &#x22;New&#x22; or &#x22;Revised&#x22; License" spdx_id="BSD-3-Clause" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;BSD-3-Clause.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2016-10006" cvss_score="4.3" severity="3" cwe_id="CWE-79" first_found_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" cve_summary="In OWASP AntiSamy before 1.5.5, by submitting a specially crafted input &#x28;a tag that supports style with active content&#x29;, you could bypass the library protections and supply executable code. The impact is XSS." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2017-14735" cvss_score="4.3" severity="3" cwe_id="CWE-79" first_found_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" cve_summary="OWASP AntiSamy before 1.5.7 allows XSS via HTML5 entities, as demonstrated by use of &#x26;colon&#x3b; to construct a javascript&#x3a; URL." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="5c31e6a1-1460-4f05-a0de-3f730a338852" file_name="lucene-sandbox-4.5.1.jar" sha1="4b038e148cac043176ecacdb34078a9ee07bd957" vulnerabilities="0" max_cvss_score="" version="4.5.1" library="lucene-sandbox" vendor="org.apache.lucene" description="Lucene Sandbox" added_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;lucene-sandbox-4.5.1.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;lucene-sandbox-4.5.1.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;lucene-sandbox-4.5.1.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="5daf6809-1453-4b22-91cb-eb86b5406170" file_name="spring-beans-4.2.7.RELEASE.jar" sha1="ae0501728c0ee072e25cb5e11b63b883c0786b4b" vulnerabilities="0" max_cvss_score="" version="4.2.7.RELEASE" library="spring-beans" vendor="org.springframework" description="Spring Beans" added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;spring-beans-4.2.7.RELEASE.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;spring-beans-4.2.7.RELEASE.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;spring-beans-4.2.7.RELEASE.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="60394e2b-59b6-43e7-be65-31ea08ce8dc0" file_name="jedis-2.9.0.jar" sha1="292bc9cc26553acd3cccc26f2f95620bf88a04c2" vulnerabilities="0" max_cvss_score="" version="2.9.0" library="jedis" vendor="redis.clients" description="Jedis is a blazingly small and sane Redis java client." added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jedis-2.9.0.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;jedis-2.9.0.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jedis-2.9.0.jar"/>
            </file_paths>
            <licenses>
               <license name="MIT License" spdx_id="MIT" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;MIT.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="614fc351-1beb-4def-887f-74b2cab8c7c7" file_name="poi-3.9.jar" sha1="5d5e41354e88322e4bc590b31f3d2d1d52b3e6ac" vulnerabilities="4" max_cvss_score="7.8" version="3.9" library="poi" vendor="org.apache.poi" description="Apache POI - Java API To Access Microsoft Format Files" added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;poi-3.9.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;poi-3.9.jar"/>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;poi-3.9.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;poi-3.9.jar"/>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;poi-3.9.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2017-12626" cvss_score="5.0" severity="3" cwe_id="CWE-399" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="Apache POI in versions prior to release 3.17 are vulnerable to Denial of Service Attacks&#x3a; 1&#x29; Infinite Loops while parsing crafted WMF, EMF, MSG and macros &#x28;POI bugs 61338 and 61294&#x29;, and 2&#x29; Out of Memory Exceptions while parsing crafted DOC, PPT and XLS &#x28;POI bugs 52372 and 61295&#x29;." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2017-5644" cvss_score="7.1" severity="4" cwe_id="CWE-399" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="Apache POI in versions prior to release 3.15 allows remote attackers to cause a denial of service &#x28;CPU consumption&#x29; via a specially crafted OOXML file, aka an XML Entity Expansion &#x28;XEE&#x29; attack." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="SRCCLR-SID-3029" cvss_score="7.8" severity="4" cwe_id="" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="Apache poi is vulnerable to denial of service &#x28;DoS&#x29; attacks. These are possible when an embedded OLE10Native object has a buffer that is incorrectly allocated, this can lead to an out-of-memory condition." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="SRCCLR-SID-5110" cvss_score="5.0" severity="3" cwe_id="" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="Apache POI is vulnerable to denial of service &#x28;DoS&#x29; attacks. A malicious user can pass a file with a corrupted length, causing the application to run out-of-memory and crash." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="64dbc9d1-d92d-4d6c-b66d-b461627aa3b4" file_name="xml-apis-ext-1.3.04.jar" sha1="41a8b86b358e87f3f13cf46069721719105aff66" vulnerabilities="0" max_cvss_score="" version="1.3.04" library="xml-apis-ext" vendor="xml-apis" description="xml-commons provides an Apache-hosted set of DOM, SAX, and &#xa;    JAXP interfaces for use in other xml-based projects. Our hope is that we &#xa;    can standardize on both a common version and packaging scheme for these &#xa;    critical XML standards interfaces to make the lives of both our developers &#xa;    and users easier. The External Components portion of xml-commons contains &#xa;    interfaces that are defined by external standards organizations. For DOM, &#xa;    that&#x27;s the W3C&#x3b; for SAX it&#x27;s David Megginson and sax.sourceforge.net&#x3b; for &#xa;    JAXP it&#x27;s Sun." added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;xml-apis-ext-1.3.04.jar"/>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;xml-apis-ext-1.3.04.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="656511ce-7e2e-4d5c-bcd8-2efd5dac897b" file_name="org.apache.servicemix.bundles.spring-aop-4.2.5.RELEASE_1.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="4.2.5.RELEASE_1" library="org.apache.servicemix.bundles.spring-aop" vendor="org.apache.servicemix.bundles" description="" added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;sbp-1.3.5-client.jar&#x3a;org.apache.servicemix.bundles.spring-aop-4.2.5.RELEASE_1.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="661efbb9-33b0-4cc3-8598-e459ec2309c5" file_name="IsbBcprov-1.0.jar" sha1="c5fa3b6b8b8064c43d2f0d4c4e1408368988bcd2" vulnerabilities="14" max_cvss_score="7.5" version="1.49" library="bcprov-jdk14" vendor="org.bouncycastle" description="The Bouncy Castle Crypto package is a Java implementation of cryptographic algorithms. This jar contains JCE provider and lightweight API for the Bouncy Castle Cryptography APIs for JDK 1.5 to JDK 1.7." added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;IsbBcprov-1.0.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;IsbBcprov-1.0.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;IsbBcprov-1.0.jar"/>
            </file_paths>
            <licenses>
               <license name="MIT License" spdx_id="MIT" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;MIT.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2015-6644" cvss_score="4.3" severity="3" cwe_id="" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="BouncyCastle is vulnerable to information disclosure attacks. Attackers can use a malicious application to obtain sensitive user information." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2015-7940" cvss_score="5.0" severity="3" cwe_id="CWE-310" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="The Bouncy Castle Java library before 1.51 does not validate a point is withing the elliptic curve, which makes it easier for remote attackers to obtain private keys via a series of crafted elliptic curve Diffie Hellman &#x28;ECDH&#x29; key exchanges, aka an &#x22;invalid curve attack.&#x22;" severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-1000338" cvss_score="5.0" severity="3" cwe_id="CWE-347" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="In Bouncy Castle JCE Provider version 1.55 and earlier the DSA does not fully validate ASN.1 encoding of signature on verification. It is possible to inject extra elements in the sequence making up the signature and still have it validate, which in some cases may allow the introduction of &#x27;invisible&#x27; data into a signed structure." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-1000339" cvss_score="5.0" severity="3" cwe_id="CWE-327" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="In the Bouncy Castle JCE Provider version 1.55 and earlier the primary engine class used for AES was AESFastEngine. Due to the highly table driven approach used in the algorithm it turns out that if the data channel on the CPU can be monitored the lookup table accesses are sufficient to leak information on the AES key being used. There was also a leak in AESEngine although it was substantially less. AESEngine has been modified to remove any signs of leakage &#x28;testing carried out on Intel X86-64&#x29; and is now the primary AES class for the BC JCE provider from 1.56. Use of AESFastEngine is now only recommended where otherwise deemed appropriate." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-1000341" cvss_score="4.3" severity="3" cwe_id="CWE-358" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="In the Bouncy Castle JCE Provider version 1.55 and earlier DSA signature generation is vulnerable to timing attack. Where timings can be closely observed for the generation of signatures, the lack of blinding in 1.55, or earlier, may allow an attacker to gain information about the signature&#x27;s k value and ultimately the private value as well." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-1000342" cvss_score="5.0" severity="3" cwe_id="CWE-347" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="In the Bouncy Castle JCE Provider version 1.55 and earlier ECDSA does not fully validate ASN.1 encoding of signature on verification. It is possible to inject extra elements in the sequence making up the signature and still have it validate, which in some cases may allow the introduction of &#x27;invisible&#x27; data into a signed structure." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-1000343" cvss_score="5.0" severity="3" cwe_id="CWE-326" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="In the Bouncy Castle JCE Provider version 1.55 and earlier the DSA key pair generator generates a weak private key if used with default values. If the JCA key pair generator is not explicitly initialised with DSA parameters, 1.55 and earlier generates a private value assuming a 1024 bit key size. In earlier releases this can be dealt with by explicitly passing parameters to the key pair generator." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-1000344" cvss_score="5.8" severity="3" cwe_id="CWE-358" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="In the Bouncy Castle JCE Provider version 1.55 and earlier the DHIES implementation allowed the use of ECB mode. This mode is regarded as unsafe and support for it has been removed from the provider." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-1000345" cvss_score="4.3" severity="3" cwe_id="CWE-326" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="In the Bouncy Castle JCE Provider version 1.55 and earlier the DHIES&#x2f;ECIES CBC mode vulnerable to padding oracle attack. For BC 1.55 and older, in an environment where timings can be easily observed, it is possible with enough observations to identify when the decryption is failing due to padding." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-1000346" cvss_score="4.3" severity="3" cwe_id="CWE-20" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="In the Bouncy Castle JCE Provider version 1.55 and earlier the other party DH public key is not fully validated. This can cause issues as invalid keys can be used to reveal details about the other party&#x27;s private key where static Diffie-Hellman is in use. As of release 1.56 the key parameters are checked on agreement calculation." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-1000352" cvss_score="5.8" severity="3" cwe_id="CWE-358" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="In the Bouncy Castle JCE Provider version 1.55 and earlier the ECIES implementation allowed the use of ECB mode. This mode is regarded as unsafe and support for it has been removed from the provider." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-2183" cvss_score="5.0" severity="3" cwe_id="CWE-200" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="The DES and Triple DES ciphers, as used in the TLS, SSH, and IPSec protocols and other protocols and products, have a birthday bound of approximately four billion blocks, which makes it easier for remote attackers to obtain cleartext data via a birthday attack against a long-duration encrypted session, as demonstrated by an HTTPS session using Triple DES in CBC mode, aka a &#x22;Sweet32&#x22; attack." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2018-1000613" cvss_score="7.5" severity="4" cwe_id="CWE-502" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="Legion of the Bouncy Castle Legion of the Bouncy Castle Java Cryptography APIs 1.58 up to but not including 1.60 contains a CWE-470&#x3a; Use of Externally-Controlled Input to Select Classes or Code &#x28;&#x27;Unsafe Reflection&#x27;&#x29; vulnerability in XMSS&#x2f;XMSS&#x5e;MT private key deserialization that can result in Deserializing an XMSS&#x2f;XMSS&#x5e;MT private key can result in the execution of unexpected code. This attack appear to be exploitable via A handcrafted private key can include references to unexpected classes which will be picked up from the class path for the executing application. This vulnerability appears to have been fixed in 1.60 and later." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2018-5382" cvss_score="7.5" severity="4" cwe_id="CWE-310" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="Bouncy Castle is vulnerable to hash collision attacks. The library keystore files uses a HMAC hash that is only 16 bits long, allowing a malicious user to retrieve the password used for keystore integrity verification checks. This vulnerability only affects users of the &#x60;BKS-V1&#x60; keystore format, which was re-introduced since 1.49." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="6f0ca2c3-d4cc-49e3-87cf-323607b2dfc6" file_name="spring-expression-4.2.7.RELEASE.jar" sha1="547b8e02f5e219f6c8c8f84675d0cd7a8a6e92cf" vulnerabilities="0" max_cvss_score="" version="4.2.7.RELEASE" library="spring-expression" vendor="org.springframework" description="Spring Expression Language &#x28;SpEL&#x29;" added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;spring-expression-4.2.7.RELEASE.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;spring-expression-4.2.7.RELEASE.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;spring-expression-4.2.7.RELEASE.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="71c036c9-0453-4fe1-b229-981052a78621" file_name="groovy-all-2.0.1.jar" sha1="dcd86c6849ee399f86e54627c22f9cfe6af9ea18" vulnerabilities="2" max_cvss_score="7.5" version="2.0.1" library="groovy-all" vendor="org.codehaus.groovy" description="Groovy&#x3a; A powerful, dynamic language for the JVM" added_date="2020-08-12 19&#x3a;02&#x3a;44 UTC" new="true" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;groovy-all-2.0.1.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;groovy-all-2.0.1.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;groovy-all-2.0.1.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2015-3253" cvss_score="7.5" severity="4" cwe_id="CWE-74" first_found_date="2020-08-12 19&#x3a;02&#x3a;44 UTC" cve_summary="The MethodClosure class in runtime&#x2f;MethodClosure.java in Apache Groovy 1.7.0 through 2.4.3 allows remote attackers to execute arbitrary code or cause a denial of service via a crafted serialized object." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-6814" cvss_score="7.5" severity="4" cwe_id="CWE-502" first_found_date="2020-08-12 19&#x3a;02&#x3a;44 UTC" cve_summary="When an application with unsupported Codehaus versions of Groovy from 1.7.0 to 2.4.3, Apache Groovy 2.4.4 to 2.4.7 on classpath uses standard Java serialization mechanisms, e.g. to communicate between servers or to store local data, it was possible for an attacker to bake a special serialized object that will execute code directly when deserialized. All applications which rely on serialization and do not isolate the code which deserializes objects were subject to this vulnerability." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="721a91e2-2815-4e77-a7d5-b210f7dfce4e" file_name="bctsp-jdk14-1.38.jar" sha1="4821122f8390d15f4b5ee652621e2a2bb1f1bf16" vulnerabilities="1" max_cvss_score="4.3" version="1.38" library="bctsp-jdk14" vendor="org.bouncycastle" description="The Bouncy Castle Java API for handling the Time Stamp Protocol &#x28;TSP&#x29;. This jar contains the TSP API for JDK 1.4. The APIs can be used in conjunction with a JCE&#x2f;JCA provider such as the one provided with the Bouncy Castle Cryptography APIs." added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;bctsp-jdk14-1.38.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;bctsp-jdk14-1.38.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;bctsp-jdk14-1.38.jar"/>
            </file_paths>
            <licenses>
               <license name="MIT License" spdx_id="MIT" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;MIT.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2016-1000341" cvss_score="4.3" severity="3" cwe_id="CWE-358" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="In the Bouncy Castle JCE Provider version 1.55 and earlier DSA signature generation is vulnerable to timing attack. Where timings can be closely observed for the generation of signatures, the lack of blinding in 1.55, or earlier, may allow an attacker to gain information about the signature&#x27;s k value and ultimately the private value as well." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="74650f98-0bff-40ed-be1d-320164f750a8" file_name="validation-api-1.1.0.Final.jar" sha1="8613ae82954779d518631e05daa73a6a954817d5" vulnerabilities="0" max_cvss_score="" version="1.1.0.Final" library="validation-api" vendor="javax.validation" description="Bean Validation API" added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;validation-api-1.1.0.Final.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;validation-api-1.1.0.Final.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;validation-api-1.1.0.Final.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="758e518d-6c84-4dd4-ae57-a7f59b19a833" file_name="logkit-1.0.1.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="1.0.1" library="logkit" vendor="logkit" description="" added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;velocity-dep-1.4.jar&#x3a;logkit-1.0.1.jar"/>
            </file_paths>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="7c7ea3c7-0a96-4a2e-9590-f903a1405176" file_name="Java-WebSocket-1.3.0.jar" sha1="" vulnerabilities="1" max_cvss_score="6.8" version="1.3.0" library="Java-WebSocket" vendor="org.java-websocket" description="A barebones WebSocket client and server implementation written in 100&#x25; Java" added_date="2020-08-12 19&#x3a;02&#x3a;43 UTC" new="true" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;sbp-1.3.5-client.jar&#x3a;Java-WebSocket-1.3.0.jar"/>
            </file_paths>
            <licenses>
               <license name="MIT License" spdx_id="MIT" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;MIT.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2020-11050" cvss_score="6.8" severity="4" cwe_id="" first_found_date="2020-08-12 19&#x3a;02&#x3a;43 UTC" cve_summary="Java-Websocket is vulnerable to man-in-the-middle attack. The SSL hostname validation is not enabled by default, allowing an attacker to perform a man-in-the-middle attack to intercept and modify network traffic." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="810d5313-57c8-4105-9407-ec18d1ad81c3" file_name="commons-codec-1.4.jar" sha1="4216af16d38465bbab0f3dff8efa14204f7a399a" vulnerabilities="0" max_cvss_score="" version="1.4" library="commons-codec" vendor="commons-codec" description="The codec package contains simple encoder and decoders for&#xa;     various formats such as Base64 and Hexadecimal.  In addition to these&#xa;     widely used encoders and decoders, the codec package also maintains a&#xa;     collection of phonetic encoding utilities." added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;commons-codec-1.4.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;commons-codec-1.4.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;commons-codec-1.4.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="85072896-0884-4496-96f0-84a60939ebf2" file_name="xom-1.2.5.jar" sha1="4166493b9f04e91b858ba4150b28b4d197f8f8ea" vulnerabilities="0" max_cvss_score="" version="1.2.5" library="xom" vendor="xom" description="The XOM Dual Streaming&#x2f;Tree API for Processing XML" added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;xom-1.2.5.jar"/>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;xom-1.2.5.jar"/>
            </file_paths>
            <licenses>
               <license name="GNU Lesser General Public License v2.1 only" spdx_id="LGPL-2.1-only" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;LGPL-2.1-only.html" risk_rating="4"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="8c0a320d-114f-4790-8e3b-151a8f599389" file_name="jaxb-core-2.2.11.jar" sha1="c3f87d654f8d5943cd08592f3f758856544d279a" vulnerabilities="0" max_cvss_score="" version="2.2.11" library="jaxb-core" vendor="com.sun.xml.bind" description="Old JAXB Core module. Contains sources required by XJC, JXC and Runtime modules with dependencies." added_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;jaxb-core-2.2.11.jar"/>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;jaxb-core-2.2.11.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;jaxb-core-2.2.11.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jaxb-core-2.2.11.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jaxb-core-2.2.11.jar"/>
            </file_paths>
            <licenses>
               <license name="CeCILL Free Software License Agreement v1.0" spdx_id="CECILL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CECILL-1.0.html" risk_rating="3"/>
               <license name="Common Development and Distribution License 1.0" spdx_id="CDDL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.0.html" risk_rating="3"/>
               <license name="GNU General Public License v3.0 only" spdx_id="GPL-3.0-only" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;GPL-3.0-only.html" risk_rating="4"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="8c2bc433-6a9c-4cab-a196-43be1115961a" file_name="pdfbox-1.8.9.jar" sha1="46764c8e1e5b07f0e5ca30104ada3895a15a8921" vulnerabilities="3" max_cvss_score="7.5" version="1.8.9" library="pdfbox" vendor="org.apache.pdfbox" description="The Apache PDFBox library is an open source Java tool for working with PDF documents." added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;pdfbox-1.8.9.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;pdfbox-1.8.9.jar"/>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;pdfbox-1.8.9.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;pdfbox-1.8.9.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;pdfbox-1.8.9.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2016-2175" cvss_score="7.5" severity="4" cwe_id="" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="Apache PDFBox before 1.8.12 and 2.x before 2.0.1 does not properly initialize the XML parsers, which allows context-dependent attackers to conduct XML External Entity &#x28;XXE&#x29; attacks via a crafted PDF." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2018-11797" cvss_score="4.3" severity="3" cwe_id="CWE-20" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="In Apache PDFBox 1.8.0 to 1.8.15 and 2.0.0RC1 to 2.0.11, a carefully crafted PDF file can trigger an extremely long running computation when parsing the page tree." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="SRCCLR-SID-2333" cvss_score="3.6" severity="2" cwe_id="" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="pdfbox has a flaw which leads to privilege escalations. The vulnerability exists because the access permissions for non-owner users are not restricted to read-only by StandardSecurityHandler. Therefore, non-owner users are able to edit the PDF, getting the same access right as owner." severity_desc="Low" mitigation="false" vulnerability_affects_policy_compliance="false"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="8d9362dd-d4ae-4517-a21e-067fd1c1ff01" file_name="commons-beanutils-1.8.0.jar" sha1="0c651d5103c649c12b20d53731643e5fffceb536" vulnerabilities="2" max_cvss_score="7.5" version="1.8.0" library="commons-beanutils" vendor="commons-beanutils" description="BeanUtils provides an easy-to-use but flexible wrapper around reflection and introspection." added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;commons-beanutils-1.8.0.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;commons-beanutils-1.8.0.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;commons-beanutils-1.8.0.jar"/>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;commons-beanutils-1.8.0.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;commons-beanutils-1.8.0.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2014-0114" cvss_score="7.5" severity="4" cwe_id="CWE-20" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="Apache Commons BeanUtils, as distributed in lib&#x2f;commons-beanutils-1.8.0.jar in Apache Struts 1.x through 1.3.10 and in other products requiring commons-beanutils through 1.9.2, does not suppress the class property, which allows remote attackers to &#x22;manipulate&#x22; the ClassLoader and execute arbitrary code via the class parameter, as demonstrated by the passing of this parameter to the getClass method of the ActionForm object in Struts 1." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2019-10086" cvss_score="7.5" severity="4" cwe_id="" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="commons-beanutils2 is vulnerable to authorization bypass. The vulnerability exists as the class property of Java objects are able to get access to the classloader by default." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="8d9a63d8-808b-4233-9e54-279d0f51826f" file_name="log4j-1.2.17.jar" sha1="" vulnerabilities="1" max_cvss_score="7.5" version="1.2.17" library="log4j" vendor="log4j" description="Apache Log4j 1.2" added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;sbp-1.3.5-client.jar&#x3a;log4j-1.2.17.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2019-17571" cvss_score="7.5" severity="4" cwe_id="" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="log4j-core is vulnerable to arbitrary code execution. Deserialization of untrusted data in &#x60;TcpSocketServer&#x60; and &#x60;UdpSocketServer&#x60; when listening for log data allows an attacker to execute arbitrary code via a malicious deserialization gadget." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="8fb560a1-6f77-4b31-8989-1278eaa217c5" file_name="itext-2.1.7.jar" sha1="892bfb3e97074a61123b3b2d7caa2db112750864" vulnerabilities="0" max_cvss_score="" version="2.1.7" library="itext" vendor="com.lowagie" description="iText, a free Java-PDF library" added_date="2020-08-12 19&#x3a;02&#x3a;43 UTC" new="true" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;itext-2.1.7.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;itext-2.1.7.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;itext-2.1.7.jar"/>
            </file_paths>
            <licenses>
               <license name="Mozilla Public License 2.0" spdx_id="MPL-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;MPL-2.0.html" risk_rating="3"/>
               <license name="Mozilla Public License 1.1" spdx_id="MPL-1.1" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;MPL-1.1.html" risk_rating="3"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="9117f328-e1bb-491b-8edd-7e8c49088047" file_name="bsh-2.0b5.jar" sha1="" vulnerabilities="1" max_cvss_score="6.8" version="2.0b5" library="bsh" vendor="org.beanshell" description="BeanShell is a small, free, embeddable Java source interpreter with object scripting language features,&#xa;        written in Java. BeanShell dynamically executes standard Java syntax and extends it with common scripting&#xa;        conveniences such as loose types, commands, and method closures like those in Perl and JavaScript." added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;CryptographyUtility-1.0.jar&#x3a;bsh-2.0b5.jar"/>
            </file_paths>
            <licenses>
               <license name="GNU Lesser General Public License v3.0 only" spdx_id="LGPL-3.0-only" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;LGPL-3.0-only.html" risk_rating="4"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2016-2510" cvss_score="6.8" severity="4" cwe_id="CWE-19" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="BeanShell &#x28;bsh&#x29; before 2.0b6, when included on the classpath by an application that uses Java serialization or XStream, allows remote attackers to execute arbitrary code via crafted serialized data, related to XThis.Handler." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="95ea4195-7ff3-43c0-82dc-8d45aa15266c" file_name="org.apache.servicemix.bundles.spring-expression-4.2.5.RELEASE_1.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="4.2.5.RELEASE_1" library="org.apache.servicemix.bundles.spring-expression" vendor="org.apache.servicemix.bundles" description="" added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;sbp-1.3.5-client.jar&#x3a;org.apache.servicemix.bundles.spring-expression-4.2.5.RELEASE_1.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="967e97d3-5300-4f81-93b6-5eba05e1fdfa" file_name="jasypt-1.9.2.jar" sha1="91eee489a389faba9fc57bfee75c87c615c19cd7" vulnerabilities="0" max_cvss_score="" version="1.9.2" library="jasypt" vendor="org.jasypt" description="Java library which enables encryption in java apps with minimum effort." added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;jasypt-1.9.2.jar"/>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;jasypt-1.9.2.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="96c444e4-8d35-4ecf-aec7-cf3fb1895264" file_name="framework-internal-0.1.4.jar" sha1="d4558f96e634f02ede815d41298c6afb57498dd4" vulnerabilities="0" max_cvss_score="" version="0.1.4" library="framework-internal" vendor="org.syncope.identityconnectors" description="" added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;framework-internal-0.1.4.jar"/>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;framework-internal-0.1.4.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="98334eb6-7d0e-4a47-8d91-e4a89f7d0723" file_name="jempbox-1.8.9.jar" sha1="e6101f5ac76b0ba086bdc1b3d5b6290ed073ed39" vulnerabilities="1" max_cvss_score="7.5" version="1.8.9" library="jempbox" vendor="org.apache.pdfbox" description="The Apache JempBox library is an open source Java tool that implements Adobe&#x27;s XMP&#x28;TM&#x29;&#xa;    specification. JempBox is a subproject of Apache PDFBox." added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jempbox-1.8.9.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jempbox-1.8.9.jar"/>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;jempbox-1.8.9.jar"/>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;jempbox-1.8.9.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;jempbox-1.8.9.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2016-2175" cvss_score="7.5" severity="4" cwe_id="" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="Apache PDFBox before 1.8.12 and 2.x before 2.0.1 does not properly initialize the XML parsers, which allows context-dependent attackers to conduct XML External Entity &#x28;XXE&#x29; attacks via a crafted PDF." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="9c8e7aaf-6a2c-4c23-8aca-8c2bce33ee66" file_name="commons-discovery-0.5.0.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="0.5.0" library="commons-discovery" vendor="org.lucee" description="OSGi Version of Apache Commons Discovery" added_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;CryptographyUtility-1.0.jar&#x3a;commons-discovery-0.5.0.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="9ed1c71d-b706-4503-bc16-40642de7dd26" file_name="velocity-1.4.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="1.4" library="velocity" vendor="velocity" description="Velocity is a Java-based template engine. It permits anyone to use the&#xa;    simple yet powerful template language to reference objects defined in Java&#xa;    code." added_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;velocity-dep-1.4.jar&#x3a;velocity-1.4.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="9f2ce2f6-8859-4ac6-bad5-f775f224306d" file_name="hibernate-validator-5.4.1.Final.jar" sha1="fc71e53520e1030d278f682b796c88265b94c699" vulnerabilities="3" max_cvss_score="5.0" version="5.4.1.Final" library="hibernate-validator" vendor="org.hibernate" description="Hibernate&#x27;s Bean Validation &#x28;JSR-303&#x29; reference implementation." added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;hibernate-validator-5.4.1.Final.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;hibernate-validator-5.4.1.Final.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;hibernate-validator-5.4.1.Final.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2017-7536" cvss_score="4.4" severity="3" cwe_id="CWE-264" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="In Hibernate Validator 5.2.x before 5.2.5 final, 5.3.x, and 5.4.x, it was found that when the security manager&#x27;s reflective permissions, which allows it to access the private members of the class, are granted to Hibernate Validator, a potential privilege escalation can occur. By allowing the calling code to access those private members without the permission an attacker may be able to validate an invalid instance and access the private member value via ConstraintViolation&#x23;getInvalidValue&#x28;&#x29;." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2019-10219" cvss_score="4.3" severity="3" cwe_id="" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="hibernate-validator is vulnerable to cross-site scripting &#x28;XSS&#x29;. The vulnerability exists as the &#x60;SafeHtml&#x60; annotation from &#x60;SafeHtmlValidator&#x60; does not properly sanitize payloads in HTML comments." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2020-10693" cvss_score="5.0" severity="3" cwe_id="" first_found_date="2020-05-19 12&#x3a;24&#x3a;39 UTC" cve_summary="hibernate-validator is vulnerable to EL Expression Injection. The vulnerability exists as the value of &#x60;modType&#x60; in the validation message is improperly evaluated with &#x60;&#x24;&#x60;." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="a13917e5-53c6-4dad-80f8-326df74989d9" file_name="jaxb-impl-2.2.11.jar" sha1="a49ce57aee680f9435f49ba6ef427d38c93247a6" vulnerabilities="0" max_cvss_score="" version="2.2.11" library="jaxb-impl" vendor="com.sun.xml.bind" description="Old JAXB Runtime module. Contains sources required for runtime processing." added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jaxb-impl-2.2.11.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jaxb-impl-2.2.11.jar"/>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;jaxb-impl-2.2.11.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;jaxb-impl-2.2.11.jar"/>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;jaxb-impl-2.2.11.jar"/>
            </file_paths>
            <licenses>
               <license name="CeCILL Free Software License Agreement v1.0" spdx_id="CECILL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CECILL-1.0.html" risk_rating="3"/>
               <license name="Common Development and Distribution License 1.0" spdx_id="CDDL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.0.html" risk_rating="3"/>
               <license name="GNU General Public License v3.0 only" spdx_id="GPL-3.0-only" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;GPL-3.0-only.html" risk_rating="4"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="a2981386-6ede-497f-87a1-5bccb6a04243" file_name="jboss-logging-3.3.0.Final.jar" sha1="3616bb87707910296e2c195dc016287080bba5af" vulnerabilities="0" max_cvss_score="" version="3.3.0.Final" library="jboss-logging" vendor="org.jboss.logging" description="The JBoss Logging Framework" added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jboss-logging-3.3.0.Final.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;jboss-logging-3.3.0.Final.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jboss-logging-3.3.0.Final.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="a552e9ea-06f9-424c-831d-864bc86d735c" file_name="stax-api-1.0-2.jar" sha1="d6337b0de8b25e53e81b922352fbea9f9f57ba0b" vulnerabilities="0" max_cvss_score="" version="1.0-2" library="stax-api" vendor="javax.xml.stream" description="StAX is a standard XML processing API that allows you to stream XML data from and to your application." added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;stax-api-1.0-2.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;stax-api-1.0-2.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;stax-api-1.0-2.jar"/>
            </file_paths>
            <licenses>
               <license name="CeCILL Free Software License Agreement v1.0" spdx_id="CECILL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CECILL-1.0.html" risk_rating="3"/>
               <license name="Common Development and Distribution License 1.0" spdx_id="CDDL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.0.html" risk_rating="3"/>
               <license name="GNU Lesser General Public License v3.0 only" spdx_id="LGPL-3.0-only" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;LGPL-3.0-only.html" risk_rating="4"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="a686718a-446c-4680-9cda-c94138ecf622" file_name="esapi-2.1.0.1.jar" sha1="8d35e0bad77067b534664cb408493136e086aae1" vulnerabilities="0" max_cvss_score="" version="2.1.0.1" library="esapi" vendor="org.owasp.esapi" description="The Enterprise Security API &#x28;ESAPI&#x29; project is an OWASP project&#xa;        to create simple strong security controls for every web platform.&#xa;        Security controls are not simple to build. You can read about the&#xa;        hundreds of pitfalls for unwary developers on the OWASP web site. By&#xa;        providing developers with a set of strong controls, we aim to&#xa;        eliminate some of the complexity of creating secure web applications.&#xa;        This can result in significant cost savings across the SDLC." added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;esapi-2.1.0.1.jar"/>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;esapi-2.1.0.1.jar"/>
            </file_paths>
            <licenses>
               <license name="Creative Commons Attribution Share-Alike 3.0 &#x28;CC-BY-SA&#x29;" spdx_id="CC-BY-SA-3.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CC-BY-SA-3.0.html" risk_rating="4"/>
               <license name="BSD 3-Clause &#x22;New&#x22; or &#x22;Revised&#x22; License" spdx_id="BSD-3-Clause" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;BSD-3-Clause.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="a783d6e8-69d6-4b6c-88ca-e5096b567373" file_name="org.apache.servicemix.bundles.spring-beans-4.2.5.RELEASE_1.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="4.2.5.RELEASE_1" library="org.apache.servicemix.bundles.spring-beans" vendor="org.apache.servicemix.bundles" description="" added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;sbp-1.3.5-client.jar&#x3a;org.apache.servicemix.bundles.spring-beans-4.2.5.RELEASE_1.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="a82037b9-923e-484c-a3df-8a6c463bf4fa" file_name="castor-xml-1.3.3.jar" sha1="1072663e1b7463f6452eba51749bec5526f4883d" vulnerabilities="0" max_cvss_score="" version="1.3.3" library="castor-xml" vendor="org.codehaus.castor" description="The core XML data binding framework with support for marshalling Java objects to&#xa;        and unmarshalling from XML documents." added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;castor-xml-1.3.3.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;castor-xml-1.3.3.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;castor-xml-1.3.3.jar"/>
            </file_paths>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="a8ff79cc-927c-48de-bc3f-427235a74300" file_name="javax.management.j2ee-3.1.2.2.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="3.1.2.2" library="javax.management.j2ee" vendor="org.glassfish.main.admin" description="" added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;javaee-api-6.0.jar&#x3a;javax.management.j2ee-3.1.2.2.jar"/>
            </file_paths>
            <licenses>
               <license name="CeCILL Free Software License Agreement v1.0" spdx_id="CECILL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CECILL-1.0.html" risk_rating="3"/>
               <license name="Common Development and Distribution License 1.0" spdx_id="CDDL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.0.html" risk_rating="3"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="ab9aacad-af76-4bcc-8416-24489210aeec" file_name="httpcore-4.4.6.jar" sha1="e3fd8ced1f52c7574af952e2e6da0df8df08eb82" vulnerabilities="0" max_cvss_score="" version="4.4.6" library="httpcore" vendor="org.apache.httpcomponents" description="Apache HttpComponents Core &#x28;blocking I&#x2f;O&#x29;" added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;httpcore-4.4.6.jar"/>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;httpcore-4.4.6.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="ac8ba5cf-ef98-4ef5-a8ec-b72de069f015" file_name="commons-fileupload-1.3.1.jar" sha1="c621b54583719ac0310404463d6d99db27e1052c" vulnerabilities="2" max_cvss_score="7.8" version="1.3.1" library="commons-fileupload" vendor="commons-fileupload" description="The Apache Commons FileUpload component provides a simple yet flexible means of adding support for multipart&#xa;    file upload functionality to servlets and web applications." added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;commons-fileupload-1.3.1.jar"/>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;commons-fileupload-1.3.1.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2016-1000031" cvss_score="7.5" severity="4" cwe_id="CWE-284" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="Apache Commons FileUpload before 1.3.3 DiskFileItem File Manipulation Remote Code Execution" severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-3092" cvss_score="7.8" severity="4" cwe_id="CWE-20" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="commons-fileupload is vulnerable to denial of service attacks. The vulnerability can be triggered because the HTTP server does not properly filter the file upload requests which has the size of MIME boundary close to the size of the buffer in MultipartStream." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="acbe8828-a7f2-4b7a-ab4e-6f59ba3cfb75" file_name="lucene-queries-4.5.1.jar" sha1="62f829859c8bc2df6239cf4c1d8f96ed46b5e541" vulnerabilities="0" max_cvss_score="" version="4.5.1" library="lucene-queries" vendor="org.apache.lucene" description="Lucene Queries Module" added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;lucene-queries-4.5.1.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;lucene-queries-4.5.1.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;lucene-queries-4.5.1.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="b040818f-68b0-4383-ab53-5f3472bf4fd2" file_name="jasypt-spring2-1.9.2.jar" sha1="ad2cf1d43d6a2e8134a28ee3f95b1d8928d3a88a" vulnerabilities="0" max_cvss_score="" version="1.9.2" library="jasypt-spring2" vendor="org.jasypt" description="Java library which enables encryption in java apps with minimum effort." added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;jasypt-spring2-1.9.2.jar"/>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;jasypt-spring2-1.9.2.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="b19ff09e-1034-4f4b-b747-b5a9121c9f82" file_name="commons-cli-1.2.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="1.2" library="commons-cli" vendor="commons-cli" description="Commons CLI provides a simple API for presenting, processing and validating a command line interface." added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;CryptographyUtility-1.0.jar&#x3a;commons-cli-1.2.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="b328afb8-9ac3-4191-aabb-352b19707567" file_name="commons-logging-1.0.jar" sha1="f10838aa1add95b8cd26b8c9c07b2278c21e64b4" vulnerabilities="0" max_cvss_score="" version="1.0" library="commons-logging" vendor="commons-logging" description="" added_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;commons-logging-1.0.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;commons-logging-1.0.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;commons-logging-1.0.jar"/>
            </file_paths>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="b8ce97a8-10ee-4ff3-b694-87cb3a3b946c" file_name="spring-context-support-4.2.7.RELEASE.jar" sha1="fc1a52dcbd55617eb1d44664a357edf13c38003e" vulnerabilities="0" max_cvss_score="" version="4.2.7.RELEASE" library="spring-context-support" vendor="org.springframework" description="Spring Context Support" added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;spring-context-support-4.2.7.RELEASE.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;spring-context-support-4.2.7.RELEASE.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;spring-context-support-4.2.7.RELEASE.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="bac1de51-2023-487c-b658-7ae828655313" file_name="org.apache.servicemix.bundles.commons-io-1.4_2.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="1.4_2" library="org.apache.servicemix.bundles.commons-io" vendor="org.apache.servicemix.bundles" description="This OSGi bundle wraps &#x24;&#x7b;pkgArtifactId&#x7d; &#x24;&#x7b;pkgVersion&#x7d; jar file." added_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;CryptographyUtility-1.0.jar&#x3a;org.apache.servicemix.bundles.commons-io-1.4_2.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="bb8f388d-f3fc-4420-b7b6-26154e603b54" file_name="ecj-4.3.1.jar" sha1="21582b0e662b9e54fc6f0f2721d36f753ce7c58c" vulnerabilities="0" max_cvss_score="" version="4.3.1" library="ecj" vendor="org.eclipse.jdt.core.compiler" description="Eclipse JDT Core Batch Compiler" added_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;ecj-4.3.1.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;ecj-4.3.1.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;ecj-4.3.1.jar"/>
            </file_paths>
            <licenses>
               <license name="Eclipse Public License 1.0" spdx_id="EPL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;EPL-1.0.html" risk_rating="3"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="bc6fa1e4-128b-4c03-86bf-c3fce99c6828" file_name="commons-io-2.2.jar" sha1="83b5b8a7ba1c08f9e8c8ff2373724e33d3c1e22a" vulnerabilities="1" max_cvss_score="5.1" version="2.2" library="commons-io" vendor="commons-io" description="The Commons IO library contains utility classes, stream implementations, file filters, &#xa;file comparators, endian transformation classes, and much more." added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;commons-io-2.2.jar"/>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;commons-io-2.2.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="SRCCLR-SID-5295" cvss_score="5.1" severity="3" cwe_id="" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="commons-io is vulnerable to remote code execution &#x28;RCE&#x29; attacks. These attacks are possible because the library doesn&#x27;t restrict the classes which can be accepted when deserializing a binary." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="be829510-9730-4870-9a2d-aad455936ecd" file_name="commons-pool2-2.4.2.jar" sha1="e5f4f28f19d57716fbc3989d7a357ebf1e454fea" vulnerabilities="0" max_cvss_score="" version="2.4.2" library="commons-pool2" vendor="org.apache.commons" description="Apache Commons Object Pooling Library" added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;commons-pool2-2.4.2.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;commons-pool2-2.4.2.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;commons-pool2-2.4.2.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="bef0eac0-8f07-498a-a41f-1f173c4e30bd" file_name="lucene-queryparser-4.5.1.jar" sha1="63f46dc7577d676e7d8e5c63891c737297a9a61c" vulnerabilities="1" max_cvss_score="7.5" version="4.5.1" library="lucene-queryparser" vendor="org.apache.lucene" description="Lucene QueryParsers module" added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;lucene-queryparser-4.5.1.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;lucene-queryparser-4.5.1.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;lucene-queryparser-4.5.1.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2017-12629" cvss_score="7.5" severity="4" cwe_id="CWE-611" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="Remote code execution occurs in Apache Solr before 7.1 with Apache Lucene before 7.1 by exploiting XXE in conjunction with use of a Config API add-listener command to reach the RunExecutableListener class. Elasticsearch, although it uses Lucene, is NOT vulnerable to this. Note that the XML external entity expansion vulnerability occurs in the XML Query Parser which is available, by default, for any query request with parameters deftype&#x3d;xmlparser and can be exploited to upload malicious data to the &#x2f;upload request handler or as Blind XXE using ftp wrapper in order to read arbitrary local files from the Solr server. Note also that the second vulnerability relates to remote code execution using the RunExecutableListener available on all affected versions of Solr." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="bf44d28f-985e-450f-b2de-d1dde5560c28" file_name="batik-ext-1.8.jar" sha1="8713f3238cfac337624a90c3ad7d45d7bc6fb1b5" vulnerabilities="0" max_cvss_score="" version="1.8" library="batik-ext" vendor="org.apache.xmlgraphics" description="" added_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;batik-ext-1.8.jar"/>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;batik-ext-1.8.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="c11552be-13c0-466c-8f57-ac18fda3386b" file_name="slf4j-api-1.7.7.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="1.7.7" library="slf4j-api" vendor="org.slf4j" description="The slf4j API" added_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;sbp-1.3.5-client.jar&#x3a;slf4j-api-1.7.7.jar"/>
            </file_paths>
            <licenses>
               <license name="MIT License" spdx_id="MIT" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;MIT.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="c261820d-e996-466e-8f3f-24dee4226b13" file_name="xercesImpl-2.8.0.jar" sha1="cfd3ebe2f8034e660344f9108c3e2daf78c29cc3" vulnerabilities="3" max_cvss_score="7.8" version="2.8.0" library="xercesImpl" vendor="xerces" description="Xerces2 is the next generation of high performance, fully compliant XML parsers in the&#xa;    Apache Xerces family. This new version of Xerces introduces the Xerces Native Interface &#x28;XNI&#x29;,&#xa;    a complete framework for building parser components and configurations that is extremely&#xa;    modular and easy to program." added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;xercesImpl-2.8.0.jar"/>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;xercesImpl-2.8.0.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2012-0881" cvss_score="7.8" severity="4" cwe_id="CWE-399" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="Apache Xerces2 Java Parser before 2.12.0 allows remote attackers to cause a denial of service &#x28;CPU consumption&#x29; via a crafted message to an XML service, which triggers hash table collisions." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2013-4002" cvss_score="7.1" severity="4" cwe_id="" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="XMLscanner.java in Apache Xerces2 Java Parser before 2.12.0, as used in the Java Runtime Environment &#x28;JRE&#x29; in IBM Java 5.0 before 5.0 SR16-FP3, 6 before 6 SR14, 6.0.1 before 6.0.1 SR6, and 7 before 7 SR5 as well as Oracle Java SE 7u40 and earlier, Java SE 6u60 and earlier, Java SE 5.0u51 and earlier, JRockit R28.2.8 and earlier, JRockit R27.7.6 and earlier, Java SE Embedded 7u40 and earlier, and possibly other products allows remote attackers to cause a denial of service via vectors related to XML attribute names." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2018-2799" cvss_score="5.0" severity="3" cwe_id="" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="Vulnerability in the Java SE, Java SE Embedded, JRockit component of Oracle Java SE &#x28;subcomponent&#x3a; JAXP&#x29;. Supported versions that are affected are Java SE&#x3a; 7u171, 8u162 and 10&#x3b; Java SE Embedded&#x3a; 8u161&#x3b; JRockit&#x3a; R28.3.17. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Java SE, Java SE Embedded, JRockit. Successful attacks of this vulnerability can result in unauthorized ability to cause a partial denial of service &#x28;partial DOS&#x29; of Java SE, Java SE Embedded, JRockit. Note&#x3a; Applies to client and server deployment of Java. This vulnerability can be exploited through sandboxed Java Web Start applications and sandboxed Java applets. It can also be exploited by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.0 Base Score 5.3 &#x28;Availability impacts&#x29;. CVSS Vector&#x3a; &#x28;CVSS&#x3a;3.0&#x2f;AV&#x3a;N&#x2f;AC&#x3a;L&#x2f;PR&#x3a;N&#x2f;UI&#x3a;N&#x2f;S&#x3a;U&#x2f;C&#x3a;N&#x2f;I&#x3a;N&#x2f;A&#x3a;L&#x29;." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="c64d23d6-fcfb-42e4-a0b2-d6971d925fb3" file_name="lucene-core-4.5.1.jar" sha1="9a3a0258f668213f873891bec16ca4489281329e" vulnerabilities="0" max_cvss_score="" version="4.5.1" library="lucene-core" vendor="org.apache.lucene" description="Apache Lucene Java Core" added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;lucene-core-4.5.1.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;lucene-core-4.5.1.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;lucene-core-4.5.1.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="c9daab8d-4347-44b0-ae8f-3d9a6060193f" file_name="commons-fileupload-1.3.2.jar" sha1="5d7491ed6ebd02b6a8d2305f8e6b7fe5dbd95f72" vulnerabilities="1" max_cvss_score="7.5" version="1.3.2" library="commons-fileupload" vendor="commons-fileupload" description="The Apache Commons FileUpload component provides a simple yet flexible means of adding support for multipart&#xa;    file upload functionality to servlets and web applications." added_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;commons-fileupload-1.3.2.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;commons-fileupload-1.3.2.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;commons-fileupload-1.3.2.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2016-1000031" cvss_score="7.5" severity="4" cwe_id="CWE-284" first_found_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" cve_summary="Apache Commons FileUpload before 1.3.3 DiskFileItem File Manipulation Remote Code Execution" severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="cd463894-975b-4398-bc05-e93e7f434d1f" file_name="org.apache.servicemix.bundles.aopalliance-1.0_6.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="1.0_6" library="org.apache.servicemix.bundles.aopalliance" vendor="org.apache.servicemix.bundles" description="This OSGi bundle wraps &#x24;&#x7b;pkgArtifactId&#x7d; &#x24;&#x7b;pkgVersion&#x7d; jar file." added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;sbp-1.3.5-client.jar&#x3a;org.apache.servicemix.bundles.aopalliance-1.0_6.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="ce62e6c0-b44e-48eb-bc0c-badc4164f346" file_name="commons-configuration-1.10.jar" sha1="2b36e4adfb66d966c5aef2d73deb6be716389dc9" vulnerabilities="0" max_cvss_score="" version="1.10" library="commons-configuration" vendor="commons-configuration" description="Tools to assist in the reading of configuration&#x2f;preferences files in various formats." added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;commons-configuration-1.10.jar"/>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;commons-configuration-1.10.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="ce8d58bf-07f3-468c-9c3b-5e23a2fec4db" file_name="batik-css-1.8.jar" sha1="2b3f22cc65702a0821b7f0178d055282a1cdde59" vulnerabilities="0" max_cvss_score="" version="1.8" library="batik-css" vendor="org.apache.xmlgraphics" description="" added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;batik-css-1.8.jar"/>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;batik-css-1.8.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="cf2060a4-52ce-4680-9fe8-53fac7067c0a" file_name="xml-apis-1.0.b2.jar" sha1="3136ca936f64c9d68529f048c2618bd356bf85c9" vulnerabilities="0" max_cvss_score="" version="1.0.b2" library="xml-apis" vendor="xml-apis" description="xml-commons provides an Apache-hosted set of DOM, SAX, and &#xa;    JAXP interfaces for use in other xml-based projects. Our hope is that we &#xa;    can standardize on both a common version and packaging scheme for these &#xa;    critical XML standards interfaces to make the lives of both our developers &#xa;    and users easier. The External Components portion of xml-commons contains &#xa;    interfaces that are defined by external standards organizations. For DOM, &#xa;    that&#x27;s the W3C&#x3b; for SAX it&#x27;s David Megginson and sax.sourceforge.net&#x3b; for &#xa;    JAXP it&#x27;s Sun." added_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;xml-apis-1.0.b2.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;xml-apis-1.0.b2.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;xml-apis-1.0.b2.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="d2329cd0-ed15-4f16-95f8-c701a347ad18" file_name="fontbox-1.8.9.jar" sha1="f792e291ebc560fd6942506216f063f425ec5c74" vulnerabilities="1" max_cvss_score="4.3" version="1.8.9" library="fontbox" vendor="org.apache.pdfbox" description="The Apache FontBox library is an open source Java tool to obtain low level information&#xa;    from font files. FontBox is a subproject of Apache PDFBox." added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;fontbox-1.8.9.jar"/>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;fontbox-1.8.9.jar"/>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;fontbox-1.8.9.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;fontbox-1.8.9.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;fontbox-1.8.9.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2018-8036" cvss_score="4.3" severity="3" cwe_id="CWE-399" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="In Apache PDFBox 1.8.0 to 1.8.14 and 2.0.0RC1 to 2.0.10, a carefully crafted &#x28;or fuzzed&#x29; file can trigger an infinite loop which leads to an out of memory exception in Apache PDFBox&#x27;s AFMParser." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="d4101d10-f96d-402e-bdd5-28730d872051" file_name="jaxb-core-2.2.11.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="2.2.11" library="jaxb-core" vendor="org.glassfish.jaxb" description="JAXB Core module. Contains sources required by XJC, JXC and Runtime modules." added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;jaxb-core-2.2.11.jar&#x3a;jaxb-core-2.2.11.jar"/>
            </file_paths>
            <licenses>
               <license name="CeCILL Free Software License Agreement v1.0" spdx_id="CECILL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CECILL-1.0.html" risk_rating="3"/>
               <license name="Common Development and Distribution License 1.0" spdx_id="CDDL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.0.html" risk_rating="3"/>
               <license name="GNU General Public License v3.0 only" spdx_id="GPL-3.0-only" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;GPL-3.0-only.html" risk_rating="4"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="d440b6ed-a5ce-4727-996e-8abf3fe61123" file_name="classmate-1.3.1.jar" sha1="02ad2fd09dcf5607ca96f8ef432096a96986c40a" vulnerabilities="0" max_cvss_score="" version="1.3.1" library="classmate" vendor="com.fasterxml" description="Library for introspecting types with full generic information&#xa;        including resolving of field and method types." added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;classmate-1.3.1.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;classmate-1.3.1.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;classmate-1.3.1.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="d6db03c3-de7b-4488-8cba-b423c5d2425b" file_name="stax-1.2.0.jar" sha1="c434800de5e4bbe1822805be5fb1c32d6834f830" vulnerabilities="0" max_cvss_score="" version="1.2.0" library="stax" vendor="stax" description="StAX is the reference implementation of the StAX API" added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;stax-1.2.0.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;stax-1.2.0.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;stax-1.2.0.jar"/>
            </file_paths>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="d74bb950-3ee3-4bf3-a393-0eb490ec18b0" file_name="jsch-0.1.44-1.jar" sha1="2e9ae08de5a71bd0e0d3ba2558598181bfa71d4e" vulnerabilities="1" max_cvss_score="4.3" version="0.1.44-1" library="jsch" vendor="com.jcraft" description="JSch is a pure Java implementation of SSH2" added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;jsch-0.1.44-1.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;jsch-0.1.44-1.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jsch-0.1.44-1.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jsch-0.1.44-1.jar"/>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;jsch-0.1.44-1.jar"/>
            </file_paths>
            <licenses>
               <license name="BSD 3-Clause &#x22;New&#x22; or &#x22;Revised&#x22; License" spdx_id="BSD-3-Clause" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;BSD-3-Clause.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2016-5725" cvss_score="4.3" severity="3" cwe_id="CWE-22" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="Directory traversal vulnerability in JCraft JSch before 0.1.54 on Windows, when the mode is ChannelSftp.OVERWRITE, allows remote SFTP servers to write to arbitrary files via a ..&#x5c; &#x28;dot dot backslash&#x29; in a response to a recursive GET command." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="d7925c69-c3dc-46c0-8e29-30f4158c5ef7" file_name="groovy-testng-2.3.0-beta-2.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="2.3.0-beta-2" library="groovy-testng" vendor="org.codehaus.groovy" description="Groovy&#x3a; A powerful, dynamic language for the JVM" added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;groovy-all-2.0.1.jar&#x3a;groovy-testng-2.3.0-beta-2.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="d7a55fc7-01d7-4834-972c-1196be0b290b" file_name="xercesImpl-2.11.0.jar" sha1="9bb329db1cfc4e22462c9d6b43a8432f5850e92c" vulnerabilities="3" max_cvss_score="7.8" version="2.11.0" library="xercesImpl" vendor="xerces" description="Xerces2 is the next generation of high performance, fully compliant XML parsers in the Apache Xerces family. This new version of Xerces introduces the Xerces Native Interface &#x28;XNI&#x29;, a complete framework for building parser components and configurations that is extremely modular and easy to program.&#xa;&#xa;    The Apache Xerces2 parser is the reference implementation of XNI but other parser components, configurations, and parsers can be written using the Xerces Native Interface. For complete design and implementation documents, refer to the XNI Manual.&#xa;&#xa;    Xerces2 is a fully conforming XML Schema 1.0 processor. A partial experimental implementation of the XML Schema 1.1 Structures and Datatypes Working Drafts &#x28;December 2009&#x29; and an experimental implementation of the XML Schema Definition Language &#x28;XSD&#x29;&#x3a; Component Designators &#x28;SCD&#x29; Candidate Recommendation &#x28;January 2010&#x29; are provided for evaluation. For more information, refer to the XML Schema page.&#xa;&#xa;    Xerces2 also provides a complete implementation of the Document Object Model Level 3 Core and Load&#x2f;Save W3C Recommendations and provides a complete implementation of the XML Inclusions &#x28;XInclude&#x29; W3C Recommendation. It also provides support for OASIS XML Catalogs v1.1.&#xa;&#xa;    Xerces2 is able to parse documents written according to the XML 1.1 Recommendation, except that it does not yet provide an option to enable normalization checking as described in section 2.13 of this specification. It also handles namespaces according to the XML Namespaces 1.1 Recommendation, and will correctly serialize XML 1.1 documents if the DOM level 3 load&#x2f;save APIs are in use." added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;xercesImpl-2.11.0.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;xercesImpl-2.11.0.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;xercesImpl-2.11.0.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2012-0881" cvss_score="7.8" severity="4" cwe_id="CWE-399" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="Apache Xerces2 Java Parser before 2.12.0 allows remote attackers to cause a denial of service &#x28;CPU consumption&#x29; via a crafted message to an XML service, which triggers hash table collisions." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2013-4002" cvss_score="7.1" severity="4" cwe_id="" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="XMLscanner.java in Apache Xerces2 Java Parser before 2.12.0, as used in the Java Runtime Environment &#x28;JRE&#x29; in IBM Java 5.0 before 5.0 SR16-FP3, 6 before 6 SR14, 6.0.1 before 6.0.1 SR6, and 7 before 7 SR5 as well as Oracle Java SE 7u40 and earlier, Java SE 6u60 and earlier, Java SE 5.0u51 and earlier, JRockit R28.2.8 and earlier, JRockit R27.7.6 and earlier, Java SE Embedded 7u40 and earlier, and possibly other products allows remote attackers to cause a denial of service via vectors related to XML attribute names." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2018-2799" cvss_score="5.0" severity="3" cwe_id="" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="Vulnerability in the Java SE, Java SE Embedded, JRockit component of Oracle Java SE &#x28;subcomponent&#x3a; JAXP&#x29;. Supported versions that are affected are Java SE&#x3a; 7u171, 8u162 and 10&#x3b; Java SE Embedded&#x3a; 8u161&#x3b; JRockit&#x3a; R28.3.17. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Java SE, Java SE Embedded, JRockit. Successful attacks of this vulnerability can result in unauthorized ability to cause a partial denial of service &#x28;partial DOS&#x29; of Java SE, Java SE Embedded, JRockit. Note&#x3a; Applies to client and server deployment of Java. This vulnerability can be exploited through sandboxed Java Web Start applications and sandboxed Java applets. It can also be exploited by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.0 Base Score 5.3 &#x28;Availability impacts&#x29;. CVSS Vector&#x3a; &#x28;CVSS&#x3a;3.0&#x2f;AV&#x3a;N&#x2f;AC&#x3a;L&#x2f;PR&#x3a;N&#x2f;UI&#x3a;N&#x2f;S&#x3a;U&#x2f;C&#x3a;N&#x2f;I&#x3a;N&#x2f;A&#x3a;L&#x29;." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="ddf8735a-7261-4344-ab27-0aaf288a28fe" file_name="jakarta-regexp-1.4.jar" sha1="0ea514a179ac1dd7e81c7e6594468b9b9910d298" vulnerabilities="0" max_cvss_score="" version="1.4" library="jakarta-regexp" vendor="jakarta-regexp" description="" added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jakarta-regexp-1.4.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;jakarta-regexp-1.4.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jakarta-regexp-1.4.jar"/>
            </file_paths>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="e23e1e51-1ae0-4dd0-8fa8-c22555bb7b90" file_name="jfreechart-1.0.19.jar" sha1="ba9ee7dbb2e4c57a6901c79f614ed2dea9cc0e20" vulnerabilities="0" max_cvss_score="" version="1.0.19" library="jfreechart" vendor="org.jfree" description="JFreeChart is a class library, written in Java, for generating charts. &#xa;    Utilising the Java2D APIs, it currently supports bar charts, pie charts, &#xa;    line charts, XY-plots and time series plots." added_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jfreechart-1.0.19.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jfreechart-1.0.19.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;jfreechart-1.0.19.jar"/>
            </file_paths>
            <licenses>
               <license name="GNU Lesser General Public License v3.0 only" spdx_id="LGPL-3.0-only" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;LGPL-3.0-only.html" risk_rating="4"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="e44e49e2-18ea-4996-b7b4-bcc44a0e3d44" file_name="keycloak-osgi-thirdparty-3.4.1.CR1.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="3.4.1.CR1" library="keycloak-osgi-thirdparty" vendor="org.keycloak" description="Keycloak OSGI bundling for 3rd party libs without OSGI headers in manifest" added_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;sbp-1.3.5-client.jar&#x3a;keycloak-osgi-thirdparty-3.4.1.CR1.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="e460f0f2-325d-4ab3-9395-c3bb1336c1fc" file_name="txw2-2.2.10.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="2.2.10" library="txw2" vendor="org.glassfish.jaxb" description="TXW is a library that allows you to write XML documents." added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;jaxb-core-2.2.11.jar&#x3a;txw2-2.2.10.jar"/>
            </file_paths>
            <licenses>
               <license name="CeCILL Free Software License Agreement v1.0" spdx_id="CECILL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CECILL-1.0.html" risk_rating="3"/>
               <license name="Common Development and Distribution License 1.0" spdx_id="CDDL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.0.html" risk_rating="3"/>
               <license name="GNU General Public License v3.0 only" spdx_id="GPL-3.0-only" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;GPL-3.0-only.html" risk_rating="4"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="e4689eb5-b8ae-46f1-ba93-4bb4bd3dde0b" file_name="istack-commons-runtime-2.21.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="2.21" library="istack-commons-runtime" vendor="com.sun.istack" description="" added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;jaxb-core-2.2.11.jar&#x3a;istack-commons-runtime-2.21.jar"/>
            </file_paths>
            <licenses>
               <license name="Common Development and Distribution License 1.1&#x28;CDDL-1.1&#x29;" spdx_id="CDDL-1.1" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.1.html" risk_rating="3"/>
               <license name="GNU General Public License with Classpath Exceptions version 2.0" spdx_id="GPL-2.0-with-classpath-exception" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;GPL-2.0-with-classpath-exception.html" risk_rating="4"/>
               <license name="Creative Commons Attribution 3.0" spdx_id="CC-BY-3.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CC-BY-3.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="e9633197-464f-4119-85e3-e0aa82ddc56c" file_name="ezmorph-1.0.6.jar" sha1="01e55d2a0253ea37745d33062852fd2c90027432" vulnerabilities="0" max_cvss_score="" version="1.0.6" library="ezmorph" vendor="net.sf.ezmorph" description="Simple java library for transforming an Object to another Object." added_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;ezmorph-1.0.6.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;ezmorph-1.0.6.jar"/>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;ezmorph-1.0.6.jar"/>
               <file_path value="MicroSitioBETEAREJB.ear&#x23;zip&#x3a;lib&#x2f;ezmorph-1.0.6.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;ezmorph-1.0.6.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="f0a2119b-84e0-4cfc-8026-ee81227bf5b2" file_name="bcprov-jdk14-1.55.jar" sha1="629bd5493ee90ae641912aef5024341d1309e838" vulnerabilities="14" max_cvss_score="7.5" version="1.55" library="bcprov-jdk14" vendor="org.bouncycastle" description="The Bouncy Castle Crypto package is a Java implementation of cryptographic algorithms. This jar contains JCE provider and lightweight API for the Bouncy Castle Cryptography APIs for JDK 1.4." added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;bcprov-jdk14-1.55.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;bcprov-jdk14-1.55.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;bcprov-jdk14-1.55.jar"/>
            </file_paths>
            <licenses>
               <license name="MIT License" spdx_id="MIT" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;MIT.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2016-1000338" cvss_score="5.0" severity="3" cwe_id="CWE-347" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="In Bouncy Castle JCE Provider version 1.55 and earlier the DSA does not fully validate ASN.1 encoding of signature on verification. It is possible to inject extra elements in the sequence making up the signature and still have it validate, which in some cases may allow the introduction of &#x27;invisible&#x27; data into a signed structure." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-1000339" cvss_score="5.0" severity="3" cwe_id="CWE-327" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="In the Bouncy Castle JCE Provider version 1.55 and earlier the primary engine class used for AES was AESFastEngine. Due to the highly table driven approach used in the algorithm it turns out that if the data channel on the CPU can be monitored the lookup table accesses are sufficient to leak information on the AES key being used. There was also a leak in AESEngine although it was substantially less. AESEngine has been modified to remove any signs of leakage &#x28;testing carried out on Intel X86-64&#x29; and is now the primary AES class for the BC JCE provider from 1.56. Use of AESFastEngine is now only recommended where otherwise deemed appropriate." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-1000340" cvss_score="5.0" severity="3" cwe_id="CWE-682" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="In the Bouncy Castle JCE Provider versions 1.51 to 1.55, a carry propagation bug was introduced in the implementation of squaring for several raw math classes have been fixed &#x28;org.bouncycastle.math.raw.Nat&#x3f;&#x3f;&#x3f;&#x29;. These classes are used by our custom elliptic curve implementations &#x28;org.bouncycastle.math.ec.custom.&#x2a;&#x2a;&#x29;, so there was the possibility of rare &#x28;in general usage&#x29; spurious calculations for elliptic curve scalar multiplications. Such errors would have been detected with high probability by the output validation for our scalar multipliers." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-1000341" cvss_score="4.3" severity="3" cwe_id="CWE-358" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="In the Bouncy Castle JCE Provider version 1.55 and earlier DSA signature generation is vulnerable to timing attack. Where timings can be closely observed for the generation of signatures, the lack of blinding in 1.55, or earlier, may allow an attacker to gain information about the signature&#x27;s k value and ultimately the private value as well." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-1000342" cvss_score="5.0" severity="3" cwe_id="CWE-347" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="In the Bouncy Castle JCE Provider version 1.55 and earlier ECDSA does not fully validate ASN.1 encoding of signature on verification. It is possible to inject extra elements in the sequence making up the signature and still have it validate, which in some cases may allow the introduction of &#x27;invisible&#x27; data into a signed structure." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-1000343" cvss_score="5.0" severity="3" cwe_id="CWE-326" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="In the Bouncy Castle JCE Provider version 1.55 and earlier the DSA key pair generator generates a weak private key if used with default values. If the JCA key pair generator is not explicitly initialised with DSA parameters, 1.55 and earlier generates a private value assuming a 1024 bit key size. In earlier releases this can be dealt with by explicitly passing parameters to the key pair generator." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-1000344" cvss_score="5.8" severity="3" cwe_id="CWE-358" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="In the Bouncy Castle JCE Provider version 1.55 and earlier the DHIES implementation allowed the use of ECB mode. This mode is regarded as unsafe and support for it has been removed from the provider." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-1000345" cvss_score="4.3" severity="3" cwe_id="CWE-326" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="In the Bouncy Castle JCE Provider version 1.55 and earlier the DHIES&#x2f;ECIES CBC mode vulnerable to padding oracle attack. For BC 1.55 and older, in an environment where timings can be easily observed, it is possible with enough observations to identify when the decryption is failing due to padding." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-1000346" cvss_score="4.3" severity="3" cwe_id="CWE-20" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="In the Bouncy Castle JCE Provider version 1.55 and earlier the other party DH public key is not fully validated. This can cause issues as invalid keys can be used to reveal details about the other party&#x27;s private key where static Diffie-Hellman is in use. As of release 1.56 the key parameters are checked on agreement calculation." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-1000352" cvss_score="5.8" severity="3" cwe_id="CWE-358" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="In the Bouncy Castle JCE Provider version 1.55 and earlier the ECIES implementation allowed the use of ECB mode. This mode is regarded as unsafe and support for it has been removed from the provider." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2016-2183" cvss_score="5.0" severity="3" cwe_id="CWE-200" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="The DES and Triple DES ciphers, as used in the TLS, SSH, and IPSec protocols and other protocols and products, have a birthday bound of approximately four billion blocks, which makes it easier for remote attackers to obtain cleartext data via a birthday attack against a long-duration encrypted session, as demonstrated by an HTTPS session using Triple DES in CBC mode, aka a &#x22;Sweet32&#x22; attack." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2018-1000180" cvss_score="5.0" severity="3" cwe_id="CWE-310" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="Bouncy Castle BC 1.54 - 1.59, BC-FJA 1.0.0, BC-FJA 1.0.1 and earlier have a flaw in the Low-level interface to RSA key pair generator, specifically RSA Key Pairs generated in low-level API with added certainty may have less M-R tests than expected. This appears to be fixed in versions BC 1.60 beta 4 and later, BC-FJA 1.0.2 and later." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2018-1000613" cvss_score="7.5" severity="4" cwe_id="CWE-502" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="Legion of the Bouncy Castle Legion of the Bouncy Castle Java Cryptography APIs 1.58 up to but not including 1.60 contains a CWE-470&#x3a; Use of Externally-Controlled Input to Select Classes or Code &#x28;&#x27;Unsafe Reflection&#x27;&#x29; vulnerability in XMSS&#x2f;XMSS&#x5e;MT private key deserialization that can result in Deserializing an XMSS&#x2f;XMSS&#x5e;MT private key can result in the execution of unexpected code. This attack appear to be exploitable via A handcrafted private key can include references to unexpected classes which will be picked up from the class path for the executing application. This vulnerability appears to have been fixed in 1.60 and later." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
               <vulnerability cve_id="CVE-2018-5382" cvss_score="7.5" severity="4" cwe_id="CWE-310" first_found_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" cve_summary="Bouncy Castle is vulnerable to hash collision attacks. The library keystore files uses a HMAC hash that is only 16 bits long, allowing a malicious user to retrieve the password used for keystore integrity verification checks. This vulnerability only affects users of the &#x60;BKS-V1&#x60; keystore format, which was re-introduced since 1.49." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="f43ebbde-ff83-4520-80ae-c25ae778d860" file_name="jxl-2.6.12.jar" sha1="7faf62e0697f7a88954622dfe8c8de33ed142ac7" vulnerabilities="0" max_cvss_score="" version="2.6.12" library="jxl" vendor="net.sourceforge.jexcelapi" description="JExcelApi is a java library which provides the ability to read, write, and modify Microsoft Excel spreadsheets." added_date="2020-05-07 21&#x3a;56&#x3a;43 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jxl-2.6.12.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;jxl-2.6.12.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jxl-2.6.12.jar"/>
            </file_paths>
            <licenses>
               <license name="GNU Lesser General Public License v3.0 only" spdx_id="LGPL-3.0-only" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;LGPL-3.0-only.html" risk_rating="4"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="f6aa318b-b519-4736-a0ee-1451710112e8" file_name="javax.inject-1.jar" sha1="6975da39a7040257bd51d21a231b76c915872d38" vulnerabilities="0" max_cvss_score="" version="1" library="javax.inject" vendor="javax.inject" description="The javax.inject API" added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;javax.inject-1.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;javax.inject-1.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;javax.inject-1.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="f983b606-194e-4d5c-8d5c-f2c70a031437" file_name="jline-1.0.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="1.0" library="jline" vendor="jline" description="JLine is a java library for reading and editing user input in console applications. It features&#xa;        tab-completion, command history, password masking, customizable keybindings, and pass-through handlers to use to&#xa;        chain to other console applications." added_date="2020-05-07 21&#x3a;56&#x3a;42 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;CryptographyUtility-1.0.jar&#x3a;jline-1.0.jar"/>
            </file_paths>
            <licenses>
               <license name="BSD 3-Clause &#x22;New&#x22; or &#x22;Revised&#x22; License" spdx_id="BSD-3-Clause" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;BSD-3-Clause.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="fbb1b0df-fedb-46cd-95d2-24785a8f6a55" file_name="stax-api-1.0.1.jar" sha1="49c100caf72d658aca8e58bd74a4ba90fa2b0d70" vulnerabilities="0" max_cvss_score="" version="1.0.1" library="stax-api" vendor="stax" description="StAX API is the standard java XML processing API defined by JSR-173" added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;stax-api-1.0.1.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;stax-api-1.0.1.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;stax-api-1.0.1.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="fe18bf3b-780f-42f3-8b50-9b41224c8af2" file_name="commons-codec-1.8.jar" sha1="" vulnerabilities="1" max_cvss_score="5.0" version="1.8" library="commons-codec" vendor="commons-codec" description="The codec package contains simple encoder and decoders for&#xa;     various formats such as Base64 and Hexadecimal.  In addition to these&#xa;     widely used encoders and decoders, the codec package also maintains a&#xa;     collection of phonetic encoding utilities." added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="true">
            <file_paths>
               <file_path value="MicroSitioBETEAREJB_ear&#x2f;lib&#x2f;CryptographyUtility-1.0.jar&#x3a;commons-codec-1.8.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="SRCCLR-SID-22742" cvss_score="5.0" severity="3" cwe_id="" first_found_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" cve_summary="commons-codec does not properly perform input validation on encoded values. The &#x60;decode&#x28;&#x29;&#x60; function in the Base32, Base64 and BCodec classes fails to reject malformed Base32 and Base64 encoded strings and decodes into arbitrary values. A remote attacker can leverage this vulnerability to tunnel additional information via Base32 or Base64 encoded strings that appears to be legitimate." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="true"/>
            </vulnerabilities>
            <violated_policy_rules>
               <policy_rule type="Disallow Vulnerabilities by Severity" value="Medium" desc="Medium and Above Not Allowed"/>
            </violated_policy_rules>
         </component>
         <component component_id="ff0f2ffb-919b-47fd-86ac-956d1553cd17" file_name="velocity-dep-1.4.jar" sha1="b1df5193d3dd66a310b32828c547cd9e163b98df" vulnerabilities="0" max_cvss_score="" version="1.4-dev" library="velocity" vendor="velocity" description="Velocity is a Java-based template engine. It permits anyone to use the&#xa;    simple yet powerful template language to reference objects defined in Java&#xa;    code." added_date="2020-05-07 21&#x3a;56&#x3a;44 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1_0_war&#x2f;WEB-INF&#x2f;lib&#x2f;velocity-dep-1.4.jar"/>
               <file_path value="MicroSitioBETEARWeb.ear&#x23;zip&#x3a;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;velocity-dep-1.4.jar"/>
               <file_path value="MicroSitioBETEARWeb_ear&#x2f;MicroSitioBETWeb-1.0.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;velocity-dep-1.4.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
      </vulnerable_components>
   </software_composition_analysis>
</detailedreport>
